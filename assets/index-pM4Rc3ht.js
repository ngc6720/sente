var tc=Object.defineProperty;var nc=(i,e,t)=>e in i?tc(i,e,{enumerable:true,configurable:true,writable:true,value:t}):i[e]=t;var Jr=(i,e,t)=>{nc(i,typeof e!=="symbol"?e+"":e,t);return t};var Qr=(i,e,t)=>{if(!e.has(i))throw TypeError("Cannot "+t)};var Ke=(i,e,t)=>{Qr(i,e,"read from private field");return t?t.call(i):e.get(i)};var cn=(i,e,t)=>{if(e.has(i))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(i):e.set(i,t)};var es=(i,e,t,n)=>{Qr(i,e,"write to private field");n?n.call(i,t):e.set(i,t);return t};var Qn=(i,e,t,n)=>({set _(r){es(i,e,r,t)},get _(){return Ke(i,e,n)}});var ei=(i,e,t)=>{Qr(i,e,"access private method");return t};(function i(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload")){return}for(const r of document.querySelectorAll('link[rel="modulepreload"]')){n(r)}new MutationObserver(r=>{for(const s of r){if(s.type!=="childList"){continue}for(const o of s.addedNodes){if(o.tagName==="LINK"&&o.rel==="modulepreload")n(o)}}}).observe(document,{childList:true,subtree:true});function t(r){const s={};if(r.integrity)s.integrity=r.integrity;if(r.referrerPolicy)s.referrerPolicy=r.referrerPolicy;if(r.crossOrigin==="use-credentials")s.credentials="include";else if(r.crossOrigin==="anonymous")s.credentials="omit";else s.credentials="same-origin";return s}function n(r){if(r.ep)return;r.ep=true;const s=t(r);fetch(r.href,s)}})();/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Zs="160";const ti={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2};const ni={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3};const ic=0;const xa=1;const rc=2;const ll=1;const sc=2;const mn=3;const Un=0;const Pt=1;const nn=2;const Cn=0;const Ei=1;const Ma=2;const Sa=3;const Ea=4;const ac=5;const kn=100;const oc=101;const lc=102;const ya=103;const Ta=104;const cc=200;const uc=201;const hc=202;const dc=203;const Os=204;const Fs=205;const fc=206;const pc=207;const mc=208;const gc=209;const _c=210;const vc=211;const xc=212;const Mc=213;const Sc=214;const Ec=0;const yc=1;const Tc=2;const Ir=3;const bc=4;const Ac=5;const wc=6;const Rc=7;const $s=0;const Cc=1;const Lc=2;const Ln=0;const Pc=1;const Dc=2;const Uc=3;const Ic=4;const Nc=5;const Oc=6;const cl=300;const Ti=301;const bi=302;const Bs=303;const zs=304;const Vr=306;const Hs=1e3;const Bt=1001;const Gs=1002;const Ct=1003;const ba=1004;const ts=1005;const Vt=1006;const Fc=1007;const Vi=1008;const Pn=1009;const Bc=1010;const zc=1011;const Js=1012;const ul=1013;const An=1014;const wn=1015;const ki=1016;const hl=1017;const dl=1018;const Yn=1020;const Hc=1021;const Kt=1023;const Gc=1024;const Vc=1025;const qn=1026;const Ai=1027;const kc=1028;const fl=1029;const Wc=1030;const pl=1031;const ml=1033;const ns=33776;const is=33777;const rs=33778;const ss=33779;const Aa=35840;const wa=35841;const Ra=35842;const Ca=35843;const gl=36196;const La=37492;const Pa=37496;const Da=37808;const Ua=37809;const Ia=37810;const Na=37811;const Oa=37812;const Fa=37813;const Ba=37814;const za=37815;const Ha=37816;const Ga=37817;const Va=37818;const ka=37819;const Wa=37820;const Xa=37821;const as=36492;const Ya=36494;const qa=36495;const Xc=36283;const ja=36284;const Ka=36285;const Za=36286;const _l=3e3;const jn=3001;const Yc=3200;const qc=3201;const vl=0;const jc=1;const Wt="";const pt="srgb";const xn="srgb-linear";const Qs="display-p3";const kr="display-p3-linear";const Nr="linear";const et="srgb";const Or="rec709";const Fr="p3";const ii=7680;const $a=519;const Kc=512;const Zc=513;const $c=514;const xl=515;const Jc=516;const Qc=517;const eu=518;const tu=519;const Vs=35044;const Ja="300 es";const ks=1035;const _n=2e3;const Br=2001;class Jn{addEventListener(e,t){if(this._listeners===void 0)this._listeners={};const n=this._listeners;if(n[e]===void 0){n[e]=[]}if(n[e].indexOf(t)===-1){n[e].push(t)}}hasEventListener(e,t){if(this._listeners===void 0)return false;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const n=this._listeners;const r=n[e];if(r!==void 0){const s=r.indexOf(t);if(s!==-1){r.splice(s,1)}}}dispatchEvent(e){if(this._listeners===void 0)return;const t=this._listeners;const n=t[e.type];if(n!==void 0){e.target=this;const r=n.slice(0);for(let s=0,o=r.length;s<o;s++){r[s].call(this,e)}e.target=null}}}const St=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Qa=1234567;const Bi=Math.PI/180;const Wi=180/Math.PI;function vn(){const i=Math.random()*4294967295|0;const e=Math.random()*4294967295|0;const t=Math.random()*4294967295|0;const n=Math.random()*4294967295|0;const r=St[i&255]+St[i>>8&255]+St[i>>16&255]+St[i>>24&255]+"-"+St[e&255]+St[e>>8&255]+"-"+St[e>>16&15|64]+St[e>>24&255]+"-"+St[t&63|128]+St[t>>8&255]+"-"+St[t>>16&255]+St[t>>24&255]+St[n&255]+St[n>>8&255]+St[n>>16&255]+St[n>>24&255];return r.toLowerCase()}function xt(i,e,t){return Math.max(e,Math.min(t,i))}function ea(i,e){return(i%e+e)%e}function nu(i,e,t,n,r){return n+(i-e)*(r-n)/(t-e)}function iu(i,e,t){if(i!==e){return(t-i)/(e-i)}else{return 0}}function zi(i,e,t){return(1-t)*i+t*e}function ru(i,e,t,n){return zi(i,e,1-Math.exp(-t*n))}function su(i,e=1){return e-Math.abs(ea(i,e*2)-e)}function au(i,e,t){if(i<=e)return 0;if(i>=t)return 1;i=(i-e)/(t-e);return i*i*(3-2*i)}function ou(i,e,t){if(i<=e)return 0;if(i>=t)return 1;i=(i-e)/(t-e);return i*i*i*(i*(i*6-15)+10)}function lu(i,e){return i+Math.floor(Math.random()*(e-i+1))}function cu(i,e){return i+Math.random()*(e-i)}function uu(i){return i*(.5-Math.random())}function hu(i){if(i!==void 0)Qa=i;let e=Qa+=1831565813;e=Math.imul(e^e>>>15,e|1);e^=e+Math.imul(e^e>>>7,e|61);return((e^e>>>14)>>>0)/4294967296}function du(i){return i*Bi}function fu(i){return i*Wi}function Ws(i){return(i&i-1)===0&&i!==0}function pu(i){return Math.pow(2,Math.ceil(Math.log(i)/Math.LN2))}function zr(i){return Math.pow(2,Math.floor(Math.log(i)/Math.LN2))}function mu(i,e,t,n,r){const s=Math.cos;const o=Math.sin;const a=s(t/2);const l=o(t/2);const c=s((e+n)/2);const u=o((e+n)/2);const d=s((e-n)/2);const f=o((e-n)/2);const m=s((n-e)/2);const _=o((n-e)/2);switch(r){case"XYX":i.set(a*u,l*d,l*f,a*c);break;case"YZY":i.set(l*f,a*u,l*d,a*c);break;case"ZXZ":i.set(l*d,l*f,a*u,a*c);break;case"XZX":i.set(a*u,l*_,l*m,a*c);break;case"YXY":i.set(l*m,a*u,l*_,a*c);break;case"ZYZ":i.set(l*_,l*m,a*u,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}}function rn(i,e){switch(e.constructor){case Float32Array:return i;case Uint32Array:return i/4294967295;case Uint16Array:return i/65535;case Uint8Array:return i/255;case Int32Array:return Math.max(i/2147483647,-1);case Int16Array:return Math.max(i/32767,-1);case Int8Array:return Math.max(i/127,-1);default:throw new Error("Invalid component type.")}}function Ze(i,e){switch(e.constructor){case Float32Array:return i;case Uint32Array:return Math.round(i*4294967295);case Uint16Array:return Math.round(i*65535);case Uint8Array:return Math.round(i*255);case Int32Array:return Math.round(i*2147483647);case Int16Array:return Math.round(i*32767);case Int8Array:return Math.round(i*127);default:throw new Error("Invalid component type.")}}const Ml={DEG2RAD:Bi,RAD2DEG:Wi,generateUUID:vn,clamp:xt,euclideanModulo:ea,mapLinear:nu,inverseLerp:iu,lerp:zi,damp:ru,pingpong:su,smoothstep:au,smootherstep:ou,randInt:lu,randFloat:cu,randFloatSpread:uu,seededRandom:hu,degToRad:du,radToDeg:fu,isPowerOfTwo:Ws,ceilPowerOfTwo:pu,floorPowerOfTwo:zr,setQuaternionFromProperEuler:mu,normalize:Ze,denormalize:rn};class Pe{constructor(e=0,t=0){Pe.prototype.isVector2=true;this.x=e;this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){this.x=e;this.y=t;return this}setScalar(e){this.x=e;this.y=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){this.x=e.x;this.y=e.y;return this}add(e){this.x+=e.x;this.y+=e.y;return this}addScalar(e){this.x+=e;this.y+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;return this}sub(e){this.x-=e.x;this.y-=e.y;return this}subScalar(e){this.x-=e;this.y-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;return this}multiply(e){this.x*=e.x;this.y*=e.y;return this}multiplyScalar(e){this.x*=e;this.y*=e;return this}divide(e){this.x/=e.x;this.y/=e.y;return this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y;const r=e.elements;this.x=r[0]*t+r[3]*n+r[6];this.y=r[1]*t+r[4]*n+r[7];return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);return this}negate(){this.x=-this.x;this.y=-this.y;return this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const e=Math.atan2(-this.y,-this.x)+Math.PI;return e}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(xt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;return this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);return this}rotateAround(e,t){const n=Math.cos(t),r=Math.sin(t);const s=this.x-e.x;const o=this.y-e.y;this.x=s*n-o*r+e.x;this.y=s*r+o*n+e.y;return this}random(){this.x=Math.random();this.y=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y}}class Ge{constructor(e,t,n,r,s,o,a,l,c){Ge.prototype.isMatrix3=true;this.elements=[1,0,0,0,1,0,0,0,1];if(e!==void 0){this.set(e,t,n,r,s,o,a,l,c)}}set(e,t,n,r,s,o,a,l,c){const u=this.elements;u[0]=e;u[1]=r;u[2]=a;u[3]=t;u[4]=s;u[5]=l;u[6]=n;u[7]=o;u[8]=c;return this}identity(){this.set(1,0,0,0,1,0,0,0,1);return this}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];return this}extractBasis(e,t,n){e.setFromMatrix3Column(this,0);t.setFromMatrix3Column(this,1);n.setFromMatrix3Column(this,2);return this}setFromMatrix4(e){const t=e.elements;this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]);return this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements;const r=t.elements;const s=this.elements;const o=n[0],a=n[3],l=n[6];const c=n[1],u=n[4],d=n[7];const f=n[2],m=n[5],_=n[8];const x=r[0],p=r[3],h=r[6];const T=r[1],v=r[4],R=r[7];const D=r[2],C=r[5],A=r[8];s[0]=o*x+a*T+l*D;s[3]=o*p+a*v+l*C;s[6]=o*h+a*R+l*A;s[1]=c*x+u*T+d*D;s[4]=c*p+u*v+d*C;s[7]=c*h+u*R+d*A;s[2]=f*x+m*T+_*D;s[5]=f*p+m*v+_*C;s[8]=f*h+m*R+_*A;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[3]*=e;t[6]*=e;t[1]*=e;t[4]*=e;t[7]*=e;t[2]*=e;t[5]*=e;t[8]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[1],r=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],u=e[8];return t*o*u-t*a*c-n*s*u+n*a*l+r*s*c-r*o*l}invert(){const e=this.elements,t=e[0],n=e[1],r=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],u=e[8],d=u*o-a*c,f=a*l-u*s,m=c*s-o*l,_=t*d+n*f+r*m;if(_===0)return this.set(0,0,0,0,0,0,0,0,0);const x=1/_;e[0]=d*x;e[1]=(r*c-u*n)*x;e[2]=(a*n-r*o)*x;e[3]=f*x;e[4]=(u*t-r*l)*x;e[5]=(r*s-a*t)*x;e[6]=m*x;e[7]=(n*l-c*t)*x;e[8]=(o*t-n*s)*x;return this}transpose(){let e;const t=this.elements;e=t[1];t[1]=t[3];t[3]=e;e=t[2];t[2]=t[6];t[6]=e;e=t[5];t[5]=t[7];t[7]=e;return this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;e[0]=t[0];e[1]=t[3];e[2]=t[6];e[3]=t[1];e[4]=t[4];e[5]=t[7];e[6]=t[2];e[7]=t[5];e[8]=t[8];return this}setUvTransform(e,t,n,r,s,o,a){const l=Math.cos(s);const c=Math.sin(s);this.set(n*l,n*c,-n*(l*o+c*a)+o+e,-r*c,r*l,-r*(-c*o+l*a)+a+t,0,0,1);return this}scale(e,t){this.premultiply(os.makeScale(e,t));return this}rotate(e){this.premultiply(os.makeRotation(-e));return this}translate(e,t){this.premultiply(os.makeTranslation(e,t));return this}makeTranslation(e,t){if(e.isVector2){this.set(1,0,e.x,0,1,e.y,0,0,1)}else{this.set(1,0,e,0,1,t,0,0,1)}return this}makeRotation(e){const t=Math.cos(e);const n=Math.sin(e);this.set(t,-n,0,n,t,0,0,0,1);return this}makeScale(e,t){this.set(e,0,0,0,t,0,0,0,1);return this}equals(e){const t=this.elements;const n=e.elements;for(let r=0;r<9;r++){if(t[r]!==n[r])return false}return true}fromArray(e,t=0){for(let n=0;n<9;n++){this.elements[n]=e[n+t]}return this}toArray(e=[],t=0){const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];return e}clone(){return new this.constructor().fromArray(this.elements)}}const os=new Ge;function Sl(i){for(let e=i.length-1;e>=0;--e){if(i[e]>=65535)return true}return false}function Xi(i){return document.createElementNS("http://www.w3.org/1999/xhtml",i)}function gu(){const i=Xi("canvas");i.style.display="block";return i}const eo={};function Hi(i){if(i in eo)return;eo[i]=true;console.warn(i)}const to=new Ge().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199);const no=new Ge().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735);const Qi={[xn]:{transfer:Nr,primaries:Or,toReference:i=>i,fromReference:i=>i},[pt]:{transfer:et,primaries:Or,toReference:i=>i.convertSRGBToLinear(),fromReference:i=>i.convertLinearToSRGB()},[kr]:{transfer:Nr,primaries:Fr,toReference:i=>i.applyMatrix3(no),fromReference:i=>i.applyMatrix3(to)},[Qs]:{transfer:et,primaries:Fr,toReference:i=>i.convertSRGBToLinear().applyMatrix3(no),fromReference:i=>i.applyMatrix3(to).convertLinearToSRGB()}};const _u=new Set([xn,kr]);const $e={enabled:true,_workingColorSpace:xn,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(i){if(!_u.has(i)){throw new Error(`Unsupported working color space, "${i}".`)}this._workingColorSpace=i},convert:function(i,e,t){if(this.enabled===false||e===t||!e||!t){return i}const n=Qi[e].toReference;const r=Qi[t].fromReference;return r(n(i))},fromWorkingColorSpace:function(i,e){return this.convert(i,this._workingColorSpace,e)},toWorkingColorSpace:function(i,e){return this.convert(i,e,this._workingColorSpace)},getPrimaries:function(i){return Qi[i].primaries},getTransfer:function(i){if(i===Wt)return Nr;return Qi[i].transfer}};function yi(i){return i<.04045?i*.0773993808:Math.pow(i*.9478672986+.0521327014,2.4)}function ls(i){return i<.0031308?i*12.92:1.055*Math.pow(i,.41666)-.055}let ri;class El{static getDataURL(e){if(/^data:/i.test(e.src)){return e.src}if(typeof HTMLCanvasElement==="undefined"){return e.src}let t;if(e instanceof HTMLCanvasElement){t=e}else{if(ri===void 0)ri=Xi("canvas");ri.width=e.width;ri.height=e.height;const n=ri.getContext("2d");if(e instanceof ImageData){n.putImageData(e,0,0)}else{n.drawImage(e,0,0,e.width,e.height)}t=ri}if(t.width>2048||t.height>2048){console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e);return t.toDataURL("image/jpeg",.6)}else{return t.toDataURL("image/png")}}static sRGBToLinear(e){if(typeof HTMLImageElement!=="undefined"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&e instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&e instanceof ImageBitmap){const t=Xi("canvas");t.width=e.width;t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const r=n.getImageData(0,0,e.width,e.height);const s=r.data;for(let o=0;o<s.length;o++){s[o]=yi(s[o]/255)*255}n.putImageData(r,0,0);return t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++){if(t instanceof Uint8Array||t instanceof Uint8ClampedArray){t[n]=Math.floor(yi(t[n]/255)*255)}else{t[n]=yi(t[n])}}return{data:t,width:e.width,height:e.height}}else{console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");return e}}}let vu=0;class yl{constructor(e=null){this.isSource=true;Object.defineProperty(this,"id",{value:vu++});this.uuid=vn();this.data=e;this.version=0}set needsUpdate(e){if(e===true)this.version++}toJSON(e){const t=e===void 0||typeof e==="string";if(!t&&e.images[this.uuid]!==void 0){return e.images[this.uuid]}const n={uuid:this.uuid,url:""};const r=this.data;if(r!==null){let s;if(Array.isArray(r)){s=[];for(let o=0,a=r.length;o<a;o++){if(r[o].isDataTexture){s.push(cs(r[o].image))}else{s.push(cs(r[o]))}}}else{s=cs(r)}n.url=s}if(!t){e.images[this.uuid]=n}return n}}function cs(i){if(typeof HTMLImageElement!=="undefined"&&i instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&i instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&i instanceof ImageBitmap){return El.getDataURL(i)}else{if(i.data){return{data:Array.from(i.data),width:i.width,height:i.height,type:i.data.constructor.name}}else{console.warn("THREE.Texture: Unable to serialize Texture.");return{}}}}let xu=0;class Dt extends Jn{constructor(e=Dt.DEFAULT_IMAGE,t=Dt.DEFAULT_MAPPING,n=Bt,r=Bt,s=Vt,o=Vi,a=Kt,l=Pn,c=Dt.DEFAULT_ANISOTROPY,u=Wt){super();this.isTexture=true;Object.defineProperty(this,"id",{value:xu++});this.uuid=vn();this.name="";this.source=new yl(e);this.mipmaps=[];this.mapping=t;this.channel=0;this.wrapS=n;this.wrapT=r;this.magFilter=s;this.minFilter=o;this.anisotropy=c;this.format=a;this.internalFormat=null;this.type=l;this.offset=new Pe(0,0);this.repeat=new Pe(1,1);this.center=new Pe(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Ge;this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;if(typeof u==="string"){this.colorSpace=u}else{Hi("THREE.Texture: Property .encoding has been replaced by .colorSpace.");this.colorSpace=u===jn?pt:Wt}this.userData={};this.version=0;this.onUpdate=null;this.isRenderTargetTexture=false;this.needsPMREMUpdate=false}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name;this.source=e.source;this.mipmaps=e.mipmaps.slice(0);this.mapping=e.mapping;this.channel=e.channel;this.wrapS=e.wrapS;this.wrapT=e.wrapT;this.magFilter=e.magFilter;this.minFilter=e.minFilter;this.anisotropy=e.anisotropy;this.format=e.format;this.internalFormat=e.internalFormat;this.type=e.type;this.offset.copy(e.offset);this.repeat.copy(e.repeat);this.center.copy(e.center);this.rotation=e.rotation;this.matrixAutoUpdate=e.matrixAutoUpdate;this.matrix.copy(e.matrix);this.generateMipmaps=e.generateMipmaps;this.premultiplyAlpha=e.premultiplyAlpha;this.flipY=e.flipY;this.unpackAlignment=e.unpackAlignment;this.colorSpace=e.colorSpace;this.userData=JSON.parse(JSON.stringify(e.userData));this.needsUpdate=true;return this}toJSON(e){const t=e===void 0||typeof e==="string";if(!t&&e.textures[this.uuid]!==void 0){return e.textures[this.uuid]}const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(Object.keys(this.userData).length>0)n.userData=this.userData;if(!t){e.textures[this.uuid]=n}return n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==cl)return e;e.applyMatrix3(this.matrix);if(e.x<0||e.x>1){switch(this.wrapS){case Hs:e.x=e.x-Math.floor(e.x);break;case Bt:e.x=e.x<0?0:1;break;case Gs:if(Math.abs(Math.floor(e.x)%2)===1){e.x=Math.ceil(e.x)-e.x}else{e.x=e.x-Math.floor(e.x)}break}}if(e.y<0||e.y>1){switch(this.wrapT){case Hs:e.y=e.y-Math.floor(e.y);break;case Bt:e.y=e.y<0?0:1;break;case Gs:if(Math.abs(Math.floor(e.y)%2)===1){e.y=Math.ceil(e.y)-e.y}else{e.y=e.y-Math.floor(e.y)}break}}if(this.flipY){e.y=1-e.y}return e}set needsUpdate(e){if(e===true){this.version++;this.source.needsUpdate=true}}get encoding(){Hi("THREE.Texture: Property .encoding has been replaced by .colorSpace.");return this.colorSpace===pt?jn:_l}set encoding(e){Hi("THREE.Texture: Property .encoding has been replaced by .colorSpace.");this.colorSpace=e===jn?pt:Wt}}Dt.DEFAULT_IMAGE=null;Dt.DEFAULT_MAPPING=cl;Dt.DEFAULT_ANISOTROPY=1;class it{constructor(e=0,t=0,n=0,r=1){it.prototype.isVector4=true;this.x=e;this.y=t;this.z=n;this.w=r}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,r){this.x=e;this.y=t;this.z=n;this.w=r;return this}setScalar(e){this.x=e;this.y=e;this.z=e;this.w=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setW(e){this.w=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;this.w=e.w!==void 0?e.w:1;return this}add(e){this.x+=e.x;this.y+=e.y;this.z+=e.z;this.w+=e.w;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;this.w+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;this.w=e.w+t.w;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;this.w+=e.w*t;return this}sub(e){this.x-=e.x;this.y-=e.y;this.z-=e.z;this.w-=e.w;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;this.w-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;this.w=e.w-t.w;return this}multiply(e){this.x*=e.x;this.y*=e.y;this.z*=e.z;this.w*=e.w;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;this.w*=e;return this}applyMatrix4(e){const t=this.x,n=this.y,r=this.z,s=this.w;const o=e.elements;this.x=o[0]*t+o[4]*n+o[8]*r+o[12]*s;this.y=o[1]*t+o[5]*n+o[9]*r+o[13]*s;this.z=o[2]*t+o[6]*n+o[10]*r+o[14]*s;this.w=o[3]*t+o[7]*n+o[11]*r+o[15]*s;return this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);if(t<1e-4){this.x=1;this.y=0;this.z=0}else{this.x=e.x/t;this.y=e.y/t;this.z=e.z/t}return this}setAxisAngleFromRotationMatrix(e){let t,n,r,s;const o=.01,a=.1,l=e.elements,c=l[0],u=l[4],d=l[8],f=l[1],m=l[5],_=l[9],x=l[2],p=l[6],h=l[10];if(Math.abs(u-f)<o&&Math.abs(d-x)<o&&Math.abs(_-p)<o){if(Math.abs(u+f)<a&&Math.abs(d+x)<a&&Math.abs(_+p)<a&&Math.abs(c+m+h-3)<a){this.set(1,0,0,0);return this}t=Math.PI;const v=(c+1)/2;const R=(m+1)/2;const D=(h+1)/2;const C=(u+f)/4;const A=(d+x)/4;const X=(_+p)/4;if(v>R&&v>D){if(v<o){n=0;r=.707106781;s=.707106781}else{n=Math.sqrt(v);r=C/n;s=A/n}}else if(R>D){if(R<o){n=.707106781;r=0;s=.707106781}else{r=Math.sqrt(R);n=C/r;s=X/r}}else{if(D<o){n=.707106781;r=.707106781;s=0}else{s=Math.sqrt(D);n=A/s;r=X/s}}this.set(n,r,s,t);return this}let T=Math.sqrt((p-_)*(p-_)+(d-x)*(d-x)+(f-u)*(f-u));if(Math.abs(T)<.001)T=1;this.x=(p-_)/T;this.y=(d-x)/T;this.z=(f-u)/T;this.w=Math.acos((c+m+h-1)/2);return this}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);this.w=Math.min(this.w,e.w);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);this.w=Math.max(this.w,e.w);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));this.w=Math.max(e.w,Math.min(t.w,this.w));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));this.w=Math.max(e,Math.min(t,this.w));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);this.w=Math.trunc(this.w);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;this.w+=(e.w-this.w)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;this.w=e.w+(t.w-e.w)*n;return this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];this.z=e[t+2];this.w=e[t+3];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;e[t+3]=this.w;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);this.w=e.getW(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z;yield this.w}}class Mu extends Jn{constructor(e=1,t=1,n={}){super();this.isRenderTarget=true;this.width=e;this.height=t;this.depth=1;this.scissor=new it(0,0,e,t);this.scissorTest=false;this.viewport=new it(0,0,e,t);const r={width:e,height:t,depth:1};if(n.encoding!==void 0){Hi("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.");n.colorSpace=n.encoding===jn?pt:Wt}n=Object.assign({generateMipmaps:false,internalFormat:null,minFilter:Vt,depthBuffer:true,stencilBuffer:false,depthTexture:null,samples:0},n);this.texture=new Dt(r,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);this.texture.isRenderTargetTexture=true;this.texture.flipY=false;this.texture.generateMipmaps=n.generateMipmaps;this.texture.internalFormat=n.internalFormat;this.depthBuffer=n.depthBuffer;this.stencilBuffer=n.stencilBuffer;this.depthTexture=n.depthTexture;this.samples=n.samples}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e;this.height=t;this.depth=n;this.texture.image.width=e;this.texture.image.height=t;this.texture.image.depth=n;this.dispose()}this.viewport.set(0,0,e,t);this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width;this.height=e.height;this.depth=e.depth;this.scissor.copy(e.scissor);this.scissorTest=e.scissorTest;this.viewport.copy(e.viewport);this.texture=e.texture.clone();this.texture.isRenderTargetTexture=true;const t=Object.assign({},e.texture.image);this.texture.source=new yl(t);this.depthBuffer=e.depthBuffer;this.stencilBuffer=e.stencilBuffer;if(e.depthTexture!==null)this.depthTexture=e.depthTexture.clone();this.samples=e.samples;return this}dispose(){this.dispatchEvent({type:"dispose"})}}class Zn extends Mu{constructor(e=1,t=1,n={}){super(e,t,n);this.isWebGLRenderTarget=true}}class Tl extends Dt{constructor(e=null,t=1,n=1,r=1){super(null);this.isDataArrayTexture=true;this.image={data:e,width:t,height:n,depth:r};this.magFilter=Ct;this.minFilter=Ct;this.wrapR=Bt;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}class Su extends Dt{constructor(e=null,t=1,n=1,r=1){super(null);this.isData3DTexture=true;this.image={data:e,width:t,height:n,depth:r};this.magFilter=Ct;this.minFilter=Ct;this.wrapR=Bt;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}class $n{constructor(e=0,t=0,n=0,r=1){this.isQuaternion=true;this._x=e;this._y=t;this._z=n;this._w=r}static slerpFlat(e,t,n,r,s,o,a){let l=n[r+0],c=n[r+1],u=n[r+2],d=n[r+3];const f=s[o+0],m=s[o+1],_=s[o+2],x=s[o+3];if(a===0){e[t+0]=l;e[t+1]=c;e[t+2]=u;e[t+3]=d;return}if(a===1){e[t+0]=f;e[t+1]=m;e[t+2]=_;e[t+3]=x;return}if(d!==x||l!==f||c!==m||u!==_){let p=1-a;const h=l*f+c*m+u*_+d*x,T=h>=0?1:-1,v=1-h*h;if(v>Number.EPSILON){const D=Math.sqrt(v),C=Math.atan2(D,h*T);p=Math.sin(p*C)/D;a=Math.sin(a*C)/D}const R=a*T;l=l*p+f*R;c=c*p+m*R;u=u*p+_*R;d=d*p+x*R;if(p===1-a){const D=1/Math.sqrt(l*l+c*c+u*u+d*d);l*=D;c*=D;u*=D;d*=D}}e[t]=l;e[t+1]=c;e[t+2]=u;e[t+3]=d}static multiplyQuaternionsFlat(e,t,n,r,s,o){const a=n[r];const l=n[r+1];const c=n[r+2];const u=n[r+3];const d=s[o];const f=s[o+1];const m=s[o+2];const _=s[o+3];e[t]=a*_+u*d+l*m-c*f;e[t+1]=l*_+u*f+c*d-a*m;e[t+2]=c*_+u*m+a*f-l*d;e[t+3]=u*_-a*d-l*f-c*m;return e}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e;this._onChangeCallback()}set(e,t,n,r){this._x=e;this._y=t;this._z=n;this._w=r;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){this._x=e.x;this._y=e.y;this._z=e.z;this._w=e.w;this._onChangeCallback();return this}setFromEuler(e,t=true){const n=e._x,r=e._y,s=e._z,o=e._order;const a=Math.cos;const l=Math.sin;const c=a(n/2);const u=a(r/2);const d=a(s/2);const f=l(n/2);const m=l(r/2);const _=l(s/2);switch(o){case"XYZ":this._x=f*u*d+c*m*_;this._y=c*m*d-f*u*_;this._z=c*u*_+f*m*d;this._w=c*u*d-f*m*_;break;case"YXZ":this._x=f*u*d+c*m*_;this._y=c*m*d-f*u*_;this._z=c*u*_-f*m*d;this._w=c*u*d+f*m*_;break;case"ZXY":this._x=f*u*d-c*m*_;this._y=c*m*d+f*u*_;this._z=c*u*_+f*m*d;this._w=c*u*d-f*m*_;break;case"ZYX":this._x=f*u*d-c*m*_;this._y=c*m*d+f*u*_;this._z=c*u*_-f*m*d;this._w=c*u*d+f*m*_;break;case"YZX":this._x=f*u*d+c*m*_;this._y=c*m*d+f*u*_;this._z=c*u*_-f*m*d;this._w=c*u*d-f*m*_;break;case"XZY":this._x=f*u*d-c*m*_;this._y=c*m*d-f*u*_;this._z=c*u*_+f*m*d;this._w=c*u*d+f*m*_;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}if(t===true)this._onChangeCallback();return this}setFromAxisAngle(e,t){const n=t/2,r=Math.sin(n);this._x=e.x*r;this._y=e.y*r;this._z=e.z*r;this._w=Math.cos(n);this._onChangeCallback();return this}setFromRotationMatrix(e){const t=e.elements,n=t[0],r=t[4],s=t[8],o=t[1],a=t[5],l=t[9],c=t[2],u=t[6],d=t[10],f=n+a+d;if(f>0){const m=.5/Math.sqrt(f+1);this._w=.25/m;this._x=(u-l)*m;this._y=(s-c)*m;this._z=(o-r)*m}else if(n>a&&n>d){const m=2*Math.sqrt(1+n-a-d);this._w=(u-l)/m;this._x=.25*m;this._y=(r+o)/m;this._z=(s+c)/m}else if(a>d){const m=2*Math.sqrt(1+a-n-d);this._w=(s-c)/m;this._x=(r+o)/m;this._y=.25*m;this._z=(l+u)/m}else{const m=2*Math.sqrt(1+d-n-a);this._w=(o-r)/m;this._x=(s+c)/m;this._y=(l+u)/m;this._z=.25*m}this._onChangeCallback();return this}setFromUnitVectors(e,t){let n=e.dot(t)+1;if(n<Number.EPSILON){n=0;if(Math.abs(e.x)>Math.abs(e.z)){this._x=-e.y;this._y=e.x;this._z=0;this._w=n}else{this._x=0;this._y=-e.z;this._z=e.y;this._w=n}}else{this._x=e.y*t.z-e.z*t.y;this._y=e.z*t.x-e.x*t.z;this._z=e.x*t.y-e.y*t.x;this._w=n}return this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(xt(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const r=Math.min(1,t/n);this.slerp(e,r);return this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();if(e===0){this._x=0;this._y=0;this._z=0;this._w=1}else{e=1/e;this._x=this._x*e;this._y=this._y*e;this._z=this._z*e;this._w=this._w*e}this._onChangeCallback();return this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,r=e._y,s=e._z,o=e._w;const a=t._x,l=t._y,c=t._z,u=t._w;this._x=n*u+o*a+r*c-s*l;this._y=r*u+o*l+s*a-n*c;this._z=s*u+o*c+n*l-r*a;this._w=o*u-n*a-r*l-s*c;this._onChangeCallback();return this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,r=this._y,s=this._z,o=this._w;let a=o*e._w+n*e._x+r*e._y+s*e._z;if(a<0){this._w=-e._w;this._x=-e._x;this._y=-e._y;this._z=-e._z;a=-a}else{this.copy(e)}if(a>=1){this._w=o;this._x=n;this._y=r;this._z=s;return this}const l=1-a*a;if(l<=Number.EPSILON){const m=1-t;this._w=m*o+t*this._w;this._x=m*n+t*this._x;this._y=m*r+t*this._y;this._z=m*s+t*this._z;this.normalize();return this}const c=Math.sqrt(l);const u=Math.atan2(c,a);const d=Math.sin((1-t)*u)/c,f=Math.sin(t*u)/c;this._w=o*d+this._w*f;this._x=n*d+this._x*f;this._y=r*d+this._y*f;this._z=s*d+this._z*f;this._onChangeCallback();return this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=Math.random();const t=Math.sqrt(1-e);const n=Math.sqrt(e);const r=2*Math.PI*Math.random();const s=2*Math.PI*Math.random();return this.set(t*Math.cos(r),n*Math.sin(s),n*Math.cos(s),t*Math.sin(r))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){this._x=e[t];this._y=e[t+1];this._z=e[t+2];this._w=e[t+3];this._onChangeCallback();return this}toArray(e=[],t=0){e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._w;return e}fromBufferAttribute(e,t){this._x=e.getX(t);this._y=e.getY(t);this._z=e.getZ(t);this._w=e.getW(t);this._onChangeCallback();return this}toJSON(){return this.toArray()}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._w}}class L{constructor(e=0,t=0,n=0){L.prototype.isVector3=true;this.x=e;this.y=t;this.z=n}set(e,t,n){if(n===void 0)n=this.z;this.x=e;this.y=t;this.z=n;return this}setScalar(e){this.x=e;this.y=e;this.z=e;return this}setX(e){this.x=e;return this}setY(e){this.y=e;return this}setZ(e){this.z=e;return this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){this.x=e.x;this.y=e.y;this.z=e.z;return this}add(e){this.x+=e.x;this.y+=e.y;this.z+=e.z;return this}addScalar(e){this.x+=e;this.y+=e;this.z+=e;return this}addVectors(e,t){this.x=e.x+t.x;this.y=e.y+t.y;this.z=e.z+t.z;return this}addScaledVector(e,t){this.x+=e.x*t;this.y+=e.y*t;this.z+=e.z*t;return this}sub(e){this.x-=e.x;this.y-=e.y;this.z-=e.z;return this}subScalar(e){this.x-=e;this.y-=e;this.z-=e;return this}subVectors(e,t){this.x=e.x-t.x;this.y=e.y-t.y;this.z=e.z-t.z;return this}multiply(e){this.x*=e.x;this.y*=e.y;this.z*=e.z;return this}multiplyScalar(e){this.x*=e;this.y*=e;this.z*=e;return this}multiplyVectors(e,t){this.x=e.x*t.x;this.y=e.y*t.y;this.z=e.z*t.z;return this}applyEuler(e){return this.applyQuaternion(io.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(io.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,r=this.z;const s=e.elements;this.x=s[0]*t+s[3]*n+s[6]*r;this.y=s[1]*t+s[4]*n+s[7]*r;this.z=s[2]*t+s[5]*n+s[8]*r;return this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,r=this.z;const s=e.elements;const o=1/(s[3]*t+s[7]*n+s[11]*r+s[15]);this.x=(s[0]*t+s[4]*n+s[8]*r+s[12])*o;this.y=(s[1]*t+s[5]*n+s[9]*r+s[13])*o;this.z=(s[2]*t+s[6]*n+s[10]*r+s[14])*o;return this}applyQuaternion(e){const t=this.x,n=this.y,r=this.z;const s=e.x,o=e.y,a=e.z,l=e.w;const c=2*(o*r-a*n);const u=2*(a*t-s*r);const d=2*(s*n-o*t);this.x=t+l*c+o*d-a*u;this.y=n+l*u+a*c-s*d;this.z=r+l*d+s*u-o*c;return this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,r=this.z;const s=e.elements;this.x=s[0]*t+s[4]*n+s[8]*r;this.y=s[1]*t+s[5]*n+s[9]*r;this.z=s[2]*t+s[6]*n+s[10]*r;return this.normalize()}divide(e){this.x/=e.x;this.y/=e.y;this.z/=e.z;return this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){this.x=Math.min(this.x,e.x);this.y=Math.min(this.y,e.y);this.z=Math.min(this.z,e.z);return this}max(e){this.x=Math.max(this.x,e.x);this.y=Math.max(this.y,e.y);this.z=Math.max(this.z,e.z);return this}clamp(e,t){this.x=Math.max(e.x,Math.min(t.x,this.x));this.y=Math.max(e.y,Math.min(t.y,this.y));this.z=Math.max(e.z,Math.min(t.z,this.z));return this}clampScalar(e,t){this.x=Math.max(e,Math.min(t,this.x));this.y=Math.max(e,Math.min(t,this.y));this.z=Math.max(e,Math.min(t,this.z));return this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(e,Math.min(t,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){this.x+=(e.x-this.x)*t;this.y+=(e.y-this.y)*t;this.z+=(e.z-this.z)*t;return this}lerpVectors(e,t,n){this.x=e.x+(t.x-e.x)*n;this.y=e.y+(t.y-e.y)*n;this.z=e.z+(t.z-e.z)*n;return this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,r=e.y,s=e.z;const o=t.x,a=t.y,l=t.z;this.x=r*l-s*a;this.y=s*o-n*l;this.z=n*a-r*o;return this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){us.copy(this).projectOnVector(e);return this.sub(us)}reflect(e){return this.sub(us.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(xt(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,r=this.z-e.z;return t*t+n*n+r*r}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const r=Math.sin(t)*e;this.x=r*Math.sin(n);this.y=Math.cos(t)*e;this.z=r*Math.cos(n);return this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){this.x=e*Math.sin(t);this.y=n;this.z=e*Math.cos(t);return this}setFromMatrixPosition(e){const t=e.elements;this.x=t[12];this.y=t[13];this.z=t[14];return this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length();const n=this.setFromMatrixColumn(e,1).length();const r=this.setFromMatrixColumn(e,2).length();this.x=t;this.y=n;this.z=r;return this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){this.x=e._x;this.y=e._y;this.z=e._z;return this}setFromColor(e){this.x=e.r;this.y=e.g;this.z=e.b;return this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){this.x=e[t];this.y=e[t+1];this.z=e[t+2];return this}toArray(e=[],t=0){e[t]=this.x;e[t+1]=this.y;e[t+2]=this.z;return e}fromBufferAttribute(e,t){this.x=e.getX(t);this.y=e.getY(t);this.z=e.getZ(t);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this}randomDirection(){const e=(Math.random()-.5)*2;const t=Math.random()*Math.PI*2;const n=Math.sqrt(1-e**2);this.x=n*Math.cos(t);this.y=n*Math.sin(t);this.z=e;return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z}}const us=new L;const io=new $n;class Nn{constructor(e=new L(Infinity,Infinity,Infinity),t=new L(-Infinity,-Infinity,-Infinity)){this.isBox3=true;this.min=e;this.max=t}set(e,t){this.min.copy(e);this.max.copy(t);return this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3){this.expandByPoint(Xt.fromArray(e,t))}return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++){this.expandByPoint(Xt.fromBufferAttribute(e,t))}return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++){this.expandByPoint(e[t])}return this}setFromCenterAndSize(e,t){const n=Xt.copy(t).multiplyScalar(.5);this.min.copy(e).sub(n);this.max.copy(e).add(n);return this}setFromObject(e,t=false){this.makeEmpty();return this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.min.copy(e.min);this.max.copy(e.max);return this}makeEmpty(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){this.min.min(e);this.max.max(e);return this}expandByVector(e){this.min.sub(e);this.max.add(e);return this}expandByScalar(e){this.min.addScalar(-e);this.max.addScalar(e);return this}expandByObject(e,t=false){e.updateWorldMatrix(false,false);const n=e.geometry;if(n!==void 0){const s=n.getAttribute("position");if(t===true&&s!==void 0&&e.isInstancedMesh!==true){for(let o=0,a=s.count;o<a;o++){if(e.isMesh===true){e.getVertexPosition(o,Xt)}else{Xt.fromBufferAttribute(s,o)}Xt.applyMatrix4(e.matrixWorld);this.expandByPoint(Xt)}}else{if(e.boundingBox!==void 0){if(e.boundingBox===null){e.computeBoundingBox()}er.copy(e.boundingBox)}else{if(n.boundingBox===null){n.computeBoundingBox()}er.copy(n.boundingBox)}er.applyMatrix4(e.matrixWorld);this.union(er)}}const r=e.children;for(let s=0,o=r.length;s<o;s++){this.expandByObject(r[s],t)}return this}containsPoint(e){return e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z?false:true}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z?false:true}intersectsSphere(e){this.clampPoint(e.center,Xt);return Xt.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;if(e.normal.x>0){t=e.normal.x*this.min.x;n=e.normal.x*this.max.x}else{t=e.normal.x*this.max.x;n=e.normal.x*this.min.x}if(e.normal.y>0){t+=e.normal.y*this.min.y;n+=e.normal.y*this.max.y}else{t+=e.normal.y*this.max.y;n+=e.normal.y*this.min.y}if(e.normal.z>0){t+=e.normal.z*this.min.z;n+=e.normal.z*this.max.z}else{t+=e.normal.z*this.max.z;n+=e.normal.z*this.min.z}return t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty()){return false}this.getCenter(Ii);tr.subVectors(this.max,Ii);si.subVectors(e.a,Ii);ai.subVectors(e.b,Ii);oi.subVectors(e.c,Ii);Mn.subVectors(ai,si);Sn.subVectors(oi,ai);Bn.subVectors(si,oi);let t=[0,-Mn.z,Mn.y,0,-Sn.z,Sn.y,0,-Bn.z,Bn.y,Mn.z,0,-Mn.x,Sn.z,0,-Sn.x,Bn.z,0,-Bn.x,-Mn.y,Mn.x,0,-Sn.y,Sn.x,0,-Bn.y,Bn.x,0];if(!hs(t,si,ai,oi,tr)){return false}t=[1,0,0,0,1,0,0,0,1];if(!hs(t,si,ai,oi,tr)){return false}nr.crossVectors(Mn,Sn);t=[nr.x,nr.y,nr.z];return hs(t,si,ai,oi,tr)}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Xt).distanceTo(e)}getBoundingSphere(e){if(this.isEmpty()){e.makeEmpty()}else{this.getCenter(e.center);e.radius=this.getSize(Xt).length()*.5}return e}intersect(e){this.min.max(e.min);this.max.min(e.max);if(this.isEmpty())this.makeEmpty();return this}union(e){this.min.min(e.min);this.max.max(e.max);return this}applyMatrix4(e){if(this.isEmpty())return this;un[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e);un[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e);un[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e);un[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e);un[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e);un[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e);un[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e);un[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e);this.setFromPoints(un);return this}translate(e){this.min.add(e);this.max.add(e);return this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const un=[new L,new L,new L,new L,new L,new L,new L,new L];const Xt=new L;const er=new Nn;const si=new L;const ai=new L;const oi=new L;const Mn=new L;const Sn=new L;const Bn=new L;const Ii=new L;const tr=new L;const nr=new L;const zn=new L;function hs(i,e,t,n,r){for(let s=0,o=i.length-3;s<=o;s+=3){zn.fromArray(i,s);const a=r.x*Math.abs(zn.x)+r.y*Math.abs(zn.y)+r.z*Math.abs(zn.z);const l=e.dot(zn);const c=t.dot(zn);const u=n.dot(zn);if(Math.max(-Math.max(l,c,u),Math.min(l,c,u))>a){return false}}return true}const Eu=new Nn;const Ni=new L;const ds=new L;class Ri{constructor(e=new L,t=-1){this.isSphere=true;this.center=e;this.radius=t}set(e,t){this.center.copy(e);this.radius=t;return this}setFromPoints(e,t){const n=this.center;if(t!==void 0){n.copy(t)}else{Eu.setFromPoints(e).getCenter(n)}let r=0;for(let s=0,o=e.length;s<o;s++){r=Math.max(r,n.distanceToSquared(e[s]))}this.radius=Math.sqrt(r);return this}copy(e){this.center.copy(e.center);this.radius=e.radius;return this}isEmpty(){return this.radius<0}makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);t.copy(e);if(n>this.radius*this.radius){t.sub(this.center).normalize();t.multiplyScalar(this.radius).add(this.center)}return t}getBoundingBox(e){if(this.isEmpty()){e.makeEmpty();return e}e.set(this.center,this.center);e.expandByScalar(this.radius);return e}applyMatrix4(e){this.center.applyMatrix4(e);this.radius=this.radius*e.getMaxScaleOnAxis();return this}translate(e){this.center.add(e);return this}expandByPoint(e){if(this.isEmpty()){this.center.copy(e);this.radius=0;return this}Ni.subVectors(e,this.center);const t=Ni.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t);const r=(n-this.radius)*.5;this.center.addScaledVector(Ni,r/n);this.radius+=r}return this}union(e){if(e.isEmpty()){return this}if(this.isEmpty()){this.copy(e);return this}if(this.center.equals(e.center)===true){this.radius=Math.max(this.radius,e.radius)}else{ds.subVectors(e.center,this.center).setLength(e.radius);this.expandByPoint(Ni.copy(e.center).add(ds));this.expandByPoint(Ni.copy(e.center).sub(ds))}return this}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const hn=new L;const fs=new L;const ir=new L;const En=new L;const ps=new L;const rr=new L;const ms=new L;class ta{constructor(e=new L,t=new L(0,0,-1)){this.origin=e;this.direction=t}set(e,t){this.origin.copy(e);this.direction.copy(t);return this}copy(e){this.origin.copy(e.origin);this.direction.copy(e.direction);return this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){this.direction.copy(e).sub(this.origin).normalize();return this}recast(e){this.origin.copy(this.at(e,hn));return this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);if(n<0){return t.copy(this.origin)}return t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=hn.subVectors(e,this.origin).dot(this.direction);if(t<0){return this.origin.distanceToSquared(e)}hn.copy(this.origin).addScaledVector(this.direction,t);return hn.distanceToSquared(e)}distanceSqToSegment(e,t,n,r){fs.copy(e).add(t).multiplyScalar(.5);ir.copy(t).sub(e).normalize();En.copy(this.origin).sub(fs);const s=e.distanceTo(t)*.5;const o=-this.direction.dot(ir);const a=En.dot(this.direction);const l=-En.dot(ir);const c=En.lengthSq();const u=Math.abs(1-o*o);let d,f,m,_;if(u>0){d=o*l-a;f=o*a-l;_=s*u;if(d>=0){if(f>=-_){if(f<=_){const x=1/u;d*=x;f*=x;m=d*(d+o*f+2*a)+f*(o*d+f+2*l)+c}else{f=s;d=Math.max(0,-(o*f+a));m=-d*d+f*(f+2*l)+c}}else{f=-s;d=Math.max(0,-(o*f+a));m=-d*d+f*(f+2*l)+c}}else{if(f<=-_){d=Math.max(0,-(-o*s+a));f=d>0?-s:Math.min(Math.max(-s,-l),s);m=-d*d+f*(f+2*l)+c}else if(f<=_){d=0;f=Math.min(Math.max(-s,-l),s);m=f*(f+2*l)+c}else{d=Math.max(0,-(o*s+a));f=d>0?s:Math.min(Math.max(-s,-l),s);m=-d*d+f*(f+2*l)+c}}}else{f=o>0?-s:s;d=Math.max(0,-(o*f+a));m=-d*d+f*(f+2*l)+c}if(n){n.copy(this.origin).addScaledVector(this.direction,d)}if(r){r.copy(fs).addScaledVector(ir,f)}return m}intersectSphere(e,t){hn.subVectors(e.center,this.origin);const n=hn.dot(this.direction);const r=hn.dot(hn)-n*n;const s=e.radius*e.radius;if(r>s)return null;const o=Math.sqrt(s-r);const a=n-o;const l=n+o;if(l<0)return null;if(a<0)return this.at(l,t);return this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0){if(e.distanceToPoint(this.origin)===0){return 0}return null}const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);if(n===null){return null}return this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);if(t===0){return true}const n=e.normal.dot(this.direction);if(n*t<0){return true}return false}intersectBox(e,t){let n,r,s,o,a,l;const c=1/this.direction.x,u=1/this.direction.y,d=1/this.direction.z;const f=this.origin;if(c>=0){n=(e.min.x-f.x)*c;r=(e.max.x-f.x)*c}else{n=(e.max.x-f.x)*c;r=(e.min.x-f.x)*c}if(u>=0){s=(e.min.y-f.y)*u;o=(e.max.y-f.y)*u}else{s=(e.max.y-f.y)*u;o=(e.min.y-f.y)*u}if(n>o||s>r)return null;if(s>n||isNaN(n))n=s;if(o<r||isNaN(r))r=o;if(d>=0){a=(e.min.z-f.z)*d;l=(e.max.z-f.z)*d}else{a=(e.max.z-f.z)*d;l=(e.min.z-f.z)*d}if(n>l||a>r)return null;if(a>n||n!==n)n=a;if(l<r||r!==r)r=l;if(r<0)return null;return this.at(n>=0?n:r,t)}intersectsBox(e){return this.intersectBox(e,hn)!==null}intersectTriangle(e,t,n,r,s){ps.subVectors(t,e);rr.subVectors(n,e);ms.crossVectors(ps,rr);let o=this.direction.dot(ms);let a;if(o>0){if(r)return null;a=1}else if(o<0){a=-1;o=-o}else{return null}En.subVectors(this.origin,e);const l=a*this.direction.dot(rr.crossVectors(En,rr));if(l<0){return null}const c=a*this.direction.dot(ps.cross(En));if(c<0){return null}if(l+c>o){return null}const u=-a*En.dot(ms);if(u<0){return null}return this.at(u/o,s)}applyMatrix4(e){this.origin.applyMatrix4(e);this.direction.transformDirection(e);return this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class st{constructor(e,t,n,r,s,o,a,l,c,u,d,f,m,_,x,p){st.prototype.isMatrix4=true;this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(e!==void 0){this.set(e,t,n,r,s,o,a,l,c,u,d,f,m,_,x,p)}}set(e,t,n,r,s,o,a,l,c,u,d,f,m,_,x,p){const h=this.elements;h[0]=e;h[4]=t;h[8]=n;h[12]=r;h[1]=s;h[5]=o;h[9]=a;h[13]=l;h[2]=c;h[6]=u;h[10]=d;h[14]=f;h[3]=m;h[7]=_;h[11]=x;h[15]=p;return this}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this}clone(){return new st().fromArray(this.elements)}copy(e){const t=this.elements;const n=e.elements;t[0]=n[0];t[1]=n[1];t[2]=n[2];t[3]=n[3];t[4]=n[4];t[5]=n[5];t[6]=n[6];t[7]=n[7];t[8]=n[8];t[9]=n[9];t[10]=n[10];t[11]=n[11];t[12]=n[12];t[13]=n[13];t[14]=n[14];t[15]=n[15];return this}copyPosition(e){const t=this.elements,n=e.elements;t[12]=n[12];t[13]=n[13];t[14]=n[14];return this}setFromMatrix3(e){const t=e.elements;this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1);return this}extractBasis(e,t,n){e.setFromMatrixColumn(this,0);t.setFromMatrixColumn(this,1);n.setFromMatrixColumn(this,2);return this}makeBasis(e,t,n){this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1);return this}extractRotation(e){const t=this.elements;const n=e.elements;const r=1/li.setFromMatrixColumn(e,0).length();const s=1/li.setFromMatrixColumn(e,1).length();const o=1/li.setFromMatrixColumn(e,2).length();t[0]=n[0]*r;t[1]=n[1]*r;t[2]=n[2]*r;t[3]=0;t[4]=n[4]*s;t[5]=n[5]*s;t[6]=n[6]*s;t[7]=0;t[8]=n[8]*o;t[9]=n[9]*o;t[10]=n[10]*o;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromEuler(e){const t=this.elements;const n=e.x,r=e.y,s=e.z;const o=Math.cos(n),a=Math.sin(n);const l=Math.cos(r),c=Math.sin(r);const u=Math.cos(s),d=Math.sin(s);if(e.order==="XYZ"){const f=o*u,m=o*d,_=a*u,x=a*d;t[0]=l*u;t[4]=-l*d;t[8]=c;t[1]=m+_*c;t[5]=f-x*c;t[9]=-a*l;t[2]=x-f*c;t[6]=_+m*c;t[10]=o*l}else if(e.order==="YXZ"){const f=l*u,m=l*d,_=c*u,x=c*d;t[0]=f+x*a;t[4]=_*a-m;t[8]=o*c;t[1]=o*d;t[5]=o*u;t[9]=-a;t[2]=m*a-_;t[6]=x+f*a;t[10]=o*l}else if(e.order==="ZXY"){const f=l*u,m=l*d,_=c*u,x=c*d;t[0]=f-x*a;t[4]=-o*d;t[8]=_+m*a;t[1]=m+_*a;t[5]=o*u;t[9]=x-f*a;t[2]=-o*c;t[6]=a;t[10]=o*l}else if(e.order==="ZYX"){const f=o*u,m=o*d,_=a*u,x=a*d;t[0]=l*u;t[4]=_*c-m;t[8]=f*c+x;t[1]=l*d;t[5]=x*c+f;t[9]=m*c-_;t[2]=-c;t[6]=a*l;t[10]=o*l}else if(e.order==="YZX"){const f=o*l,m=o*c,_=a*l,x=a*c;t[0]=l*u;t[4]=x-f*d;t[8]=_*d+m;t[1]=d;t[5]=o*u;t[9]=-a*u;t[2]=-c*u;t[6]=m*d+_;t[10]=f-x*d}else if(e.order==="XZY"){const f=o*l,m=o*c,_=a*l,x=a*c;t[0]=l*u;t[4]=-d;t[8]=c*u;t[1]=f*d+x;t[5]=o*u;t[9]=m*d-_;t[2]=_*d-m;t[6]=a*u;t[10]=x*d+f}t[3]=0;t[7]=0;t[11]=0;t[12]=0;t[13]=0;t[14]=0;t[15]=1;return this}makeRotationFromQuaternion(e){return this.compose(yu,e,Tu)}lookAt(e,t,n){const r=this.elements;It.subVectors(e,t);if(It.lengthSq()===0){It.z=1}It.normalize();yn.crossVectors(n,It);if(yn.lengthSq()===0){if(Math.abs(n.z)===1){It.x+=1e-4}else{It.z+=1e-4}It.normalize();yn.crossVectors(n,It)}yn.normalize();sr.crossVectors(It,yn);r[0]=yn.x;r[4]=sr.x;r[8]=It.x;r[1]=yn.y;r[5]=sr.y;r[9]=It.y;r[2]=yn.z;r[6]=sr.z;r[10]=It.z;return this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements;const r=t.elements;const s=this.elements;const o=n[0],a=n[4],l=n[8],c=n[12];const u=n[1],d=n[5],f=n[9],m=n[13];const _=n[2],x=n[6],p=n[10],h=n[14];const T=n[3],v=n[7],R=n[11],D=n[15];const C=r[0],A=r[4],X=r[8],E=r[12];const y=r[1],H=r[5],j=r[9],ce=r[13];const P=r[2],F=r[6],V=r[10],Y=r[14];const W=r[3],k=r[7],Q=r[11],ne=r[15];s[0]=o*C+a*y+l*P+c*W;s[4]=o*A+a*H+l*F+c*k;s[8]=o*X+a*j+l*V+c*Q;s[12]=o*E+a*ce+l*Y+c*ne;s[1]=u*C+d*y+f*P+m*W;s[5]=u*A+d*H+f*F+m*k;s[9]=u*X+d*j+f*V+m*Q;s[13]=u*E+d*ce+f*Y+m*ne;s[2]=_*C+x*y+p*P+h*W;s[6]=_*A+x*H+p*F+h*k;s[10]=_*X+x*j+p*V+h*Q;s[14]=_*E+x*ce+p*Y+h*ne;s[3]=T*C+v*y+R*P+D*W;s[7]=T*A+v*H+R*F+D*k;s[11]=T*X+v*j+R*V+D*Q;s[15]=T*E+v*ce+R*Y+D*ne;return this}multiplyScalar(e){const t=this.elements;t[0]*=e;t[4]*=e;t[8]*=e;t[12]*=e;t[1]*=e;t[5]*=e;t[9]*=e;t[13]*=e;t[2]*=e;t[6]*=e;t[10]*=e;t[14]*=e;t[3]*=e;t[7]*=e;t[11]*=e;t[15]*=e;return this}determinant(){const e=this.elements;const t=e[0],n=e[4],r=e[8],s=e[12];const o=e[1],a=e[5],l=e[9],c=e[13];const u=e[2],d=e[6],f=e[10],m=e[14];const _=e[3],x=e[7],p=e[11],h=e[15];return _*(+s*l*d-r*c*d-s*a*f+n*c*f+r*a*m-n*l*m)+x*(+t*l*m-t*c*f+s*o*f-r*o*m+r*c*u-s*l*u)+p*(+t*c*d-t*a*m-s*o*d+n*o*m+s*a*u-n*c*u)+h*(-r*a*u-t*l*d+t*a*f+r*o*d-n*o*f+n*l*u)}transpose(){const e=this.elements;let t;t=e[1];e[1]=e[4];e[4]=t;t=e[2];e[2]=e[8];e[8]=t;t=e[6];e[6]=e[9];e[9]=t;t=e[3];e[3]=e[12];e[12]=t;t=e[7];e[7]=e[13];e[13]=t;t=e[11];e[11]=e[14];e[14]=t;return this}setPosition(e,t,n){const r=this.elements;if(e.isVector3){r[12]=e.x;r[13]=e.y;r[14]=e.z}else{r[12]=e;r[13]=t;r[14]=n}return this}invert(){const e=this.elements,t=e[0],n=e[1],r=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],u=e[8],d=e[9],f=e[10],m=e[11],_=e[12],x=e[13],p=e[14],h=e[15],T=d*p*c-x*f*c+x*l*m-a*p*m-d*l*h+a*f*h,v=_*f*c-u*p*c-_*l*m+o*p*m+u*l*h-o*f*h,R=u*x*c-_*d*c+_*a*m-o*x*m-u*a*h+o*d*h,D=_*d*l-u*x*l-_*a*f+o*x*f+u*a*p-o*d*p;const C=t*T+n*v+r*R+s*D;if(C===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const A=1/C;e[0]=T*A;e[1]=(x*f*s-d*p*s-x*r*m+n*p*m+d*r*h-n*f*h)*A;e[2]=(a*p*s-x*l*s+x*r*c-n*p*c-a*r*h+n*l*h)*A;e[3]=(d*l*s-a*f*s-d*r*c+n*f*c+a*r*m-n*l*m)*A;e[4]=v*A;e[5]=(u*p*s-_*f*s+_*r*m-t*p*m-u*r*h+t*f*h)*A;e[6]=(_*l*s-o*p*s-_*r*c+t*p*c+o*r*h-t*l*h)*A;e[7]=(o*f*s-u*l*s+u*r*c-t*f*c-o*r*m+t*l*m)*A;e[8]=R*A;e[9]=(_*d*s-u*x*s-_*n*m+t*x*m+u*n*h-t*d*h)*A;e[10]=(o*x*s-_*a*s+_*n*c-t*x*c-o*n*h+t*a*h)*A;e[11]=(u*a*s-o*d*s-u*n*c+t*d*c+o*n*m-t*a*m)*A;e[12]=D*A;e[13]=(u*x*r-_*d*r+_*n*f-t*x*f-u*n*p+t*d*p)*A;e[14]=(_*a*r-o*x*r-_*n*l+t*x*l+o*n*p-t*a*p)*A;e[15]=(o*d*r-u*a*r+u*n*l-t*d*l-o*n*f+t*a*f)*A;return this}scale(e){const t=this.elements;const n=e.x,r=e.y,s=e.z;t[0]*=n;t[4]*=r;t[8]*=s;t[1]*=n;t[5]*=r;t[9]*=s;t[2]*=n;t[6]*=r;t[10]*=s;t[3]*=n;t[7]*=r;t[11]*=s;return this}getMaxScaleOnAxis(){const e=this.elements;const t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2];const n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6];const r=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,r))}makeTranslation(e,t,n){if(e.isVector3){this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1)}else{this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1)}return this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1);return this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1);return this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1);return this}makeRotationAxis(e,t){const n=Math.cos(t);const r=Math.sin(t);const s=1-n;const o=e.x,a=e.y,l=e.z;const c=s*o,u=s*a;this.set(c*o+n,c*a-r*l,c*l+r*a,0,c*a+r*l,u*a+n,u*l-r*o,0,c*l-r*a,u*l+r*o,s*l*l+n,0,0,0,0,1);return this}makeScale(e,t,n){this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1);return this}makeShear(e,t,n,r,s,o){this.set(1,n,s,0,e,1,o,0,t,r,1,0,0,0,0,1);return this}compose(e,t,n){const r=this.elements;const s=t._x,o=t._y,a=t._z,l=t._w;const c=s+s,u=o+o,d=a+a;const f=s*c,m=s*u,_=s*d;const x=o*u,p=o*d,h=a*d;const T=l*c,v=l*u,R=l*d;const D=n.x,C=n.y,A=n.z;r[0]=(1-(x+h))*D;r[1]=(m+R)*D;r[2]=(_-v)*D;r[3]=0;r[4]=(m-R)*C;r[5]=(1-(f+h))*C;r[6]=(p+T)*C;r[7]=0;r[8]=(_+v)*A;r[9]=(p-T)*A;r[10]=(1-(f+x))*A;r[11]=0;r[12]=e.x;r[13]=e.y;r[14]=e.z;r[15]=1;return this}decompose(e,t,n){const r=this.elements;let s=li.set(r[0],r[1],r[2]).length();const o=li.set(r[4],r[5],r[6]).length();const a=li.set(r[8],r[9],r[10]).length();const l=this.determinant();if(l<0)s=-s;e.x=r[12];e.y=r[13];e.z=r[14];Yt.copy(this);const c=1/s;const u=1/o;const d=1/a;Yt.elements[0]*=c;Yt.elements[1]*=c;Yt.elements[2]*=c;Yt.elements[4]*=u;Yt.elements[5]*=u;Yt.elements[6]*=u;Yt.elements[8]*=d;Yt.elements[9]*=d;Yt.elements[10]*=d;t.setFromRotationMatrix(Yt);n.x=s;n.y=o;n.z=a;return this}makePerspective(e,t,n,r,s,o,a=_n){const l=this.elements;const c=2*s/(t-e);const u=2*s/(n-r);const d=(t+e)/(t-e);const f=(n+r)/(n-r);let m,_;if(a===_n){m=-(o+s)/(o-s);_=-2*o*s/(o-s)}else if(a===Br){m=-o/(o-s);_=-o*s/(o-s)}else{throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a)}l[0]=c;l[4]=0;l[8]=d;l[12]=0;l[1]=0;l[5]=u;l[9]=f;l[13]=0;l[2]=0;l[6]=0;l[10]=m;l[14]=_;l[3]=0;l[7]=0;l[11]=-1;l[15]=0;return this}makeOrthographic(e,t,n,r,s,o,a=_n){const l=this.elements;const c=1/(t-e);const u=1/(n-r);const d=1/(o-s);const f=(t+e)*c;const m=(n+r)*u;let _,x;if(a===_n){_=(o+s)*d;x=-2*d}else if(a===Br){_=s*d;x=-1*d}else{throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a)}l[0]=2*c;l[4]=0;l[8]=0;l[12]=-f;l[1]=0;l[5]=2*u;l[9]=0;l[13]=-m;l[2]=0;l[6]=0;l[10]=x;l[14]=-_;l[3]=0;l[7]=0;l[11]=0;l[15]=1;return this}equals(e){const t=this.elements;const n=e.elements;for(let r=0;r<16;r++){if(t[r]!==n[r])return false}return true}fromArray(e,t=0){for(let n=0;n<16;n++){this.elements[n]=e[n+t]}return this}toArray(e=[],t=0){const n=this.elements;e[t]=n[0];e[t+1]=n[1];e[t+2]=n[2];e[t+3]=n[3];e[t+4]=n[4];e[t+5]=n[5];e[t+6]=n[6];e[t+7]=n[7];e[t+8]=n[8];e[t+9]=n[9];e[t+10]=n[10];e[t+11]=n[11];e[t+12]=n[12];e[t+13]=n[13];e[t+14]=n[14];e[t+15]=n[15];return e}}const li=new L;const Yt=new st;const yu=new L(0,0,0);const Tu=new L(1,1,1);const yn=new L;const sr=new L;const It=new L;const ro=new st;const so=new $n;class Wr{constructor(e=0,t=0,n=0,r=Wr.DEFAULT_ORDER){this.isEuler=true;this._x=e;this._y=t;this._z=n;this._order=r}get x(){return this._x}set x(e){this._x=e;this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e;this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e;this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e;this._onChangeCallback()}set(e,t,n,r=this._order){this._x=e;this._y=t;this._z=n;this._order=r;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){this._x=e._x;this._y=e._y;this._z=e._z;this._order=e._order;this._onChangeCallback();return this}setFromRotationMatrix(e,t=this._order,n=true){const r=e.elements;const s=r[0],o=r[4],a=r[8];const l=r[1],c=r[5],u=r[9];const d=r[2],f=r[6],m=r[10];switch(t){case"XYZ":this._y=Math.asin(xt(a,-1,1));if(Math.abs(a)<.9999999){this._x=Math.atan2(-u,m);this._z=Math.atan2(-o,s)}else{this._x=Math.atan2(f,c);this._z=0}break;case"YXZ":this._x=Math.asin(-xt(u,-1,1));if(Math.abs(u)<.9999999){this._y=Math.atan2(a,m);this._z=Math.atan2(l,c)}else{this._y=Math.atan2(-d,s);this._z=0}break;case"ZXY":this._x=Math.asin(xt(f,-1,1));if(Math.abs(f)<.9999999){this._y=Math.atan2(-d,m);this._z=Math.atan2(-o,c)}else{this._y=0;this._z=Math.atan2(l,s)}break;case"ZYX":this._y=Math.asin(-xt(d,-1,1));if(Math.abs(d)<.9999999){this._x=Math.atan2(f,m);this._z=Math.atan2(l,s)}else{this._x=0;this._z=Math.atan2(-o,c)}break;case"YZX":this._z=Math.asin(xt(l,-1,1));if(Math.abs(l)<.9999999){this._x=Math.atan2(-u,c);this._y=Math.atan2(-d,s)}else{this._x=0;this._y=Math.atan2(a,m)}break;case"XZY":this._z=Math.asin(-xt(o,-1,1));if(Math.abs(o)<.9999999){this._x=Math.atan2(f,c);this._y=Math.atan2(a,s)}else{this._x=Math.atan2(-u,m);this._y=0}break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}this._order=t;if(n===true)this._onChangeCallback();return this}setFromQuaternion(e,t,n){ro.makeRotationFromQuaternion(e);return this.setFromRotationMatrix(ro,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){so.setFromEuler(this);return this.setFromQuaternion(so,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){this._x=e[0];this._y=e[1];this._z=e[2];if(e[3]!==void 0)this._order=e[3];this._onChangeCallback();return this}toArray(e=[],t=0){e[t]=this._x;e[t+1]=this._y;e[t+2]=this._z;e[t+3]=this._order;return e}_onChange(e){this._onChangeCallback=e;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._order}}Wr.DEFAULT_ORDER="XYZ";class bl{constructor(){this.mask=1|0}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=4294967295|0}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let bu=0;const ao=new L;const ci=new $n;const dn=new st;const ar=new L;const Oi=new L;const Au=new L;const wu=new $n;const oo=new L(1,0,0);const lo=new L(0,1,0);const co=new L(0,0,1);const Ru={type:"added"};const Cu={type:"removed"};class mt extends Jn{constructor(){super();this.isObject3D=true;Object.defineProperty(this,"id",{value:bu++});this.uuid=vn();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=mt.DEFAULT_UP.clone();const e=new L;const t=new Wr;const n=new $n;const r=new L(1,1,1);function s(){n.setFromEuler(t,false)}function o(){t.setFromQuaternion(n,void 0,false)}t._onChange(s);n._onChange(o);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:e},rotation:{configurable:true,enumerable:true,value:t},quaternion:{configurable:true,enumerable:true,value:n},scale:{configurable:true,enumerable:true,value:r},modelViewMatrix:{value:new st},normalMatrix:{value:new Ge}});this.matrix=new st;this.matrixWorld=new st;this.matrixAutoUpdate=mt.DEFAULT_MATRIX_AUTO_UPDATE;this.matrixWorldAutoUpdate=mt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;this.matrixWorldNeedsUpdate=false;this.layers=new bl;this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.animations=[];this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(e);this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){this.quaternion.premultiply(e);return this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,true)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){ci.setFromAxisAngle(e,t);this.quaternion.multiply(ci);return this}rotateOnWorldAxis(e,t){ci.setFromAxisAngle(e,t);this.quaternion.premultiply(ci);return this}rotateX(e){return this.rotateOnAxis(oo,e)}rotateY(e){return this.rotateOnAxis(lo,e)}rotateZ(e){return this.rotateOnAxis(co,e)}translateOnAxis(e,t){ao.copy(e).applyQuaternion(this.quaternion);this.position.add(ao.multiplyScalar(t));return this}translateX(e){return this.translateOnAxis(oo,e)}translateY(e){return this.translateOnAxis(lo,e)}translateZ(e){return this.translateOnAxis(co,e)}localToWorld(e){this.updateWorldMatrix(true,false);return e.applyMatrix4(this.matrixWorld)}worldToLocal(e){this.updateWorldMatrix(true,false);return e.applyMatrix4(dn.copy(this.matrixWorld).invert())}lookAt(e,t,n){if(e.isVector3){ar.copy(e)}else{ar.set(e,t,n)}const r=this.parent;this.updateWorldMatrix(true,false);Oi.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){dn.lookAt(Oi,ar,this.up)}else{dn.lookAt(ar,Oi,this.up)}this.quaternion.setFromRotationMatrix(dn);if(r){dn.extractRotation(r.matrixWorld);ci.setFromRotationMatrix(dn);this.quaternion.premultiply(ci.invert())}}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++){this.add(arguments[t])}return this}if(e===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",e);return this}if(e&&e.isObject3D){if(e.parent!==null){e.parent.remove(e)}e.parent=this;this.children.push(e);e.dispatchEvent(Ru)}else{console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e)}return this}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++){this.remove(arguments[n])}return this}const t=this.children.indexOf(e);if(t!==-1){e.parent=null;this.children.splice(t,1);e.dispatchEvent(Cu)}return this}removeFromParent(){const e=this.parent;if(e!==null){e.remove(this)}return this}clear(){return this.remove(...this.children)}attach(e){this.updateWorldMatrix(true,false);dn.copy(this.matrixWorld).invert();if(e.parent!==null){e.parent.updateWorldMatrix(true,false);dn.multiply(e.parent.matrixWorld)}e.applyMatrix4(dn);this.add(e);e.updateWorldMatrix(false,true);return this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,r=this.children.length;n<r;n++){const s=this.children[n];const o=s.getObjectByProperty(e,t);if(o!==void 0){return o}}return void 0}getObjectsByProperty(e,t,n=[]){if(this[e]===t)n.push(this);const r=this.children;for(let s=0,o=r.length;s<o;s++){r[s].getObjectsByProperty(e,t,n)}return n}getWorldPosition(e){this.updateWorldMatrix(true,false);return e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(Oi,e,Au);return e}getWorldScale(e){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(Oi,wu,e);return e}getWorldDirection(e){this.updateWorldMatrix(true,false);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,r=t.length;n<r;n++){t[n].traverse(e)}}traverseVisible(e){if(this.visible===false)return;e(this);const t=this.children;for(let n=0,r=t.length;n<r;n++){t[n].traverseVisible(e)}}traverseAncestors(e){const t=this.parent;if(t!==null){e(t);t.traverseAncestors(e)}}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true}updateMatrixWorld(e){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||e){if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}this.matrixWorldNeedsUpdate=false;e=true}const t=this.children;for(let n=0,r=t.length;n<r;n++){const s=t[n];if(s.matrixWorldAutoUpdate===true||e===true){s.updateMatrixWorld(e)}}}updateWorldMatrix(e,t){const n=this.parent;if(e===true&&n!==null&&n.matrixWorldAutoUpdate===true){n.updateWorldMatrix(true,false)}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}if(t===true){const r=this.children;for(let s=0,o=r.length;s<o;s++){const a=r[s];if(a.matrixWorldAutoUpdate===true){a.updateWorldMatrix(false,true)}}}}toJSON(e){const t=e===void 0||typeof e==="string";const n={};if(t){e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}};n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"}}const r={};r.uuid=this.uuid;r.type=this.type;if(this.name!=="")r.name=this.name;if(this.castShadow===true)r.castShadow=true;if(this.receiveShadow===true)r.receiveShadow=true;if(this.visible===false)r.visible=false;if(this.frustumCulled===false)r.frustumCulled=false;if(this.renderOrder!==0)r.renderOrder=this.renderOrder;if(Object.keys(this.userData).length>0)r.userData=this.userData;r.layers=this.layers.mask;r.matrix=this.matrix.toArray();r.up=this.up.toArray();if(this.matrixAutoUpdate===false)r.matrixAutoUpdate=false;if(this.isInstancedMesh){r.type="InstancedMesh";r.count=this.count;r.instanceMatrix=this.instanceMatrix.toJSON();if(this.instanceColor!==null)r.instanceColor=this.instanceColor.toJSON()}if(this.isBatchedMesh){r.type="BatchedMesh";r.perObjectFrustumCulled=this.perObjectFrustumCulled;r.sortObjects=this.sortObjects;r.drawRanges=this._drawRanges;r.reservedRanges=this._reservedRanges;r.visibility=this._visibility;r.active=this._active;r.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()}));r.maxGeometryCount=this._maxGeometryCount;r.maxVertexCount=this._maxVertexCount;r.maxIndexCount=this._maxIndexCount;r.geometryInitialized=this._geometryInitialized;r.geometryCount=this._geometryCount;r.matricesTexture=this._matricesTexture.toJSON(e);if(this.boundingSphere!==null){r.boundingSphere={center:r.boundingSphere.center.toArray(),radius:r.boundingSphere.radius}}if(this.boundingBox!==null){r.boundingBox={min:r.boundingBox.min.toArray(),max:r.boundingBox.max.toArray()}}}function s(a,l){if(a[l.uuid]===void 0){a[l.uuid]=l.toJSON(e)}return l.uuid}if(this.isScene){if(this.background){if(this.background.isColor){r.background=this.background.toJSON()}else if(this.background.isTexture){r.background=this.background.toJSON(e).uuid}}if(this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==true){r.environment=this.environment.toJSON(e).uuid}}else if(this.isMesh||this.isLine||this.isPoints){r.geometry=s(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l)){for(let c=0,u=l.length;c<u;c++){const d=l[c];s(e.shapes,d)}}else{s(e.shapes,l)}}}if(this.isSkinnedMesh){r.bindMode=this.bindMode;r.bindMatrix=this.bindMatrix.toArray();if(this.skeleton!==void 0){s(e.skeletons,this.skeleton);r.skeleton=this.skeleton.uuid}}if(this.material!==void 0){if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++){a.push(s(e.materials,this.material[l]))}r.material=a}else{r.material=s(e.materials,this.material)}}if(this.children.length>0){r.children=[];for(let a=0;a<this.children.length;a++){r.children.push(this.children[a].toJSON(e).object)}}if(this.animations.length>0){r.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];r.animations.push(s(e.animations,l))}}if(t){const a=o(e.geometries);const l=o(e.materials);const c=o(e.textures);const u=o(e.images);const d=o(e.shapes);const f=o(e.skeletons);const m=o(e.animations);const _=o(e.nodes);if(a.length>0)n.geometries=a;if(l.length>0)n.materials=l;if(c.length>0)n.textures=c;if(u.length>0)n.images=u;if(d.length>0)n.shapes=d;if(f.length>0)n.skeletons=f;if(m.length>0)n.animations=m;if(_.length>0)n.nodes=_}n.object=r;return n;function o(a){const l=[];for(const c in a){const u=a[c];delete u.metadata;l.push(u)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=true){this.name=e.name;this.up.copy(e.up);this.position.copy(e.position);this.rotation.order=e.rotation.order;this.quaternion.copy(e.quaternion);this.scale.copy(e.scale);this.matrix.copy(e.matrix);this.matrixWorld.copy(e.matrixWorld);this.matrixAutoUpdate=e.matrixAutoUpdate;this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate;this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate;this.layers.mask=e.layers.mask;this.visible=e.visible;this.castShadow=e.castShadow;this.receiveShadow=e.receiveShadow;this.frustumCulled=e.frustumCulled;this.renderOrder=e.renderOrder;this.animations=e.animations.slice();this.userData=JSON.parse(JSON.stringify(e.userData));if(t===true){for(let n=0;n<e.children.length;n++){const r=e.children[n];this.add(r.clone())}}return this}}mt.DEFAULT_UP=new L(0,1,0);mt.DEFAULT_MATRIX_AUTO_UPDATE=true;mt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=true;const qt=new L;const fn=new L;const gs=new L;const pn=new L;const ui=new L;const hi=new L;const uo=new L;const _s=new L;const vs=new L;const xs=new L;let or=false;class jt{constructor(e=new L,t=new L,n=new L){this.a=e;this.b=t;this.c=n}static getNormal(e,t,n,r){r.subVectors(n,t);qt.subVectors(e,t);r.cross(qt);const s=r.lengthSq();if(s>0){return r.multiplyScalar(1/Math.sqrt(s))}return r.set(0,0,0)}static getBarycoord(e,t,n,r,s){qt.subVectors(r,t);fn.subVectors(n,t);gs.subVectors(e,t);const o=qt.dot(qt);const a=qt.dot(fn);const l=qt.dot(gs);const c=fn.dot(fn);const u=fn.dot(gs);const d=o*c-a*a;if(d===0){s.set(0,0,0);return null}const f=1/d;const m=(c*l-a*u)*f;const _=(o*u-a*l)*f;return s.set(1-m-_,_,m)}static containsPoint(e,t,n,r){if(this.getBarycoord(e,t,n,r,pn)===null){return false}return pn.x>=0&&pn.y>=0&&pn.x+pn.y<=1}static getUV(e,t,n,r,s,o,a,l){if(or===false){console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");or=true}return this.getInterpolation(e,t,n,r,s,o,a,l)}static getInterpolation(e,t,n,r,s,o,a,l){if(this.getBarycoord(e,t,n,r,pn)===null){l.x=0;l.y=0;if("z"in l)l.z=0;if("w"in l)l.w=0;return null}l.setScalar(0);l.addScaledVector(s,pn.x);l.addScaledVector(o,pn.y);l.addScaledVector(a,pn.z);return l}static isFrontFacing(e,t,n,r){qt.subVectors(n,t);fn.subVectors(e,t);return qt.cross(fn).dot(r)<0?true:false}set(e,t,n){this.a.copy(e);this.b.copy(t);this.c.copy(n);return this}setFromPointsAndIndices(e,t,n,r){this.a.copy(e[t]);this.b.copy(e[n]);this.c.copy(e[r]);return this}setFromAttributeAndIndices(e,t,n,r){this.a.fromBufferAttribute(e,t);this.b.fromBufferAttribute(e,n);this.c.fromBufferAttribute(e,r);return this}clone(){return new this.constructor().copy(this)}copy(e){this.a.copy(e.a);this.b.copy(e.b);this.c.copy(e.c);return this}getArea(){qt.subVectors(this.c,this.b);fn.subVectors(this.a,this.b);return qt.cross(fn).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return jt.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return jt.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,n,r,s){if(or===false){console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().");or=true}return jt.getInterpolation(e,this.a,this.b,this.c,t,n,r,s)}getInterpolation(e,t,n,r,s){return jt.getInterpolation(e,this.a,this.b,this.c,t,n,r,s)}containsPoint(e){return jt.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return jt.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,r=this.b,s=this.c;let o,a;ui.subVectors(r,n);hi.subVectors(s,n);_s.subVectors(e,n);const l=ui.dot(_s);const c=hi.dot(_s);if(l<=0&&c<=0){return t.copy(n)}vs.subVectors(e,r);const u=ui.dot(vs);const d=hi.dot(vs);if(u>=0&&d<=u){return t.copy(r)}const f=l*d-u*c;if(f<=0&&l>=0&&u<=0){o=l/(l-u);return t.copy(n).addScaledVector(ui,o)}xs.subVectors(e,s);const m=ui.dot(xs);const _=hi.dot(xs);if(_>=0&&m<=_){return t.copy(s)}const x=m*c-l*_;if(x<=0&&c>=0&&_<=0){a=c/(c-_);return t.copy(n).addScaledVector(hi,a)}const p=u*_-m*d;if(p<=0&&d-u>=0&&m-_>=0){uo.subVectors(s,r);a=(d-u)/(d-u+(m-_));return t.copy(r).addScaledVector(uo,a)}const h=1/(p+x+f);o=x*h;a=f*h;return t.copy(n).addScaledVector(ui,o).addScaledVector(hi,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const Al={"aliceblue":15792383,"antiquewhite":16444375,"aqua":65535,"aquamarine":8388564,"azure":15794175,"beige":16119260,"bisque":16770244,"black":0,"blanchedalmond":16772045,"blue":255,"blueviolet":9055202,"brown":10824234,"burlywood":14596231,"cadetblue":6266528,"chartreuse":8388352,"chocolate":13789470,"coral":16744272,"cornflowerblue":6591981,"cornsilk":16775388,"crimson":14423100,"cyan":65535,"darkblue":139,"darkcyan":35723,"darkgoldenrod":12092939,"darkgray":11119017,"darkgreen":25600,"darkgrey":11119017,"darkkhaki":12433259,"darkmagenta":9109643,"darkolivegreen":5597999,"darkorange":16747520,"darkorchid":10040012,"darkred":9109504,"darksalmon":15308410,"darkseagreen":9419919,"darkslateblue":4734347,"darkslategray":3100495,"darkslategrey":3100495,"darkturquoise":52945,"darkviolet":9699539,"deeppink":16716947,"deepskyblue":49151,"dimgray":6908265,"dimgrey":6908265,"dodgerblue":2003199,"firebrick":11674146,"floralwhite":16775920,"forestgreen":2263842,"fuchsia":16711935,"gainsboro":14474460,"ghostwhite":16316671,"gold":16766720,"goldenrod":14329120,"gray":8421504,"green":32768,"greenyellow":11403055,"grey":8421504,"honeydew":15794160,"hotpink":16738740,"indianred":13458524,"indigo":4915330,"ivory":16777200,"khaki":15787660,"lavender":15132410,"lavenderblush":16773365,"lawngreen":8190976,"lemonchiffon":16775885,"lightblue":11393254,"lightcoral":15761536,"lightcyan":14745599,"lightgoldenrodyellow":16448210,"lightgray":13882323,"lightgreen":9498256,"lightgrey":13882323,"lightpink":16758465,"lightsalmon":16752762,"lightseagreen":2142890,"lightskyblue":8900346,"lightslategray":7833753,"lightslategrey":7833753,"lightsteelblue":11584734,"lightyellow":16777184,"lime":65280,"limegreen":3329330,"linen":16445670,"magenta":16711935,"maroon":8388608,"mediumaquamarine":6737322,"mediumblue":205,"mediumorchid":12211667,"mediumpurple":9662683,"mediumseagreen":3978097,"mediumslateblue":8087790,"mediumspringgreen":64154,"mediumturquoise":4772300,"mediumvioletred":13047173,"midnightblue":1644912,"mintcream":16121850,"mistyrose":16770273,"moccasin":16770229,"navajowhite":16768685,"navy":128,"oldlace":16643558,"olive":8421376,"olivedrab":7048739,"orange":16753920,"orangered":16729344,"orchid":14315734,"palegoldenrod":15657130,"palegreen":10025880,"paleturquoise":11529966,"palevioletred":14381203,"papayawhip":16773077,"peachpuff":16767673,"peru":13468991,"pink":16761035,"plum":14524637,"powderblue":11591910,"purple":8388736,"rebeccapurple":6697881,"red":16711680,"rosybrown":12357519,"royalblue":4286945,"saddlebrown":9127187,"salmon":16416882,"sandybrown":16032864,"seagreen":3050327,"seashell":16774638,"sienna":10506797,"silver":12632256,"skyblue":8900331,"slateblue":6970061,"slategray":7372944,"slategrey":7372944,"snow":16775930,"springgreen":65407,"steelblue":4620980,"tan":13808780,"teal":32896,"thistle":14204888,"tomato":16737095,"turquoise":4251856,"violet":15631086,"wheat":16113331,"white":16777215,"whitesmoke":16119285,"yellow":16776960,"yellowgreen":10145074};const Tn={h:0,s:0,l:0};const lr={h:0,s:0,l:0};function Ms(i,e,t){if(t<0)t+=1;if(t>1)t-=1;if(t<1/6)return i+(e-i)*6*t;if(t<1/2)return e;if(t<2/3)return i+(e-i)*6*(2/3-t);return i}class Ye{constructor(e,t,n){this.isColor=true;this.r=1;this.g=1;this.b=1;return this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const r=e;if(r&&r.isColor){this.copy(r)}else if(typeof r==="number"){this.setHex(r)}else if(typeof r==="string"){this.setStyle(r)}}else{this.setRGB(e,t,n)}return this}setScalar(e){this.r=e;this.g=e;this.b=e;return this}setHex(e,t=pt){e=Math.floor(e);this.r=(e>>16&255)/255;this.g=(e>>8&255)/255;this.b=(e&255)/255;$e.toWorkingColorSpace(this,t);return this}setRGB(e,t,n,r=$e.workingColorSpace){this.r=e;this.g=t;this.b=n;$e.toWorkingColorSpace(this,r);return this}setHSL(e,t,n,r=$e.workingColorSpace){e=ea(e,1);t=xt(t,0,1);n=xt(n,0,1);if(t===0){this.r=this.g=this.b=n}else{const s=n<=.5?n*(1+t):n+t-n*t;const o=2*n-s;this.r=Ms(o,s,e+1/3);this.g=Ms(o,s,e);this.b=Ms(o,s,e-1/3)}$e.toWorkingColorSpace(this,r);return this}setStyle(e,t=pt){function n(s){if(s===void 0)return;if(parseFloat(s)<1){console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}}let r;if(r=/^(\w+)\(([^\)]*)\)/.exec(e)){let s;const o=r[1];const a=r[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(s[4]);return this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,t)}if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(s[4]);return this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,t)}break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(s[4]);return this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,t)}break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(r=/^\#([A-Fa-f\d]+)$/.exec(e)){const s=r[1];const o=s.length;if(o===3){return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,t)}else if(o===6){return this.setHex(parseInt(s,16),t)}else{console.warn("THREE.Color: Invalid hex color "+e)}}else if(e&&e.length>0){return this.setColorName(e,t)}return this}setColorName(e,t=pt){const n=Al[e.toLowerCase()];if(n!==void 0){this.setHex(n,t)}else{console.warn("THREE.Color: Unknown color "+e)}return this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){this.r=e.r;this.g=e.g;this.b=e.b;return this}copySRGBToLinear(e){this.r=yi(e.r);this.g=yi(e.g);this.b=yi(e.b);return this}copyLinearToSRGB(e){this.r=ls(e.r);this.g=ls(e.g);this.b=ls(e.b);return this}convertSRGBToLinear(){this.copySRGBToLinear(this);return this}convertLinearToSRGB(){this.copyLinearToSRGB(this);return this}getHex(e=pt){$e.fromWorkingColorSpace(Et.copy(this),e);return Math.round(xt(Et.r*255,0,255))*65536+Math.round(xt(Et.g*255,0,255))*256+Math.round(xt(Et.b*255,0,255))}getHexString(e=pt){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=$e.workingColorSpace){$e.fromWorkingColorSpace(Et.copy(this),t);const n=Et.r,r=Et.g,s=Et.b;const o=Math.max(n,r,s);const a=Math.min(n,r,s);let l,c;const u=(a+o)/2;if(a===o){l=0;c=0}else{const d=o-a;c=u<=.5?d/(o+a):d/(2-o-a);switch(o){case n:l=(r-s)/d+(r<s?6:0);break;case r:l=(s-n)/d+2;break;case s:l=(n-r)/d+4;break}l/=6}e.h=l;e.s=c;e.l=u;return e}getRGB(e,t=$e.workingColorSpace){$e.fromWorkingColorSpace(Et.copy(this),t);e.r=Et.r;e.g=Et.g;e.b=Et.b;return e}getStyle(e=pt){$e.fromWorkingColorSpace(Et.copy(this),e);const t=Et.r,n=Et.g,r=Et.b;if(e!==pt){return`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${r.toFixed(3)})`}return`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(r*255)})`}offsetHSL(e,t,n){this.getHSL(Tn);return this.setHSL(Tn.h+e,Tn.s+t,Tn.l+n)}add(e){this.r+=e.r;this.g+=e.g;this.b+=e.b;return this}addColors(e,t){this.r=e.r+t.r;this.g=e.g+t.g;this.b=e.b+t.b;return this}addScalar(e){this.r+=e;this.g+=e;this.b+=e;return this}sub(e){this.r=Math.max(0,this.r-e.r);this.g=Math.max(0,this.g-e.g);this.b=Math.max(0,this.b-e.b);return this}multiply(e){this.r*=e.r;this.g*=e.g;this.b*=e.b;return this}multiplyScalar(e){this.r*=e;this.g*=e;this.b*=e;return this}lerp(e,t){this.r+=(e.r-this.r)*t;this.g+=(e.g-this.g)*t;this.b+=(e.b-this.b)*t;return this}lerpColors(e,t,n){this.r=e.r+(t.r-e.r)*n;this.g=e.g+(t.g-e.g)*n;this.b=e.b+(t.b-e.b)*n;return this}lerpHSL(e,t){this.getHSL(Tn);e.getHSL(lr);const n=zi(Tn.h,lr.h,t);const r=zi(Tn.s,lr.s,t);const s=zi(Tn.l,lr.l,t);this.setHSL(n,r,s);return this}setFromVector3(e){this.r=e.x;this.g=e.y;this.b=e.z;return this}applyMatrix3(e){const t=this.r,n=this.g,r=this.b;const s=e.elements;this.r=s[0]*t+s[3]*n+s[6]*r;this.g=s[1]*t+s[4]*n+s[7]*r;this.b=s[2]*t+s[5]*n+s[8]*r;return this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){this.r=e[t];this.g=e[t+1];this.b=e[t+2];return this}toArray(e=[],t=0){e[t]=this.r;e[t+1]=this.g;e[t+2]=this.b;return e}fromBufferAttribute(e,t){this.r=e.getX(t);this.g=e.getY(t);this.b=e.getZ(t);return this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r;yield this.g;yield this.b}}const Et=new Ye;Ye.NAMES=Al;let Lu=0;class Ci extends Jn{constructor(){super();this.isMaterial=true;Object.defineProperty(this,"id",{value:Lu++});this.uuid=vn();this.name="";this.type="Material";this.blending=Ei;this.side=Un;this.vertexColors=false;this.opacity=1;this.transparent=false;this.alphaHash=false;this.blendSrc=Os;this.blendDst=Fs;this.blendEquation=kn;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.blendColor=new Ye(0,0,0);this.blendAlpha=0;this.depthFunc=Ir;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=255;this.stencilFunc=$a;this.stencilRef=0;this.stencilFuncMask=255;this.stencilFail=ii;this.stencilZFail=ii;this.stencilZPass=ii;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaToCoverage=false;this.premultipliedAlpha=false;this.forceSinglePass=false;this.visible=true;this.toneMapped=true;this.userData={};this.version=0;this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){if(this._alphaTest>0!==e>0){this.version++}this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e===void 0)return;for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const r=this[t];if(r===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}if(r&&r.isColor){r.set(n)}else if(r&&r.isVector3&&(n&&n.isVector3)){r.copy(n)}else{this[t]=n}}}toJSON(e){const t=e===void 0||typeof e==="string";if(t){e={textures:{},images:{}}}const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid;n.type=this.type;if(this.name!=="")n.name=this.name;if(this.color&&this.color.isColor)n.color=this.color.getHex();if(this.roughness!==void 0)n.roughness=this.roughness;if(this.metalness!==void 0)n.metalness=this.metalness;if(this.sheen!==void 0)n.sheen=this.sheen;if(this.sheenColor&&this.sheenColor.isColor)n.sheenColor=this.sheenColor.getHex();if(this.sheenRoughness!==void 0)n.sheenRoughness=this.sheenRoughness;if(this.emissive&&this.emissive.isColor)n.emissive=this.emissive.getHex();if(this.emissiveIntensity&&this.emissiveIntensity!==1)n.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)n.specular=this.specular.getHex();if(this.specularIntensity!==void 0)n.specularIntensity=this.specularIntensity;if(this.specularColor&&this.specularColor.isColor)n.specularColor=this.specularColor.getHex();if(this.shininess!==void 0)n.shininess=this.shininess;if(this.clearcoat!==void 0)n.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==void 0)n.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid;n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()}if(this.iridescence!==void 0)n.iridescence=this.iridescence;if(this.iridescenceIOR!==void 0)n.iridescenceIOR=this.iridescenceIOR;if(this.iridescenceThicknessRange!==void 0)n.iridescenceThicknessRange=this.iridescenceThicknessRange;if(this.iridescenceMap&&this.iridescenceMap.isTexture){n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid}if(this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture){n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid}if(this.anisotropy!==void 0)n.anisotropy=this.anisotropy;if(this.anisotropyRotation!==void 0)n.anisotropyRotation=this.anisotropyRotation;if(this.anisotropyMap&&this.anisotropyMap.isTexture){n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid}if(this.map&&this.map.isTexture)n.map=this.map.toJSON(e).uuid;if(this.matcap&&this.matcap.isTexture)n.matcap=this.matcap.toJSON(e).uuid;if(this.alphaMap&&this.alphaMap.isTexture)n.alphaMap=this.alphaMap.toJSON(e).uuid;if(this.lightMap&&this.lightMap.isTexture){n.lightMap=this.lightMap.toJSON(e).uuid;n.lightMapIntensity=this.lightMapIntensity}if(this.aoMap&&this.aoMap.isTexture){n.aoMap=this.aoMap.toJSON(e).uuid;n.aoMapIntensity=this.aoMapIntensity}if(this.bumpMap&&this.bumpMap.isTexture){n.bumpMap=this.bumpMap.toJSON(e).uuid;n.bumpScale=this.bumpScale}if(this.normalMap&&this.normalMap.isTexture){n.normalMap=this.normalMap.toJSON(e).uuid;n.normalMapType=this.normalMapType;n.normalScale=this.normalScale.toArray()}if(this.displacementMap&&this.displacementMap.isTexture){n.displacementMap=this.displacementMap.toJSON(e).uuid;n.displacementScale=this.displacementScale;n.displacementBias=this.displacementBias}if(this.roughnessMap&&this.roughnessMap.isTexture)n.roughnessMap=this.roughnessMap.toJSON(e).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)n.metalnessMap=this.metalnessMap.toJSON(e).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)n.emissiveMap=this.emissiveMap.toJSON(e).uuid;if(this.specularMap&&this.specularMap.isTexture)n.specularMap=this.specularMap.toJSON(e).uuid;if(this.specularIntensityMap&&this.specularIntensityMap.isTexture)n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid;if(this.specularColorMap&&this.specularColorMap.isTexture)n.specularColorMap=this.specularColorMap.toJSON(e).uuid;if(this.envMap&&this.envMap.isTexture){n.envMap=this.envMap.toJSON(e).uuid;if(this.combine!==void 0)n.combine=this.combine}if(this.envMapIntensity!==void 0)n.envMapIntensity=this.envMapIntensity;if(this.reflectivity!==void 0)n.reflectivity=this.reflectivity;if(this.refractionRatio!==void 0)n.refractionRatio=this.refractionRatio;if(this.gradientMap&&this.gradientMap.isTexture){n.gradientMap=this.gradientMap.toJSON(e).uuid}if(this.transmission!==void 0)n.transmission=this.transmission;if(this.transmissionMap&&this.transmissionMap.isTexture)n.transmissionMap=this.transmissionMap.toJSON(e).uuid;if(this.thickness!==void 0)n.thickness=this.thickness;if(this.thicknessMap&&this.thicknessMap.isTexture)n.thicknessMap=this.thicknessMap.toJSON(e).uuid;if(this.attenuationDistance!==void 0&&this.attenuationDistance!==Infinity)n.attenuationDistance=this.attenuationDistance;if(this.attenuationColor!==void 0)n.attenuationColor=this.attenuationColor.getHex();if(this.size!==void 0)n.size=this.size;if(this.shadowSide!==null)n.shadowSide=this.shadowSide;if(this.sizeAttenuation!==void 0)n.sizeAttenuation=this.sizeAttenuation;if(this.blending!==Ei)n.blending=this.blending;if(this.side!==Un)n.side=this.side;if(this.vertexColors===true)n.vertexColors=true;if(this.opacity<1)n.opacity=this.opacity;if(this.transparent===true)n.transparent=true;if(this.blendSrc!==Os)n.blendSrc=this.blendSrc;if(this.blendDst!==Fs)n.blendDst=this.blendDst;if(this.blendEquation!==kn)n.blendEquation=this.blendEquation;if(this.blendSrcAlpha!==null)n.blendSrcAlpha=this.blendSrcAlpha;if(this.blendDstAlpha!==null)n.blendDstAlpha=this.blendDstAlpha;if(this.blendEquationAlpha!==null)n.blendEquationAlpha=this.blendEquationAlpha;if(this.blendColor&&this.blendColor.isColor)n.blendColor=this.blendColor.getHex();if(this.blendAlpha!==0)n.blendAlpha=this.blendAlpha;if(this.depthFunc!==Ir)n.depthFunc=this.depthFunc;if(this.depthTest===false)n.depthTest=this.depthTest;if(this.depthWrite===false)n.depthWrite=this.depthWrite;if(this.colorWrite===false)n.colorWrite=this.colorWrite;if(this.stencilWriteMask!==255)n.stencilWriteMask=this.stencilWriteMask;if(this.stencilFunc!==$a)n.stencilFunc=this.stencilFunc;if(this.stencilRef!==0)n.stencilRef=this.stencilRef;if(this.stencilFuncMask!==255)n.stencilFuncMask=this.stencilFuncMask;if(this.stencilFail!==ii)n.stencilFail=this.stencilFail;if(this.stencilZFail!==ii)n.stencilZFail=this.stencilZFail;if(this.stencilZPass!==ii)n.stencilZPass=this.stencilZPass;if(this.stencilWrite===true)n.stencilWrite=this.stencilWrite;if(this.rotation!==void 0&&this.rotation!==0)n.rotation=this.rotation;if(this.polygonOffset===true)n.polygonOffset=true;if(this.polygonOffsetFactor!==0)n.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)n.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth!==void 0&&this.linewidth!==1)n.linewidth=this.linewidth;if(this.dashSize!==void 0)n.dashSize=this.dashSize;if(this.gapSize!==void 0)n.gapSize=this.gapSize;if(this.scale!==void 0)n.scale=this.scale;if(this.dithering===true)n.dithering=true;if(this.alphaTest>0)n.alphaTest=this.alphaTest;if(this.alphaHash===true)n.alphaHash=true;if(this.alphaToCoverage===true)n.alphaToCoverage=true;if(this.premultipliedAlpha===true)n.premultipliedAlpha=true;if(this.forceSinglePass===true)n.forceSinglePass=true;if(this.wireframe===true)n.wireframe=true;if(this.wireframeLinewidth>1)n.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=="round")n.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=="round")n.wireframeLinejoin=this.wireframeLinejoin;if(this.flatShading===true)n.flatShading=true;if(this.visible===false)n.visible=false;if(this.toneMapped===false)n.toneMapped=false;if(this.fog===false)n.fog=false;if(Object.keys(this.userData).length>0)n.userData=this.userData;function r(s){const o=[];for(const a in s){const l=s[a];delete l.metadata;o.push(l)}return o}if(t){const s=r(e.textures);const o=r(e.images);if(s.length>0)n.textures=s;if(o.length>0)n.images=o}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name;this.blending=e.blending;this.side=e.side;this.vertexColors=e.vertexColors;this.opacity=e.opacity;this.transparent=e.transparent;this.blendSrc=e.blendSrc;this.blendDst=e.blendDst;this.blendEquation=e.blendEquation;this.blendSrcAlpha=e.blendSrcAlpha;this.blendDstAlpha=e.blendDstAlpha;this.blendEquationAlpha=e.blendEquationAlpha;this.blendColor.copy(e.blendColor);this.blendAlpha=e.blendAlpha;this.depthFunc=e.depthFunc;this.depthTest=e.depthTest;this.depthWrite=e.depthWrite;this.stencilWriteMask=e.stencilWriteMask;this.stencilFunc=e.stencilFunc;this.stencilRef=e.stencilRef;this.stencilFuncMask=e.stencilFuncMask;this.stencilFail=e.stencilFail;this.stencilZFail=e.stencilZFail;this.stencilZPass=e.stencilZPass;this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const r=t.length;n=new Array(r);for(let s=0;s!==r;++s){n[s]=t[s].clone()}}this.clippingPlanes=n;this.clipIntersection=e.clipIntersection;this.clipShadows=e.clipShadows;this.shadowSide=e.shadowSide;this.colorWrite=e.colorWrite;this.precision=e.precision;this.polygonOffset=e.polygonOffset;this.polygonOffsetFactor=e.polygonOffsetFactor;this.polygonOffsetUnits=e.polygonOffsetUnits;this.dithering=e.dithering;this.alphaTest=e.alphaTest;this.alphaHash=e.alphaHash;this.alphaToCoverage=e.alphaToCoverage;this.premultipliedAlpha=e.premultipliedAlpha;this.forceSinglePass=e.forceSinglePass;this.visible=e.visible;this.toneMapped=e.toneMapped;this.userData=JSON.parse(JSON.stringify(e.userData));return this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){if(e===true)this.version++}}class wl extends Ci{constructor(e){super();this.isMeshBasicMaterial=true;this.type="MeshBasicMaterial";this.color=new Ye(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=$s;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.fog=e.fog;return this}}const at=new L;const cr=new Pe;class Zt{constructor(e,t,n=false){if(Array.isArray(e)){throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")}this.isBufferAttribute=true;this.name="";this.array=e;this.itemSize=t;this.count=e!==void 0?e.length/t:0;this.normalized=n;this.usage=Vs;this._updateRange={offset:0,count:-1};this.updateRanges=[];this.gpuType=wn;this.version=0}onUploadCallback(){}set needsUpdate(e){if(e===true)this.version++}get updateRange(){console.warn("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");return this._updateRange}setUsage(e){this.usage=e;return this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){this.name=e.name;this.array=new e.array.constructor(e.array);this.itemSize=e.itemSize;this.count=e.count;this.normalized=e.normalized;this.usage=e.usage;this.gpuType=e.gpuType;return this}copyAt(e,t,n){e*=this.itemSize;n*=t.itemSize;for(let r=0,s=this.itemSize;r<s;r++){this.array[e+r]=t.array[n+r]}return this}copyArray(e){this.array.set(e);return this}applyMatrix3(e){if(this.itemSize===2){for(let t=0,n=this.count;t<n;t++){cr.fromBufferAttribute(this,t);cr.applyMatrix3(e);this.setXY(t,cr.x,cr.y)}}else if(this.itemSize===3){for(let t=0,n=this.count;t<n;t++){at.fromBufferAttribute(this,t);at.applyMatrix3(e);this.setXYZ(t,at.x,at.y,at.z)}}return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++){at.fromBufferAttribute(this,t);at.applyMatrix4(e);this.setXYZ(t,at.x,at.y,at.z)}return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++){at.fromBufferAttribute(this,t);at.applyNormalMatrix(e);this.setXYZ(t,at.x,at.y,at.z)}return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++){at.fromBufferAttribute(this,t);at.transformDirection(e);this.setXYZ(t,at.x,at.y,at.z)}return this}set(e,t=0){this.array.set(e,t);return this}getComponent(e,t){let n=this.array[e*this.itemSize+t];if(this.normalized)n=rn(n,this.array);return n}setComponent(e,t,n){if(this.normalized)n=Ze(n,this.array);this.array[e*this.itemSize+t]=n;return this}getX(e){let t=this.array[e*this.itemSize];if(this.normalized)t=rn(t,this.array);return t}setX(e,t){if(this.normalized)t=Ze(t,this.array);this.array[e*this.itemSize]=t;return this}getY(e){let t=this.array[e*this.itemSize+1];if(this.normalized)t=rn(t,this.array);return t}setY(e,t){if(this.normalized)t=Ze(t,this.array);this.array[e*this.itemSize+1]=t;return this}getZ(e){let t=this.array[e*this.itemSize+2];if(this.normalized)t=rn(t,this.array);return t}setZ(e,t){if(this.normalized)t=Ze(t,this.array);this.array[e*this.itemSize+2]=t;return this}getW(e){let t=this.array[e*this.itemSize+3];if(this.normalized)t=rn(t,this.array);return t}setW(e,t){if(this.normalized)t=Ze(t,this.array);this.array[e*this.itemSize+3]=t;return this}setXY(e,t,n){e*=this.itemSize;if(this.normalized){t=Ze(t,this.array);n=Ze(n,this.array)}this.array[e+0]=t;this.array[e+1]=n;return this}setXYZ(e,t,n,r){e*=this.itemSize;if(this.normalized){t=Ze(t,this.array);n=Ze(n,this.array);r=Ze(r,this.array)}this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=r;return this}setXYZW(e,t,n,r,s){e*=this.itemSize;if(this.normalized){t=Ze(t,this.array);n=Ze(n,this.array);r=Ze(r,this.array);s=Ze(s,this.array)}this.array[e+0]=t;this.array[e+1]=n;this.array[e+2]=r;this.array[e+3]=s;return this}onUpload(e){this.onUploadCallback=e;return this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};if(this.name!=="")e.name=this.name;if(this.usage!==Vs)e.usage=this.usage;return e}}class Rl extends Zt{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class Cl extends Zt{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class Tt extends Zt{constructor(e,t,n){super(new Float32Array(e),t,n)}}let Pu=0;const Gt=new st;const Ss=new mt;const di=new L;const Nt=new Nn;const Fi=new Nn;const ft=new L;class zt extends Jn{constructor(){super();this.isBufferGeometry=true;Object.defineProperty(this,"id",{value:Pu++});this.uuid=vn();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={}}getIndex(){return this.index}setIndex(e){if(Array.isArray(e)){this.index=new(Sl(e)?Cl:Rl)(e,1)}else{this.index=e}return this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){this.attributes[e]=t;return this}deleteAttribute(e){delete this.attributes[e];return this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e;this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;if(t!==void 0){t.applyMatrix4(e);t.needsUpdate=true}const n=this.attributes.normal;if(n!==void 0){const s=new Ge().getNormalMatrix(e);n.applyNormalMatrix(s);n.needsUpdate=true}const r=this.attributes.tangent;if(r!==void 0){r.transformDirection(e);r.needsUpdate=true}if(this.boundingBox!==null){this.computeBoundingBox()}if(this.boundingSphere!==null){this.computeBoundingSphere()}return this}applyQuaternion(e){Gt.makeRotationFromQuaternion(e);this.applyMatrix4(Gt);return this}rotateX(e){Gt.makeRotationX(e);this.applyMatrix4(Gt);return this}rotateY(e){Gt.makeRotationY(e);this.applyMatrix4(Gt);return this}rotateZ(e){Gt.makeRotationZ(e);this.applyMatrix4(Gt);return this}translate(e,t,n){Gt.makeTranslation(e,t,n);this.applyMatrix4(Gt);return this}scale(e,t,n){Gt.makeScale(e,t,n);this.applyMatrix4(Gt);return this}lookAt(e){Ss.lookAt(e);Ss.updateMatrix();this.applyMatrix4(Ss.matrix);return this}center(){this.computeBoundingBox();this.boundingBox.getCenter(di).negate();this.translate(di.x,di.y,di.z);return this}setFromPoints(e){const t=[];for(let n=0,r=e.length;n<r;n++){const s=e[n];t.push(s.x,s.y,s.z||0)}this.setAttribute("position",new Tt(t,3));return this}computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Nn}const e=this.attributes.position;const t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingBox.set(new L(-Infinity,-Infinity,-Infinity),new L(Infinity,Infinity,Infinity));return}if(e!==void 0){this.boundingBox.setFromBufferAttribute(e);if(t){for(let n=0,r=t.length;n<r;n++){const s=t[n];Nt.setFromBufferAttribute(s);if(this.morphTargetsRelative){ft.addVectors(this.boundingBox.min,Nt.min);this.boundingBox.expandByPoint(ft);ft.addVectors(this.boundingBox.max,Nt.max);this.boundingBox.expandByPoint(ft)}else{this.boundingBox.expandByPoint(Nt.min);this.boundingBox.expandByPoint(Nt.max)}}}}else{this.boundingBox.makeEmpty()}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}}computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Ri}const e=this.attributes.position;const t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingSphere.set(new L,Infinity);return}if(e){const n=this.boundingSphere.center;Nt.setFromBufferAttribute(e);if(t){for(let s=0,o=t.length;s<o;s++){const a=t[s];Fi.setFromBufferAttribute(a);if(this.morphTargetsRelative){ft.addVectors(Nt.min,Fi.min);Nt.expandByPoint(ft);ft.addVectors(Nt.max,Fi.max);Nt.expandByPoint(ft)}else{Nt.expandByPoint(Fi.min);Nt.expandByPoint(Fi.max)}}}Nt.getCenter(n);let r=0;for(let s=0,o=e.count;s<o;s++){ft.fromBufferAttribute(e,s);r=Math.max(r,n.distanceToSquared(ft))}if(t){for(let s=0,o=t.length;s<o;s++){const a=t[s];const l=this.morphTargetsRelative;for(let c=0,u=a.count;c<u;c++){ft.fromBufferAttribute(a,c);if(l){di.fromBufferAttribute(e,c);ft.add(di)}r=Math.max(r,n.distanceToSquared(ft))}}}this.boundingSphere.radius=Math.sqrt(r);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}computeTangents(){const e=this.index;const t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.array;const r=t.position.array;const s=t.normal.array;const o=t.uv.array;const a=r.length/3;if(this.hasAttribute("tangent")===false){this.setAttribute("tangent",new Zt(new Float32Array(4*a),4))}const l=this.getAttribute("tangent").array;const c=[],u=[];for(let y=0;y<a;y++){c[y]=new L;u[y]=new L}const d=new L,f=new L,m=new L,_=new Pe,x=new Pe,p=new Pe,h=new L,T=new L;function v(y,H,j){d.fromArray(r,y*3);f.fromArray(r,H*3);m.fromArray(r,j*3);_.fromArray(o,y*2);x.fromArray(o,H*2);p.fromArray(o,j*2);f.sub(d);m.sub(d);x.sub(_);p.sub(_);const ce=1/(x.x*p.y-p.x*x.y);if(!isFinite(ce))return;h.copy(f).multiplyScalar(p.y).addScaledVector(m,-x.y).multiplyScalar(ce);T.copy(m).multiplyScalar(x.x).addScaledVector(f,-p.x).multiplyScalar(ce);c[y].add(h);c[H].add(h);c[j].add(h);u[y].add(T);u[H].add(T);u[j].add(T)}let R=this.groups;if(R.length===0){R=[{start:0,count:n.length}]}for(let y=0,H=R.length;y<H;++y){const j=R[y];const ce=j.start;const P=j.count;for(let F=ce,V=ce+P;F<V;F+=3){v(n[F+0],n[F+1],n[F+2])}}const D=new L,C=new L;const A=new L,X=new L;function E(y){A.fromArray(s,y*3);X.copy(A);const H=c[y];D.copy(H);D.sub(A.multiplyScalar(A.dot(H))).normalize();C.crossVectors(X,H);const j=C.dot(u[y]);const ce=j<0?-1:1;l[y*4]=D.x;l[y*4+1]=D.y;l[y*4+2]=D.z;l[y*4+3]=ce}for(let y=0,H=R.length;y<H;++y){const j=R[y];const ce=j.start;const P=j.count;for(let F=ce,V=ce+P;F<V;F+=3){E(n[F+0]);E(n[F+1]);E(n[F+2])}}}computeVertexNormals(){const e=this.index;const t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0){n=new Zt(new Float32Array(t.count*3),3);this.setAttribute("normal",n)}else{for(let f=0,m=n.count;f<m;f++){n.setXYZ(f,0,0,0)}}const r=new L,s=new L,o=new L;const a=new L,l=new L,c=new L;const u=new L,d=new L;if(e){for(let f=0,m=e.count;f<m;f+=3){const _=e.getX(f+0);const x=e.getX(f+1);const p=e.getX(f+2);r.fromBufferAttribute(t,_);s.fromBufferAttribute(t,x);o.fromBufferAttribute(t,p);u.subVectors(o,s);d.subVectors(r,s);u.cross(d);a.fromBufferAttribute(n,_);l.fromBufferAttribute(n,x);c.fromBufferAttribute(n,p);a.add(u);l.add(u);c.add(u);n.setXYZ(_,a.x,a.y,a.z);n.setXYZ(x,l.x,l.y,l.z);n.setXYZ(p,c.x,c.y,c.z)}}else{for(let f=0,m=t.count;f<m;f+=3){r.fromBufferAttribute(t,f+0);s.fromBufferAttribute(t,f+1);o.fromBufferAttribute(t,f+2);u.subVectors(o,s);d.subVectors(r,s);u.cross(d);n.setXYZ(f+0,u.x,u.y,u.z);n.setXYZ(f+1,u.x,u.y,u.z);n.setXYZ(f+2,u.x,u.y,u.z)}}this.normalizeNormals();n.needsUpdate=true}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++){ft.fromBufferAttribute(e,t);ft.normalize();e.setXYZ(t,ft.x,ft.y,ft.z)}}toNonIndexed(){function e(a,l){const c=a.array;const u=a.itemSize;const d=a.normalized;const f=new c.constructor(l.length*u);let m=0,_=0;for(let x=0,p=l.length;x<p;x++){if(a.isInterleavedBufferAttribute){m=l[x]*a.data.stride+a.offset}else{m=l[x]*u}for(let h=0;h<u;h++){f[_++]=c[m++]}}return new Zt(f,u,d)}if(this.index===null){console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");return this}const t=new zt;const n=this.index.array;const r=this.attributes;for(const a in r){const l=r[a];const c=e(l,n);t.setAttribute(a,c)}const s=this.morphAttributes;for(const a in s){const l=[];const c=s[a];for(let u=0,d=c.length;u<d;u++){const f=c[u];const m=e(f,n);l.push(m)}t.morphAttributes[a]=l}t.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];t.addGroup(c.start,c.count,c.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};e.uuid=this.uuid;e.type=this.type;if(this.name!=="")e.name=this.name;if(Object.keys(this.userData).length>0)e.userData=this.userData;if(this.parameters!==void 0){const l=this.parameters;for(const c in l){if(l[c]!==void 0)e[c]=l[c]}return e}e.data={attributes:{}};const t=this.index;if(t!==null){e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)}}const n=this.attributes;for(const l in n){const c=n[l];e.data.attributes[l]=c.toJSON(e.data)}const r={};let s=false;for(const l in this.morphAttributes){const c=this.morphAttributes[l];const u=[];for(let d=0,f=c.length;d<f;d++){const m=c[d];u.push(m.toJSON(e.data))}if(u.length>0){r[l]=u;s=true}}if(s){e.data.morphAttributes=r;e.data.morphTargetsRelative=this.morphTargetsRelative}const o=this.groups;if(o.length>0){e.data.groups=JSON.parse(JSON.stringify(o))}const a=this.boundingSphere;if(a!==null){e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}}return e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;if(n!==null){this.setIndex(n.clone(t))}const r=e.attributes;for(const c in r){const u=r[c];this.setAttribute(c,u.clone(t))}const s=e.morphAttributes;for(const c in s){const u=[];const d=s[c];for(let f=0,m=d.length;f<m;f++){u.push(d[f].clone(t))}this.morphAttributes[c]=u}this.morphTargetsRelative=e.morphTargetsRelative;const o=e.groups;for(let c=0,u=o.length;c<u;c++){const d=o[c];this.addGroup(d.start,d.count,d.materialIndex)}const a=e.boundingBox;if(a!==null){this.boundingBox=a.clone()}const l=e.boundingSphere;if(l!==null){this.boundingSphere=l.clone()}this.drawRange.start=e.drawRange.start;this.drawRange.count=e.drawRange.count;this.userData=e.userData;return this}dispose(){this.dispatchEvent({type:"dispose"})}}const ho=new st;const Hn=new ta;const ur=new Ri;const fo=new L;const fi=new L;const pi=new L;const mi=new L;const Es=new L;const hr=new L;const dr=new Pe;const fr=new Pe;const pr=new Pe;const po=new L;const mo=new L;const go=new L;const mr=new L;const gr=new L;class an extends mt{constructor(e=new zt,t=new wl){super();this.isMesh=true;this.type="Mesh";this.geometry=e;this.material=t;this.updateMorphTargets()}copy(e,t){super.copy(e,t);if(e.morphTargetInfluences!==void 0){this.morphTargetInfluences=e.morphTargetInfluences.slice()}if(e.morphTargetDictionary!==void 0){this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)}this.material=Array.isArray(e.material)?e.material.slice():e.material;this.geometry=e.geometry;return this}updateMorphTargets(){const e=this.geometry;const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const r=t[n[0]];if(r!==void 0){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let s=0,o=r.length;s<o;s++){const a=r[s].name||String(s);this.morphTargetInfluences.push(0);this.morphTargetDictionary[a]=s}}}}getVertexPosition(e,t){const n=this.geometry;const r=n.attributes.position;const s=n.morphAttributes.position;const o=n.morphTargetsRelative;t.fromBufferAttribute(r,e);const a=this.morphTargetInfluences;if(s&&a){hr.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const u=a[l];const d=s[l];if(u===0)continue;Es.fromBufferAttribute(d,e);if(o){hr.addScaledVector(Es,u)}else{hr.addScaledVector(Es.sub(t),u)}}t.add(hr)}return t}raycast(e,t){const n=this.geometry;const r=this.material;const s=this.matrixWorld;if(r===void 0)return;if(n.boundingSphere===null)n.computeBoundingSphere();ur.copy(n.boundingSphere);ur.applyMatrix4(s);Hn.copy(e.ray).recast(e.near);if(ur.containsPoint(Hn.origin)===false){if(Hn.intersectSphere(ur,fo)===null)return;if(Hn.origin.distanceToSquared(fo)>(e.far-e.near)**2)return}ho.copy(s).invert();Hn.copy(e.ray).applyMatrix4(ho);if(n.boundingBox!==null){if(Hn.intersectsBox(n.boundingBox)===false)return}this._computeIntersections(e,t,Hn)}_computeIntersections(e,t,n){let r;const s=this.geometry;const o=this.material;const a=s.index;const l=s.attributes.position;const c=s.attributes.uv;const u=s.attributes.uv1;const d=s.attributes.normal;const f=s.groups;const m=s.drawRange;if(a!==null){if(Array.isArray(o)){for(let _=0,x=f.length;_<x;_++){const p=f[_];const h=o[p.materialIndex];const T=Math.max(p.start,m.start);const v=Math.min(a.count,Math.min(p.start+p.count,m.start+m.count));for(let R=T,D=v;R<D;R+=3){const C=a.getX(R);const A=a.getX(R+1);const X=a.getX(R+2);r=_r(this,h,e,n,c,u,d,C,A,X);if(r){r.faceIndex=Math.floor(R/3);r.face.materialIndex=p.materialIndex;t.push(r)}}}}else{const _=Math.max(0,m.start);const x=Math.min(a.count,m.start+m.count);for(let p=_,h=x;p<h;p+=3){const T=a.getX(p);const v=a.getX(p+1);const R=a.getX(p+2);r=_r(this,o,e,n,c,u,d,T,v,R);if(r){r.faceIndex=Math.floor(p/3);t.push(r)}}}}else if(l!==void 0){if(Array.isArray(o)){for(let _=0,x=f.length;_<x;_++){const p=f[_];const h=o[p.materialIndex];const T=Math.max(p.start,m.start);const v=Math.min(l.count,Math.min(p.start+p.count,m.start+m.count));for(let R=T,D=v;R<D;R+=3){const C=R;const A=R+1;const X=R+2;r=_r(this,h,e,n,c,u,d,C,A,X);if(r){r.faceIndex=Math.floor(R/3);r.face.materialIndex=p.materialIndex;t.push(r)}}}}else{const _=Math.max(0,m.start);const x=Math.min(l.count,m.start+m.count);for(let p=_,h=x;p<h;p+=3){const T=p;const v=p+1;const R=p+2;r=_r(this,o,e,n,c,u,d,T,v,R);if(r){r.faceIndex=Math.floor(p/3);t.push(r)}}}}}}function Du(i,e,t,n,r,s,o,a){let l;if(e.side===Pt){l=n.intersectTriangle(o,s,r,true,a)}else{l=n.intersectTriangle(r,s,o,e.side===Un,a)}if(l===null)return null;gr.copy(a);gr.applyMatrix4(i.matrixWorld);const c=t.ray.origin.distanceTo(gr);if(c<t.near||c>t.far)return null;return{distance:c,point:gr.clone(),object:i}}function _r(i,e,t,n,r,s,o,a,l,c){i.getVertexPosition(a,fi);i.getVertexPosition(l,pi);i.getVertexPosition(c,mi);const u=Du(i,e,t,n,fi,pi,mi,mr);if(u){if(r){dr.fromBufferAttribute(r,a);fr.fromBufferAttribute(r,l);pr.fromBufferAttribute(r,c);u.uv=jt.getInterpolation(mr,fi,pi,mi,dr,fr,pr,new Pe)}if(s){dr.fromBufferAttribute(s,a);fr.fromBufferAttribute(s,l);pr.fromBufferAttribute(s,c);u.uv1=jt.getInterpolation(mr,fi,pi,mi,dr,fr,pr,new Pe);u.uv2=u.uv1}if(o){po.fromBufferAttribute(o,a);mo.fromBufferAttribute(o,l);go.fromBufferAttribute(o,c);u.normal=jt.getInterpolation(mr,fi,pi,mi,po,mo,go,new L);if(u.normal.dot(n.direction)>0){u.normal.multiplyScalar(-1)}}const d={a,b:l,c,normal:new L,materialIndex:0};jt.getNormal(fi,pi,mi,d.normal);u.face=d}return u}class Ki extends zt{constructor(e=1,t=1,n=1,r=1,s=1,o=1){super();this.type="BoxGeometry";this.parameters={width:e,height:t,depth:n,widthSegments:r,heightSegments:s,depthSegments:o};const a=this;r=Math.floor(r);s=Math.floor(s);o=Math.floor(o);const l=[];const c=[];const u=[];const d=[];let f=0;let m=0;_("z","y","x",-1,-1,n,t,e,o,s,0);_("z","y","x",1,-1,n,t,-e,o,s,1);_("x","z","y",1,1,e,n,t,r,o,2);_("x","z","y",1,-1,e,n,-t,r,o,3);_("x","y","z",1,-1,e,t,n,r,s,4);_("x","y","z",-1,-1,e,t,-n,r,s,5);this.setIndex(l);this.setAttribute("position",new Tt(c,3));this.setAttribute("normal",new Tt(u,3));this.setAttribute("uv",new Tt(d,2));function _(x,p,h,T,v,R,D,C,A,X,E){const y=R/A;const H=D/X;const j=R/2;const ce=D/2;const P=C/2;const F=A+1;const V=X+1;let Y=0;let W=0;const k=new L;for(let Q=0;Q<V;Q++){const ne=Q*H-ce;for(let de=0;de<F;de++){const G=de*y-j;k[x]=G*T;k[p]=ne*v;k[h]=P;c.push(k.x,k.y,k.z);k[x]=0;k[p]=0;k[h]=C>0?1:-1;u.push(k.x,k.y,k.z);d.push(de/A);d.push(1-Q/X);Y+=1}}for(let Q=0;Q<X;Q++){for(let ne=0;ne<A;ne++){const de=f+ne+F*Q;const G=f+ne+F*(Q+1);const K=f+(ne+1)+F*(Q+1);const he=f+(ne+1)+F*Q;l.push(de,G,he);l.push(G,K,he);W+=6}}a.addGroup(m,W,E);m+=W;f+=Y}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new Ki(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function wi(i){const e={};for(const t in i){e[t]={};for(const n in i[t]){const r=i[t][n];if(r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)){if(r.isRenderTargetTexture){console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");e[t][n]=null}else{e[t][n]=r.clone()}}else if(Array.isArray(r)){e[t][n]=r.slice()}else{e[t][n]=r}}}return e}function Rt(i){const e={};for(let t=0;t<i.length;t++){const n=wi(i[t]);for(const r in n){e[r]=n[r]}}return e}function Uu(i){const e=[];for(let t=0;t<i.length;t++){e.push(i[t].clone())}return e}function Ll(i){if(i.getRenderTarget()===null){return i.outputColorSpace}return $e.workingColorSpace}const na={clone:wi,merge:Rt};var Iu="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var Nu="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";class In extends Ci{constructor(e){super();this.isShaderMaterial=true;this.type="ShaderMaterial";this.defines={};this.uniforms={};this.uniformsGroups=[];this.vertexShader=Iu;this.fragmentShader=Nu;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.lights=false;this.clipping=false;this.forceSinglePass=true;this.extensions={derivatives:false,fragDepth:false,drawBuffers:false,shaderTextureLOD:false,clipCullDistance:false};this.defaultAttributeValues={"color":[1,1,1],"uv":[0,0],"uv1":[0,0]};this.index0AttributeName=void 0;this.uniformsNeedUpdate=false;this.glslVersion=null;if(e!==void 0){this.setValues(e)}}copy(e){super.copy(e);this.fragmentShader=e.fragmentShader;this.vertexShader=e.vertexShader;this.uniforms=wi(e.uniforms);this.uniformsGroups=Uu(e.uniformsGroups);this.defines=Object.assign({},e.defines);this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.fog=e.fog;this.lights=e.lights;this.clipping=e.clipping;this.extensions=Object.assign({},e.extensions);this.glslVersion=e.glslVersion;return this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion;t.uniforms={};for(const r in this.uniforms){const s=this.uniforms[r];const o=s.value;if(o&&o.isTexture){t.uniforms[r]={type:"t",value:o.toJSON(e).uuid}}else if(o&&o.isColor){t.uniforms[r]={type:"c",value:o.getHex()}}else if(o&&o.isVector2){t.uniforms[r]={type:"v2",value:o.toArray()}}else if(o&&o.isVector3){t.uniforms[r]={type:"v3",value:o.toArray()}}else if(o&&o.isVector4){t.uniforms[r]={type:"v4",value:o.toArray()}}else if(o&&o.isMatrix3){t.uniforms[r]={type:"m3",value:o.toArray()}}else if(o&&o.isMatrix4){t.uniforms[r]={type:"m4",value:o.toArray()}}else{t.uniforms[r]={value:o}}}if(Object.keys(this.defines).length>0)t.defines=this.defines;t.vertexShader=this.vertexShader;t.fragmentShader=this.fragmentShader;t.lights=this.lights;t.clipping=this.clipping;const n={};for(const r in this.extensions){if(this.extensions[r]===true)n[r]=true}if(Object.keys(n).length>0)t.extensions=n;return t}}class Pl extends mt{constructor(){super();this.isCamera=true;this.type="Camera";this.matrixWorldInverse=new st;this.projectionMatrix=new st;this.projectionMatrixInverse=new st;this.coordinateSystem=_n}copy(e,t){super.copy(e,t);this.matrixWorldInverse.copy(e.matrixWorldInverse);this.projectionMatrix.copy(e.projectionMatrix);this.projectionMatrixInverse.copy(e.projectionMatrixInverse);this.coordinateSystem=e.coordinateSystem;return this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e);this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t);this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class kt extends Pl{constructor(e=50,t=1,n=.1,r=2e3){super();this.isPerspectiveCamera=true;this.type="PerspectiveCamera";this.fov=e;this.zoom=1;this.near=n;this.far=r;this.focus=10;this.aspect=t;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}copy(e,t){super.copy(e,t);this.fov=e.fov;this.zoom=e.zoom;this.near=e.near;this.far=e.far;this.focus=e.focus;this.aspect=e.aspect;this.view=e.view===null?null:Object.assign({},e.view);this.filmGauge=e.filmGauge;this.filmOffset=e.filmOffset;return this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=Wi*2*Math.atan(t);this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Bi*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return Wi*2*Math.atan(Math.tan(Bi*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,n,r,s,o){this.aspect=e/t;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=r;this.view.width=s;this.view.height=o;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(Bi*.5*this.fov)/this.zoom;let n=2*t;let r=this.aspect*n;let s=-.5*r;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;s+=o.offsetX*r/l;t-=o.offsetY*n/c;r*=o.width/l;n*=o.height/c}const a=this.filmOffset;if(a!==0)s+=e*a/this.getFilmWidth();this.projectionMatrix.makePerspective(s,s+r,t,t-n,e,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);t.object.fov=this.fov;t.object.zoom=this.zoom;t.object.near=this.near;t.object.far=this.far;t.object.focus=this.focus;t.object.aspect=this.aspect;if(this.view!==null)t.object.view=Object.assign({},this.view);t.object.filmGauge=this.filmGauge;t.object.filmOffset=this.filmOffset;return t}}const gi=-90;const _i=1;class Ou extends mt{constructor(e,t,n){super();this.type="CubeCamera";this.renderTarget=n;this.coordinateSystem=null;this.activeMipmapLevel=0;const r=new kt(gi,_i,e,t);r.layers=this.layers;this.add(r);const s=new kt(gi,_i,e,t);s.layers=this.layers;this.add(s);const o=new kt(gi,_i,e,t);o.layers=this.layers;this.add(o);const a=new kt(gi,_i,e,t);a.layers=this.layers;this.add(a);const l=new kt(gi,_i,e,t);l.layers=this.layers;this.add(l);const c=new kt(gi,_i,e,t);c.layers=this.layers;this.add(c)}updateCoordinateSystem(){const e=this.coordinateSystem;const t=this.children.concat();const[n,r,s,o,a,l]=t;for(const c of t)this.remove(c);if(e===_n){n.up.set(0,1,0);n.lookAt(1,0,0);r.up.set(0,1,0);r.lookAt(-1,0,0);s.up.set(0,0,-1);s.lookAt(0,1,0);o.up.set(0,0,1);o.lookAt(0,-1,0);a.up.set(0,1,0);a.lookAt(0,0,1);l.up.set(0,1,0);l.lookAt(0,0,-1)}else if(e===Br){n.up.set(0,-1,0);n.lookAt(-1,0,0);r.up.set(0,-1,0);r.lookAt(1,0,0);s.up.set(0,0,1);s.lookAt(0,1,0);o.up.set(0,0,-1);o.lookAt(0,-1,0);a.up.set(0,-1,0);a.lookAt(0,0,1);l.up.set(0,-1,0);l.lookAt(0,0,-1)}else{throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e)}for(const c of t){this.add(c);c.updateMatrixWorld()}}update(e,t){if(this.parent===null)this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:r}=this;if(this.coordinateSystem!==e.coordinateSystem){this.coordinateSystem=e.coordinateSystem;this.updateCoordinateSystem()}const[s,o,a,l,c,u]=this.children;const d=e.getRenderTarget();const f=e.getActiveCubeFace();const m=e.getActiveMipmapLevel();const _=e.xr.enabled;e.xr.enabled=false;const x=n.texture.generateMipmaps;n.texture.generateMipmaps=false;e.setRenderTarget(n,0,r);e.render(t,s);e.setRenderTarget(n,1,r);e.render(t,o);e.setRenderTarget(n,2,r);e.render(t,a);e.setRenderTarget(n,3,r);e.render(t,l);e.setRenderTarget(n,4,r);e.render(t,c);n.texture.generateMipmaps=x;e.setRenderTarget(n,5,r);e.render(t,u);e.setRenderTarget(d,f,m);e.xr.enabled=_;n.texture.needsPMREMUpdate=true}}class Dl extends Dt{constructor(e,t,n,r,s,o,a,l,c,u){e=e!==void 0?e:[];t=t!==void 0?t:Ti;super(e,t,n,r,s,o,a,l,c,u);this.isCubeTexture=true;this.flipY=false}get images(){return this.image}set images(e){this.image=e}}class Fu extends Zn{constructor(e=1,t={}){super(e,e,t);this.isWebGLCubeRenderTarget=true;const n={width:e,height:e,depth:1};const r=[n,n,n,n,n,n];if(t.encoding!==void 0){Hi("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.");t.colorSpace=t.encoding===jn?pt:Wt}this.texture=new Dl(r,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace);this.texture.isRenderTargetTexture=true;this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:false;this.texture.minFilter=t.minFilter!==void 0?t.minFilter:Vt}fromEquirectangularTexture(e,t){this.texture.type=t.type;this.texture.colorSpace=t.colorSpace;this.texture.generateMipmaps=t.generateMipmaps;this.texture.minFilter=t.minFilter;this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`};const r=new Ki(5,5,5);const s=new In({name:"CubemapFromEquirect",uniforms:wi(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Pt,blending:Cn});s.uniforms.tEquirect.value=t;const o=new an(r,s);const a=t.minFilter;if(t.minFilter===Vi)t.minFilter=Vt;const l=new Ou(1,10,this);l.update(e,o);t.minFilter=a;o.geometry.dispose();o.material.dispose();return this}clear(e,t,n,r){const s=e.getRenderTarget();for(let o=0;o<6;o++){e.setRenderTarget(this,o);e.clear(t,n,r)}e.setRenderTarget(s)}}const ys=new L;const Bu=new L;const zu=new Ge;class bn{constructor(e=new L(1,0,0),t=0){this.isPlane=true;this.normal=e;this.constant=t}set(e,t){this.normal.copy(e);this.constant=t;return this}setComponents(e,t,n,r){this.normal.set(e,t,n);this.constant=r;return this}setFromNormalAndCoplanarPoint(e,t){this.normal.copy(e);this.constant=-t.dot(this.normal);return this}setFromCoplanarPoints(e,t,n){const r=ys.subVectors(n,t).cross(Bu.subVectors(e,t)).normalize();this.setFromNormalAndCoplanarPoint(r,e);return this}copy(e){this.normal.copy(e.normal);this.constant=e.constant;return this}normalize(){const e=1/this.normal.length();this.normal.multiplyScalar(e);this.constant*=e;return this}negate(){this.constant*=-1;this.normal.negate();return this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(ys);const r=this.normal.dot(n);if(r===0){if(this.distanceToPoint(e.start)===0){return t.copy(e.start)}return null}const s=-(e.start.dot(this.normal)+this.constant)/r;if(s<0||s>1){return null}return t.copy(e.start).addScaledVector(n,s)}intersectsLine(e){const t=this.distanceToPoint(e.start);const n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||zu.getNormalMatrix(e);const r=this.coplanarPoint(ys).applyMatrix4(e);const s=this.normal.applyMatrix3(n).normalize();this.constant=-r.dot(s);return this}translate(e){this.constant-=e.dot(this.normal);return this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const Gn=new Ri;const vr=new L;class ia{constructor(e=new bn,t=new bn,n=new bn,r=new bn,s=new bn,o=new bn){this.planes=[e,t,n,r,s,o]}set(e,t,n,r,s,o){const a=this.planes;a[0].copy(e);a[1].copy(t);a[2].copy(n);a[3].copy(r);a[4].copy(s);a[5].copy(o);return this}copy(e){const t=this.planes;for(let n=0;n<6;n++){t[n].copy(e.planes[n])}return this}setFromProjectionMatrix(e,t=_n){const n=this.planes;const r=e.elements;const s=r[0],o=r[1],a=r[2],l=r[3];const c=r[4],u=r[5],d=r[6],f=r[7];const m=r[8],_=r[9],x=r[10],p=r[11];const h=r[12],T=r[13],v=r[14],R=r[15];n[0].setComponents(l-s,f-c,p-m,R-h).normalize();n[1].setComponents(l+s,f+c,p+m,R+h).normalize();n[2].setComponents(l+o,f+u,p+_,R+T).normalize();n[3].setComponents(l-o,f-u,p-_,R-T).normalize();n[4].setComponents(l-a,f-d,p-x,R-v).normalize();if(t===_n){n[5].setComponents(l+a,f+d,p+x,R+v).normalize()}else if(t===Br){n[5].setComponents(a,d,x,v).normalize()}else{throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t)}return this}intersectsObject(e){if(e.boundingSphere!==void 0){if(e.boundingSphere===null)e.computeBoundingSphere();Gn.copy(e.boundingSphere).applyMatrix4(e.matrixWorld)}else{const t=e.geometry;if(t.boundingSphere===null)t.computeBoundingSphere();Gn.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(Gn)}intersectsSprite(e){Gn.center.set(0,0,0);Gn.radius=.7071067811865476;Gn.applyMatrix4(e.matrixWorld);return this.intersectsSphere(Gn)}intersectsSphere(e){const t=this.planes;const n=e.center;const r=-e.radius;for(let s=0;s<6;s++){const o=t[s].distanceToPoint(n);if(o<r){return false}}return true}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const r=t[n];vr.x=r.normal.x>0?e.max.x:e.min.x;vr.y=r.normal.y>0?e.max.y:e.min.y;vr.z=r.normal.z>0?e.max.z:e.min.z;if(r.distanceToPoint(vr)<0){return false}}return true}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++){if(t[n].distanceToPoint(e)<0){return false}}return true}clone(){return new this.constructor().copy(this)}}function Ul(){let i=null;let e=false;let t=null;let n=null;function r(s,o){t(s,o);n=i.requestAnimationFrame(r)}return{start:function(){if(e===true)return;if(t===null)return;n=i.requestAnimationFrame(r);e=true},stop:function(){i.cancelAnimationFrame(n);e=false},setAnimationLoop:function(s){t=s},setContext:function(s){i=s}}}function Hu(i,e){const t=e.isWebGL2;const n=new WeakMap;function r(c,u){const d=c.array;const f=c.usage;const m=d.byteLength;const _=i.createBuffer();i.bindBuffer(u,_);i.bufferData(u,d,f);c.onUploadCallback();let x;if(d instanceof Float32Array){x=i.FLOAT}else if(d instanceof Uint16Array){if(c.isFloat16BufferAttribute){if(t){x=i.HALF_FLOAT}else{throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.")}}else{x=i.UNSIGNED_SHORT}}else if(d instanceof Int16Array){x=i.SHORT}else if(d instanceof Uint32Array){x=i.UNSIGNED_INT}else if(d instanceof Int32Array){x=i.INT}else if(d instanceof Int8Array){x=i.BYTE}else if(d instanceof Uint8Array){x=i.UNSIGNED_BYTE}else if(d instanceof Uint8ClampedArray){x=i.UNSIGNED_BYTE}else{throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+d)}return{buffer:_,type:x,bytesPerElement:d.BYTES_PER_ELEMENT,version:c.version,size:m}}function s(c,u,d){const f=u.array;const m=u._updateRange;const _=u.updateRanges;i.bindBuffer(d,c);if(m.count===-1&&_.length===0){i.bufferSubData(d,0,f)}if(_.length!==0){for(let x=0,p=_.length;x<p;x++){const h=_[x];if(t){i.bufferSubData(d,h.start*f.BYTES_PER_ELEMENT,f,h.start,h.count)}else{i.bufferSubData(d,h.start*f.BYTES_PER_ELEMENT,f.subarray(h.start,h.start+h.count))}}u.clearUpdateRanges()}if(m.count!==-1){if(t){i.bufferSubData(d,m.offset*f.BYTES_PER_ELEMENT,f,m.offset,m.count)}else{i.bufferSubData(d,m.offset*f.BYTES_PER_ELEMENT,f.subarray(m.offset,m.offset+m.count))}m.count=-1}u.onUploadCallback()}function o(c){if(c.isInterleavedBufferAttribute)c=c.data;return n.get(c)}function a(c){if(c.isInterleavedBufferAttribute)c=c.data;const u=n.get(c);if(u){i.deleteBuffer(u.buffer);n.delete(c)}}function l(c,u){if(c.isGLBufferAttribute){const f=n.get(c);if(!f||f.version<c.version){n.set(c,{buffer:c.buffer,type:c.type,bytesPerElement:c.elementSize,version:c.version})}return}if(c.isInterleavedBufferAttribute)c=c.data;const d=n.get(c);if(d===void 0){n.set(c,r(c,u))}else if(d.version<c.version){if(d.size!==c.array.byteLength){throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.")}s(d.buffer,c,u);d.version=c.version}}return{get:o,remove:a,update:l}}class Xr extends zt{constructor(e=1,t=1,n=1,r=1){super();this.type="PlaneGeometry";this.parameters={width:e,height:t,widthSegments:n,heightSegments:r};const s=e/2;const o=t/2;const a=Math.floor(n);const l=Math.floor(r);const c=a+1;const u=l+1;const d=e/a;const f=t/l;const m=[];const _=[];const x=[];const p=[];for(let h=0;h<u;h++){const T=h*f-o;for(let v=0;v<c;v++){const R=v*d-s;_.push(R,-T,0);x.push(0,0,1);p.push(v/a);p.push(1-h/l)}}for(let h=0;h<l;h++){for(let T=0;T<a;T++){const v=T+c*h;const R=T+c*(h+1);const D=T+1+c*(h+1);const C=T+1+c*h;m.push(v,R,C);m.push(R,D,C)}}this.setIndex(m);this.setAttribute("position",new Tt(_,3));this.setAttribute("normal",new Tt(x,3));this.setAttribute("uv",new Tt(p,2))}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}static fromJSON(e){return new Xr(e.width,e.height,e.widthSegments,e.heightSegments)}}var Gu="#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";var Vu="#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";var ku="#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";var Wu="#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";var Xu="#ifdef USE_ALPHATEST\n	if ( diffuseColor.a < alphaTest ) discard;\n#endif";var Yu="#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";var qu="#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";var ju="#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";var Ku="#ifdef USE_BATCHING\n	attribute float batchId;\n	uniform highp sampler2D batchingTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";var Zu="#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif";var $u="vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";var Ju="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";var Qu="float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";var eh="#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";var th="#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";var nh="#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";var ih="#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var rh="#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";var sh="#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";var ah="#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";var oh="#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";var lh="#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";var ch="#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";var uh="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n	return dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";var hh="#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";var dh="vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";var fh="#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";var ph="#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";var mh="#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var gh="#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";var _h="gl_FragColor = linearToOutputTexel( gl_FragColor );";var vh="\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n	vec3( 0.8224621, 0.177538, 0.0 ),\n	vec3( 0.0331941, 0.9668058, 0.0 ),\n	vec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n	vec3( 1.2249401, - 0.2249404, 0.0 ),\n	vec3( - 0.0420569, 1.0420571, 0.0 ),\n	vec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return sRGBTransferOETF( value );\n}";var xh="#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";var Mh="#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";var Sh="#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";var Eh="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";var yh="#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";var Th="#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";var bh="#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";var Ah="#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var wh="#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";var Rh="#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";var Ch="#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n	reflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";var Lh="#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";var Ph="LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";var Dh="varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";var Uh="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	#if defined ( LEGACY_LIGHTS )\n		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n		}\n		return 1.0;\n	#else\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		if ( cutoffDistance > 0.0 ) {\n			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		}\n		return distanceFalloff;\n	#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";var Ih="#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";var Nh="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var Oh="varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";var Fh="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var Bh="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";var zh="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";var Hh="struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var Gh="\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var Vh="#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";var kh="#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";var Wh="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var Xh="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";var Yh="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";var qh="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";var jh="#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";var Kh="#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";var Zh="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var $h="#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";var Jh="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";var Qh="#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";var ed="#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";var td="#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n	#endif\n#endif";var nd="#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n		uniform sampler2DArray morphTargetsTexture;\n		uniform ivec2 morphTargetsTextureSize;\n		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n			int y = texelIndex / morphTargetsTextureSize.x;\n			int x = texelIndex - y * morphTargetsTextureSize.x;\n			ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n			return texelFetch( morphTargetsTexture, morphUV, 0 );\n		}\n	#else\n		#ifndef USE_MORPHNORMALS\n			uniform float morphTargetInfluences[ 8 ];\n		#else\n			uniform float morphTargetInfluences[ 4 ];\n		#endif\n	#endif\n#endif";var id="#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	#ifdef MORPHTARGETS_TEXTURE\n		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n		}\n	#else\n		transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n		transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n		transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n		transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n		#ifndef USE_MORPHNORMALS\n			transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n			transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n			transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n			transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n		#endif\n	#endif\n#endif";var rd="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;";var sd="#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var ad="#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";var od="#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";var ld="#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";var cd="#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";var ud="#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif";var hd="#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";var dd="#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";var fd="#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";var pd="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";var md="vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n	return packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";var gd="#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";var _d="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var vd="#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var xd="#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";var Md="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";var Sd="#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";var Ed="#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";var yd="#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";var Td="#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";var bd="float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";var Ad="#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var wd="#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";var Rd="#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var Cd="#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";var Ld="float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";var Pd="#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";var Dd="#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var Ud="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color *= toneMappingExposure;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	return color;\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var Id="#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";var Nd="#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n		vec3 refractedRayExit = position + transmissionRay;\n		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n		vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n		refractionCoords += 1.0;\n		refractionCoords /= 2.0;\n		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";var Od="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";var Fd="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";var Bd="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";var zd="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";const Hd="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";const Gd="uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const Vd="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";const kd="#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const Wd="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";const Xd="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const Yd="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";const qd="#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";const jd="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";const Kd="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";const Zd="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";const $d="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";const Jd="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";const Qd="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";const ef="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";const tf="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const nf="#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const rf="#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const sf="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";const af="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const of="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";const lf="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";const cf="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const uf="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const hf="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";const df="#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const ff="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const pf="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";const mf="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";const gf="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";const _f="#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";const vf="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";const xf="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";const Mf="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";const Oe={alphahash_fragment:Gu,alphahash_pars_fragment:Vu,alphamap_fragment:ku,alphamap_pars_fragment:Wu,alphatest_fragment:Xu,alphatest_pars_fragment:Yu,aomap_fragment:qu,aomap_pars_fragment:ju,batching_pars_vertex:Ku,batching_vertex:Zu,begin_vertex:$u,beginnormal_vertex:Ju,bsdfs:Qu,iridescence_fragment:eh,bumpmap_pars_fragment:th,clipping_planes_fragment:nh,clipping_planes_pars_fragment:ih,clipping_planes_pars_vertex:rh,clipping_planes_vertex:sh,color_fragment:ah,color_pars_fragment:oh,color_pars_vertex:lh,color_vertex:ch,common:uh,cube_uv_reflection_fragment:hh,defaultnormal_vertex:dh,displacementmap_pars_vertex:fh,displacementmap_vertex:ph,emissivemap_fragment:mh,emissivemap_pars_fragment:gh,colorspace_fragment:_h,colorspace_pars_fragment:vh,envmap_fragment:xh,envmap_common_pars_fragment:Mh,envmap_pars_fragment:Sh,envmap_pars_vertex:Eh,envmap_physical_pars_fragment:Ih,envmap_vertex:yh,fog_vertex:Th,fog_pars_vertex:bh,fog_fragment:Ah,fog_pars_fragment:wh,gradientmap_pars_fragment:Rh,lightmap_fragment:Ch,lightmap_pars_fragment:Lh,lights_lambert_fragment:Ph,lights_lambert_pars_fragment:Dh,lights_pars_begin:Uh,lights_toon_fragment:Nh,lights_toon_pars_fragment:Oh,lights_phong_fragment:Fh,lights_phong_pars_fragment:Bh,lights_physical_fragment:zh,lights_physical_pars_fragment:Hh,lights_fragment_begin:Gh,lights_fragment_maps:Vh,lights_fragment_end:kh,logdepthbuf_fragment:Wh,logdepthbuf_pars_fragment:Xh,logdepthbuf_pars_vertex:Yh,logdepthbuf_vertex:qh,map_fragment:jh,map_pars_fragment:Kh,map_particle_fragment:Zh,map_particle_pars_fragment:$h,metalnessmap_fragment:Jh,metalnessmap_pars_fragment:Qh,morphcolor_vertex:ed,morphnormal_vertex:td,morphtarget_pars_vertex:nd,morphtarget_vertex:id,normal_fragment_begin:rd,normal_fragment_maps:sd,normal_pars_fragment:ad,normal_pars_vertex:od,normal_vertex:ld,normalmap_pars_fragment:cd,clearcoat_normal_fragment_begin:ud,clearcoat_normal_fragment_maps:hd,clearcoat_pars_fragment:dd,iridescence_pars_fragment:fd,opaque_fragment:pd,packing:md,premultiplied_alpha_fragment:gd,project_vertex:_d,dithering_fragment:vd,dithering_pars_fragment:xd,roughnessmap_fragment:Md,roughnessmap_pars_fragment:Sd,shadowmap_pars_fragment:Ed,shadowmap_pars_vertex:yd,shadowmap_vertex:Td,shadowmask_pars_fragment:bd,skinbase_vertex:Ad,skinning_pars_vertex:wd,skinning_vertex:Rd,skinnormal_vertex:Cd,specularmap_fragment:Ld,specularmap_pars_fragment:Pd,tonemapping_fragment:Dd,tonemapping_pars_fragment:Ud,transmission_fragment:Id,transmission_pars_fragment:Nd,uv_pars_fragment:Od,uv_pars_vertex:Fd,uv_vertex:Bd,worldpos_vertex:zd,background_vert:Hd,background_frag:Gd,backgroundCube_vert:Vd,backgroundCube_frag:kd,cube_vert:Wd,cube_frag:Xd,depth_vert:Yd,depth_frag:qd,distanceRGBA_vert:jd,distanceRGBA_frag:Kd,equirect_vert:Zd,equirect_frag:$d,linedashed_vert:Jd,linedashed_frag:Qd,meshbasic_vert:ef,meshbasic_frag:tf,meshlambert_vert:nf,meshlambert_frag:rf,meshmatcap_vert:sf,meshmatcap_frag:af,meshnormal_vert:of,meshnormal_frag:lf,meshphong_vert:cf,meshphong_frag:uf,meshphysical_vert:hf,meshphysical_frag:df,meshtoon_vert:ff,meshtoon_frag:pf,points_vert:mf,points_frag:gf,shadow_vert:_f,shadow_frag:vf,sprite_vert:xf,sprite_frag:Mf};const ae={common:{diffuse:{value:new Ye(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Ge},alphaMap:{value:null},alphaMapTransform:{value:new Ge},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Ge}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Ge}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Ge}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Ge},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Ge},normalScale:{value:new Pe(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Ge},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Ge}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Ge}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Ge}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ye(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ye(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Ge},alphaTest:{value:0},uvTransform:{value:new Ge}},sprite:{diffuse:{value:new Ye(16777215)},opacity:{value:1},center:{value:new Pe(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Ge},alphaMap:{value:null},alphaMapTransform:{value:new Ge},alphaTest:{value:0}}};const Lt={basic:{uniforms:Rt([ae.common,ae.specularmap,ae.envmap,ae.aomap,ae.lightmap,ae.fog]),vertexShader:Oe.meshbasic_vert,fragmentShader:Oe.meshbasic_frag},lambert:{uniforms:Rt([ae.common,ae.specularmap,ae.envmap,ae.aomap,ae.lightmap,ae.emissivemap,ae.bumpmap,ae.normalmap,ae.displacementmap,ae.fog,ae.lights,{emissive:{value:new Ye(0)}}]),vertexShader:Oe.meshlambert_vert,fragmentShader:Oe.meshlambert_frag},phong:{uniforms:Rt([ae.common,ae.specularmap,ae.envmap,ae.aomap,ae.lightmap,ae.emissivemap,ae.bumpmap,ae.normalmap,ae.displacementmap,ae.fog,ae.lights,{emissive:{value:new Ye(0)},specular:{value:new Ye(1118481)},shininess:{value:30}}]),vertexShader:Oe.meshphong_vert,fragmentShader:Oe.meshphong_frag},standard:{uniforms:Rt([ae.common,ae.envmap,ae.aomap,ae.lightmap,ae.emissivemap,ae.bumpmap,ae.normalmap,ae.displacementmap,ae.roughnessmap,ae.metalnessmap,ae.fog,ae.lights,{emissive:{value:new Ye(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Oe.meshphysical_vert,fragmentShader:Oe.meshphysical_frag},toon:{uniforms:Rt([ae.common,ae.aomap,ae.lightmap,ae.emissivemap,ae.bumpmap,ae.normalmap,ae.displacementmap,ae.gradientmap,ae.fog,ae.lights,{emissive:{value:new Ye(0)}}]),vertexShader:Oe.meshtoon_vert,fragmentShader:Oe.meshtoon_frag},matcap:{uniforms:Rt([ae.common,ae.bumpmap,ae.normalmap,ae.displacementmap,ae.fog,{matcap:{value:null}}]),vertexShader:Oe.meshmatcap_vert,fragmentShader:Oe.meshmatcap_frag},points:{uniforms:Rt([ae.points,ae.fog]),vertexShader:Oe.points_vert,fragmentShader:Oe.points_frag},dashed:{uniforms:Rt([ae.common,ae.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Oe.linedashed_vert,fragmentShader:Oe.linedashed_frag},depth:{uniforms:Rt([ae.common,ae.displacementmap]),vertexShader:Oe.depth_vert,fragmentShader:Oe.depth_frag},normal:{uniforms:Rt([ae.common,ae.bumpmap,ae.normalmap,ae.displacementmap,{opacity:{value:1}}]),vertexShader:Oe.meshnormal_vert,fragmentShader:Oe.meshnormal_frag},sprite:{uniforms:Rt([ae.sprite,ae.fog]),vertexShader:Oe.sprite_vert,fragmentShader:Oe.sprite_frag},background:{uniforms:{uvTransform:{value:new Ge},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Oe.background_vert,fragmentShader:Oe.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:Oe.backgroundCube_vert,fragmentShader:Oe.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Oe.cube_vert,fragmentShader:Oe.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Oe.equirect_vert,fragmentShader:Oe.equirect_frag},distanceRGBA:{uniforms:Rt([ae.common,ae.displacementmap,{referencePosition:{value:new L},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Oe.distanceRGBA_vert,fragmentShader:Oe.distanceRGBA_frag},shadow:{uniforms:Rt([ae.lights,ae.fog,{color:{value:new Ye(0)},opacity:{value:1}}]),vertexShader:Oe.shadow_vert,fragmentShader:Oe.shadow_frag}};Lt.physical={uniforms:Rt([Lt.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Ge},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Ge},clearcoatNormalScale:{value:new Pe(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Ge},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Ge},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Ge},sheen:{value:0},sheenColor:{value:new Ye(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Ge},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Ge},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Ge},transmissionSamplerSize:{value:new Pe},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Ge},attenuationDistance:{value:0},attenuationColor:{value:new Ye(0)},specularColor:{value:new Ye(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Ge},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Ge},anisotropyVector:{value:new Pe},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Ge}}]),vertexShader:Oe.meshphysical_vert,fragmentShader:Oe.meshphysical_frag};const xr={r:0,b:0,g:0};function Sf(i,e,t,n,r,s,o){const a=new Ye(0);let l=s===true?0:1;let c;let u;let d=null;let f=0;let m=null;function _(p,h){let T=false;let v=h.isScene===true?h.background:null;if(v&&v.isTexture){const D=h.backgroundBlurriness>0;v=(D?t:e).get(v)}if(v===null){x(a,l)}else if(v&&v.isColor){x(v,1);T=true}const R=i.xr.getEnvironmentBlendMode();if(R==="additive"){n.buffers.color.setClear(0,0,0,1,o)}else if(R==="alpha-blend"){n.buffers.color.setClear(0,0,0,0,o)}if(i.autoClear||T){i.clear(i.autoClearColor,i.autoClearDepth,i.autoClearStencil)}if(v&&(v.isCubeTexture||v.mapping===Vr)){if(u===void 0){u=new an(new Ki(1,1,1),new In({name:"BackgroundCubeMaterial",uniforms:wi(Lt.backgroundCube.uniforms),vertexShader:Lt.backgroundCube.vertexShader,fragmentShader:Lt.backgroundCube.fragmentShader,side:Pt,depthTest:false,depthWrite:false,fog:false}));u.geometry.deleteAttribute("normal");u.geometry.deleteAttribute("uv");u.onBeforeRender=function(D,C,A){this.matrixWorld.copyPosition(A.matrixWorld)};Object.defineProperty(u.material,"envMap",{get:function(){return this.uniforms.envMap.value}});r.update(u)}u.material.uniforms.envMap.value=v;u.material.uniforms.flipEnvMap.value=v.isCubeTexture&&v.isRenderTargetTexture===false?-1:1;u.material.uniforms.backgroundBlurriness.value=h.backgroundBlurriness;u.material.uniforms.backgroundIntensity.value=h.backgroundIntensity;u.material.toneMapped=$e.getTransfer(v.colorSpace)!==et;if(d!==v||f!==v.version||m!==i.toneMapping){u.material.needsUpdate=true;d=v;f=v.version;m=i.toneMapping}u.layers.enableAll();p.unshift(u,u.geometry,u.material,0,0,null)}else if(v&&v.isTexture){if(c===void 0){c=new an(new Xr(2,2),new In({name:"BackgroundMaterial",uniforms:wi(Lt.background.uniforms),vertexShader:Lt.background.vertexShader,fragmentShader:Lt.background.fragmentShader,side:Un,depthTest:false,depthWrite:false,fog:false}));c.geometry.deleteAttribute("normal");Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}});r.update(c)}c.material.uniforms.t2D.value=v;c.material.uniforms.backgroundIntensity.value=h.backgroundIntensity;c.material.toneMapped=$e.getTransfer(v.colorSpace)!==et;if(v.matrixAutoUpdate===true){v.updateMatrix()}c.material.uniforms.uvTransform.value.copy(v.matrix);if(d!==v||f!==v.version||m!==i.toneMapping){c.material.needsUpdate=true;d=v;f=v.version;m=i.toneMapping}c.layers.enableAll();p.unshift(c,c.geometry,c.material,0,0,null)}}function x(p,h){p.getRGB(xr,Ll(i));n.buffers.color.setClear(xr.r,xr.g,xr.b,h,o)}return{getClearColor:function(){return a},setClearColor:function(p,h=1){a.set(p);l=h;x(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(p){l=p;x(a,l)},render:_}}function Ef(i,e,t,n){const r=i.getParameter(i.MAX_VERTEX_ATTRIBS);const s=n.isWebGL2?null:e.get("OES_vertex_array_object");const o=n.isWebGL2||s!==null;const a={};const l=p(null);let c=l;let u=false;function d(P,F,V,Y,W){let k=false;if(o){const Q=x(Y,V,F);if(c!==Q){c=Q;m(c.object)}k=h(P,Y,V,W);if(k)T(P,Y,V,W)}else{const Q=F.wireframe===true;if(c.geometry!==Y.id||c.program!==V.id||c.wireframe!==Q){c.geometry=Y.id;c.program=V.id;c.wireframe=Q;k=true}}if(W!==null){t.update(W,i.ELEMENT_ARRAY_BUFFER)}if(k||u){u=false;X(P,F,V,Y);if(W!==null){i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,t.get(W).buffer)}}}function f(){if(n.isWebGL2)return i.createVertexArray();return s.createVertexArrayOES()}function m(P){if(n.isWebGL2)return i.bindVertexArray(P);return s.bindVertexArrayOES(P)}function _(P){if(n.isWebGL2)return i.deleteVertexArray(P);return s.deleteVertexArrayOES(P)}function x(P,F,V){const Y=V.wireframe===true;let W=a[P.id];if(W===void 0){W={};a[P.id]=W}let k=W[F.id];if(k===void 0){k={};W[F.id]=k}let Q=k[Y];if(Q===void 0){Q=p(f());k[Y]=Q}return Q}function p(P){const F=[];const V=[];const Y=[];for(let W=0;W<r;W++){F[W]=0;V[W]=0;Y[W]=0}return{geometry:null,program:null,wireframe:false,newAttributes:F,enabledAttributes:V,attributeDivisors:Y,object:P,attributes:{},index:null}}function h(P,F,V,Y){const W=c.attributes;const k=F.attributes;let Q=0;const ne=V.getAttributes();for(const de in ne){const G=ne[de];if(G.location>=0){const K=W[de];let he=k[de];if(he===void 0){if(de==="instanceMatrix"&&P.instanceMatrix)he=P.instanceMatrix;if(de==="instanceColor"&&P.instanceColor)he=P.instanceColor}if(K===void 0)return true;if(K.attribute!==he)return true;if(he&&K.data!==he.data)return true;Q++}}if(c.attributesNum!==Q)return true;if(c.index!==Y)return true;return false}function T(P,F,V,Y){const W={};const k=F.attributes;let Q=0;const ne=V.getAttributes();for(const de in ne){const G=ne[de];if(G.location>=0){let K=k[de];if(K===void 0){if(de==="instanceMatrix"&&P.instanceMatrix)K=P.instanceMatrix;if(de==="instanceColor"&&P.instanceColor)K=P.instanceColor}const he={};he.attribute=K;if(K&&K.data){he.data=K.data}W[de]=he;Q++}}c.attributes=W;c.attributesNum=Q;c.index=Y}function v(){const P=c.newAttributes;for(let F=0,V=P.length;F<V;F++){P[F]=0}}function R(P){D(P,0)}function D(P,F){const V=c.newAttributes;const Y=c.enabledAttributes;const W=c.attributeDivisors;V[P]=1;if(Y[P]===0){i.enableVertexAttribArray(P);Y[P]=1}if(W[P]!==F){const k=n.isWebGL2?i:e.get("ANGLE_instanced_arrays");k[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](P,F);W[P]=F}}function C(){const P=c.newAttributes;const F=c.enabledAttributes;for(let V=0,Y=F.length;V<Y;V++){if(F[V]!==P[V]){i.disableVertexAttribArray(V);F[V]=0}}}function A(P,F,V,Y,W,k,Q){if(Q===true){i.vertexAttribIPointer(P,F,V,W,k)}else{i.vertexAttribPointer(P,F,V,Y,W,k)}}function X(P,F,V,Y){if(n.isWebGL2===false&&(P.isInstancedMesh||Y.isInstancedBufferGeometry)){if(e.get("ANGLE_instanced_arrays")===null)return}v();const W=Y.attributes;const k=V.getAttributes();const Q=F.defaultAttributeValues;for(const ne in k){const de=k[ne];if(de.location>=0){let G=W[ne];if(G===void 0){if(ne==="instanceMatrix"&&P.instanceMatrix)G=P.instanceMatrix;if(ne==="instanceColor"&&P.instanceColor)G=P.instanceColor}if(G!==void 0){const K=G.normalized;const he=G.itemSize;const xe=t.get(G);if(xe===void 0)continue;const _e=xe.buffer;const Ce=xe.type;const Le=xe.bytesPerElement;const Ae=n.isWebGL2===true&&(Ce===i.INT||Ce===i.UNSIGNED_INT||G.gpuType===ul);if(G.isInterleavedBufferAttribute){const ke=G.data;const I=ke.stride;const ht=G.offset;if(ke.isInstancedInterleavedBuffer){for(let Ee=0;Ee<de.locationSize;Ee++){D(de.location+Ee,ke.meshPerAttribute)}if(P.isInstancedMesh!==true&&Y._maxInstanceCount===void 0){Y._maxInstanceCount=ke.meshPerAttribute*ke.count}}else{for(let Ee=0;Ee<de.locationSize;Ee++){R(de.location+Ee)}}i.bindBuffer(i.ARRAY_BUFFER,_e);for(let Ee=0;Ee<de.locationSize;Ee++){A(de.location+Ee,he/de.locationSize,Ce,K,I*Le,(ht+he/de.locationSize*Ee)*Le,Ae)}}else{if(G.isInstancedBufferAttribute){for(let ke=0;ke<de.locationSize;ke++){D(de.location+ke,G.meshPerAttribute)}if(P.isInstancedMesh!==true&&Y._maxInstanceCount===void 0){Y._maxInstanceCount=G.meshPerAttribute*G.count}}else{for(let ke=0;ke<de.locationSize;ke++){R(de.location+ke)}}i.bindBuffer(i.ARRAY_BUFFER,_e);for(let ke=0;ke<de.locationSize;ke++){A(de.location+ke,he/de.locationSize,Ce,K,he*Le,he/de.locationSize*ke*Le,Ae)}}}else if(Q!==void 0){const K=Q[ne];if(K!==void 0){switch(K.length){case 2:i.vertexAttrib2fv(de.location,K);break;case 3:i.vertexAttrib3fv(de.location,K);break;case 4:i.vertexAttrib4fv(de.location,K);break;default:i.vertexAttrib1fv(de.location,K)}}}}}C()}function E(){j();for(const P in a){const F=a[P];for(const V in F){const Y=F[V];for(const W in Y){_(Y[W].object);delete Y[W]}delete F[V]}delete a[P]}}function y(P){if(a[P.id]===void 0)return;const F=a[P.id];for(const V in F){const Y=F[V];for(const W in Y){_(Y[W].object);delete Y[W]}delete F[V]}delete a[P.id]}function H(P){for(const F in a){const V=a[F];if(V[P.id]===void 0)continue;const Y=V[P.id];for(const W in Y){_(Y[W].object);delete Y[W]}delete V[P.id]}}function j(){ce();u=true;if(c===l)return;c=l;m(c.object)}function ce(){l.geometry=null;l.program=null;l.wireframe=false}return{setup:d,reset:j,resetDefaultState:ce,dispose:E,releaseStatesOfGeometry:y,releaseStatesOfProgram:H,initAttributes:v,enableAttribute:R,disableUnusedAttributes:C}}function yf(i,e,t,n){const r=n.isWebGL2;let s;function o(u){s=u}function a(u,d){i.drawArrays(s,u,d);t.update(d,s,1)}function l(u,d,f){if(f===0)return;let m,_;if(r){m=i;_="drawArraysInstanced"}else{m=e.get("ANGLE_instanced_arrays");_="drawArraysInstancedANGLE";if(m===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}m[_](s,u,d,f);t.update(d,s,f)}function c(u,d,f){if(f===0)return;const m=e.get("WEBGL_multi_draw");if(m===null){for(let _=0;_<f;_++){this.render(u[_],d[_])}}else{m.multiDrawArraysWEBGL(s,u,0,d,0,f);let _=0;for(let x=0;x<f;x++){_+=d[x]}t.update(_,s,1)}}this.setMode=o;this.render=a;this.renderInstances=l;this.renderMultiDraw=c}function Tf(i,e,t){let n;function r(){if(n!==void 0)return n;if(e.has("EXT_texture_filter_anisotropic")===true){const A=e.get("EXT_texture_filter_anisotropic");n=i.getParameter(A.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else{n=0}return n}function s(A){if(A==="highp"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.HIGH_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.HIGH_FLOAT).precision>0){return"highp"}A="mediump"}if(A==="mediump"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.MEDIUM_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.MEDIUM_FLOAT).precision>0){return"mediump"}}return"lowp"}const o=typeof WebGL2RenderingContext!=="undefined"&&i.constructor.name==="WebGL2RenderingContext";let a=t.precision!==void 0?t.precision:"highp";const l=s(a);if(l!==a){console.warn("THREE.WebGLRenderer:",a,"not supported, using",l,"instead.");a=l}const c=o||e.has("WEBGL_draw_buffers");const u=t.logarithmicDepthBuffer===true;const d=i.getParameter(i.MAX_TEXTURE_IMAGE_UNITS);const f=i.getParameter(i.MAX_VERTEX_TEXTURE_IMAGE_UNITS);const m=i.getParameter(i.MAX_TEXTURE_SIZE);const _=i.getParameter(i.MAX_CUBE_MAP_TEXTURE_SIZE);const x=i.getParameter(i.MAX_VERTEX_ATTRIBS);const p=i.getParameter(i.MAX_VERTEX_UNIFORM_VECTORS);const h=i.getParameter(i.MAX_VARYING_VECTORS);const T=i.getParameter(i.MAX_FRAGMENT_UNIFORM_VECTORS);const v=f>0;const R=o||e.has("OES_texture_float");const D=v&&R;const C=o?i.getParameter(i.MAX_SAMPLES):0;return{isWebGL2:o,drawBuffers:c,getMaxAnisotropy:r,getMaxPrecision:s,precision:a,logarithmicDepthBuffer:u,maxTextures:d,maxVertexTextures:f,maxTextureSize:m,maxCubemapSize:_,maxAttributes:x,maxVertexUniforms:p,maxVaryings:h,maxFragmentUniforms:T,vertexTextures:v,floatFragmentTextures:R,floatVertexTextures:D,maxSamples:C}}function bf(i){const e=this;let t=null,n=0,r=false,s=false;const o=new bn,a=new Ge,l={value:null,needsUpdate:false};this.uniform=l;this.numPlanes=0;this.numIntersection=0;this.init=function(d,f){const m=d.length!==0||f||n!==0||r;r=f;n=d.length;return m};this.beginShadows=function(){s=true;u(null)};this.endShadows=function(){s=false};this.setGlobalState=function(d,f){t=u(d,f,0)};this.setState=function(d,f,m){const _=d.clippingPlanes,x=d.clipIntersection,p=d.clipShadows;const h=i.get(d);if(!r||_===null||_.length===0||s&&!p){if(s){u(null)}else{c()}}else{const T=s?0:n,v=T*4;let R=h.clippingState||null;l.value=R;R=u(_,f,v,m);for(let D=0;D!==v;++D){R[D]=t[D]}h.clippingState=R;this.numIntersection=x?this.numPlanes:0;this.numPlanes+=T}};function c(){if(l.value!==t){l.value=t;l.needsUpdate=n>0}e.numPlanes=n;e.numIntersection=0}function u(d,f,m,_){const x=d!==null?d.length:0;let p=null;if(x!==0){p=l.value;if(_!==true||p===null){const h=m+x*4,T=f.matrixWorldInverse;a.getNormalMatrix(T);if(p===null||p.length<h){p=new Float32Array(h)}for(let v=0,R=m;v!==x;++v,R+=4){o.copy(d[v]).applyMatrix4(T,a);o.normal.toArray(p,R);p[R+3]=o.constant}}l.value=p;l.needsUpdate=true}e.numPlanes=x;e.numIntersection=0;return p}}function Af(i){let e=new WeakMap;function t(o,a){if(a===Bs){o.mapping=Ti}else if(a===zs){o.mapping=bi}return o}function n(o){if(o&&o.isTexture){const a=o.mapping;if(a===Bs||a===zs){if(e.has(o)){const l=e.get(o).texture;return t(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const c=new Fu(l.height/2);c.fromEquirectangularTexture(i,o);e.set(o,c);o.addEventListener("dispose",r);return t(c.texture,o.mapping)}else{return null}}}}return o}function r(o){const a=o.target;a.removeEventListener("dispose",r);const l=e.get(a);if(l!==void 0){e.delete(a);l.dispose()}}function s(){e=new WeakMap}return{get:n,dispose:s}}class Il extends Pl{constructor(e=-1,t=1,n=1,r=-1,s=.1,o=2e3){super();this.isOrthographicCamera=true;this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=e;this.right=t;this.top=n;this.bottom=r;this.near=s;this.far=o;this.updateProjectionMatrix()}copy(e,t){super.copy(e,t);this.left=e.left;this.right=e.right;this.top=e.top;this.bottom=e.bottom;this.near=e.near;this.far=e.far;this.zoom=e.zoom;this.view=e.view===null?null:Object.assign({},e.view);return this}setViewOffset(e,t,n,r,s,o){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=e;this.view.fullHeight=t;this.view.offsetX=n;this.view.offsetY=r;this.view.width=s;this.view.height=o;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom);const t=(this.top-this.bottom)/(2*this.zoom);const n=(this.right+this.left)/2;const r=(this.top+this.bottom)/2;let s=n-e;let o=n+e;let a=r+t;let l=r-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom;const u=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX;o=s+c*this.view.width;a-=u*this.view.offsetY;l=a-u*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);t.object.zoom=this.zoom;t.object.left=this.left;t.object.right=this.right;t.object.top=this.top;t.object.bottom=this.bottom;t.object.near=this.near;t.object.far=this.far;if(this.view!==null)t.object.view=Object.assign({},this.view);return t}}const xi=4;const _o=[.125,.215,.35,.446,.526,.582];const Wn=20;const Ts=new Il;const vo=new Ye;let bs=null;let As=0;let ws=0;const Vn=(1+Math.sqrt(5))/2;const vi=1/Vn;const xo=[new L(1,1,1),new L(-1,1,1),new L(1,1,-1),new L(-1,1,-1),new L(0,Vn,vi),new L(0,Vn,-vi),new L(vi,0,Vn),new L(-vi,0,Vn),new L(Vn,vi,0),new L(-Vn,vi,0)];class Mo{constructor(e){this._renderer=e;this._pingPongRenderTarget=null;this._lodMax=0;this._cubeSize=0;this._lodPlanes=[];this._sizeLods=[];this._sigmas=[];this._blurMaterial=null;this._cubemapMaterial=null;this._equirectMaterial=null;this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,r=100){bs=this._renderer.getRenderTarget();As=this._renderer.getActiveCubeFace();ws=this._renderer.getActiveMipmapLevel();this._setSize(256);const s=this._allocateTargets();s.depthBuffer=true;this._sceneToCubeUV(e,n,r,s);if(t>0){this._blur(s,0,0,t)}this._applyPMREM(s);this._cleanup(s);return s}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){if(this._cubemapMaterial===null){this._cubemapMaterial=yo();this._compileMaterial(this._cubemapMaterial)}}compileEquirectangularShader(){if(this._equirectMaterial===null){this._equirectMaterial=Eo();this._compileMaterial(this._equirectMaterial)}}dispose(){this._dispose();if(this._cubemapMaterial!==null)this._cubemapMaterial.dispose();if(this._equirectMaterial!==null)this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e));this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){if(this._blurMaterial!==null)this._blurMaterial.dispose();if(this._pingPongRenderTarget!==null)this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++){this._lodPlanes[e].dispose()}}_cleanup(e){this._renderer.setRenderTarget(bs,As,ws);e.scissorTest=false;Mr(e,0,0,e.width,e.height)}_fromTexture(e,t){if(e.mapping===Ti||e.mapping===bi){this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width)}else{this._setSize(e.image.width/4)}bs=this._renderer.getRenderTarget();As=this._renderer.getActiveCubeFace();ws=this._renderer.getActiveMipmapLevel();const n=t||this._allocateTargets();this._textureToCubeUV(e,n);this._applyPMREM(n);this._cleanup(n);return n}_allocateTargets(){const e=3*Math.max(this._cubeSize,16*7);const t=4*this._cubeSize;const n={magFilter:Vt,minFilter:Vt,generateMipmaps:false,type:ki,format:Kt,colorSpace:xn,depthBuffer:false};const r=So(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){if(this._pingPongRenderTarget!==null){this._dispose()}this._pingPongRenderTarget=So(e,t,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=wf(s));this._blurMaterial=Rf(s,e,t)}return r}_compileMaterial(e){const t=new an(this._lodPlanes[0],e);this._renderer.compile(t,Ts)}_sceneToCubeUV(e,t,n,r){const s=90;const o=1;const a=new kt(s,o,t,n);const l=[1,-1,1,1,1,1];const c=[1,1,1,-1,-1,-1];const u=this._renderer;const d=u.autoClear;const f=u.toneMapping;u.getClearColor(vo);u.toneMapping=Ln;u.autoClear=false;const m=new wl({name:"PMREM.Background",side:Pt,depthWrite:false,depthTest:false});const _=new an(new Ki,m);let x=false;const p=e.background;if(p){if(p.isColor){m.color.copy(p);e.background=null;x=true}}else{m.color.copy(vo);x=true}for(let h=0;h<6;h++){const T=h%3;if(T===0){a.up.set(0,l[h],0);a.lookAt(c[h],0,0)}else if(T===1){a.up.set(0,0,l[h]);a.lookAt(0,c[h],0)}else{a.up.set(0,l[h],0);a.lookAt(0,0,c[h])}const v=this._cubeSize;Mr(r,T*v,h>2?v:0,v,v);u.setRenderTarget(r);if(x){u.render(_,a)}u.render(e,a)}_.geometry.dispose();_.material.dispose();u.toneMapping=f;u.autoClear=d;e.background=p}_textureToCubeUV(e,t){const n=this._renderer;const r=e.mapping===Ti||e.mapping===bi;if(r){if(this._cubemapMaterial===null){this._cubemapMaterial=yo()}this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===false?-1:1}else{if(this._equirectMaterial===null){this._equirectMaterial=Eo()}}const s=r?this._cubemapMaterial:this._equirectMaterial;const o=new an(this._lodPlanes[0],s);const a=s.uniforms;a["envMap"].value=e;const l=this._cubeSize;Mr(t,0,0,3*l,2*l);n.setRenderTarget(t);n.render(o,Ts)}_applyPMREM(e){const t=this._renderer;const n=t.autoClear;t.autoClear=false;for(let r=1;r<this._lodPlanes.length;r++){const s=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]);const o=xo[(r-1)%xo.length];this._blur(e,r-1,r,s,o)}t.autoClear=n}_blur(e,t,n,r,s){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,n,r,"latitudinal",s);this._halfBlur(o,e,n,n,r,"longitudinal",s)}_halfBlur(e,t,n,r,s,o,a){const l=this._renderer;const c=this._blurMaterial;if(o!=="latitudinal"&&o!=="longitudinal"){console.error("blur direction must be either latitudinal or longitudinal!")}const u=3;const d=new an(this._lodPlanes[r],c);const f=c.uniforms;const m=this._sizeLods[n]-1;const _=isFinite(s)?Math.PI/(2*m):2*Math.PI/(2*Wn-1);const x=s/_;const p=isFinite(s)?1+Math.floor(u*x):Wn;if(p>Wn){console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${p} samples when the maximum is set to ${Wn}`)}const h=[];let T=0;for(let A=0;A<Wn;++A){const X=A/x;const E=Math.exp(-X*X/2);h.push(E);if(A===0){T+=E}else if(A<p){T+=2*E}}for(let A=0;A<h.length;A++){h[A]=h[A]/T}f["envMap"].value=e.texture;f["samples"].value=p;f["weights"].value=h;f["latitudinal"].value=o==="latitudinal";if(a){f["poleAxis"].value=a}const{_lodMax:v}=this;f["dTheta"].value=_;f["mipInt"].value=v-n;const R=this._sizeLods[r];const D=3*R*(r>v-xi?r-v+xi:0);const C=4*(this._cubeSize-R);Mr(t,D,C,3*R,2*R);l.setRenderTarget(t);l.render(d,Ts)}}function wf(i){const e=[];const t=[];const n=[];let r=i;const s=i-xi+1+_o.length;for(let o=0;o<s;o++){const a=Math.pow(2,r);t.push(a);let l=1/a;if(o>i-xi){l=_o[o-i+xi-1]}else if(o===0){l=0}n.push(l);const c=1/(a-2);const u=-c;const d=1+c;const f=[u,u,d,u,d,d,u,u,d,d,u,d];const m=6;const _=6;const x=3;const p=2;const h=1;const T=new Float32Array(x*_*m);const v=new Float32Array(p*_*m);const R=new Float32Array(h*_*m);for(let C=0;C<m;C++){const A=C%3*2/3-1;const X=C>2?0:-1;const E=[A,X,0,A+2/3,X,0,A+2/3,X+1,0,A,X,0,A+2/3,X+1,0,A,X+1,0];T.set(E,x*_*C);v.set(f,p*_*C);const y=[C,C,C,C,C,C];R.set(y,h*_*C)}const D=new zt;D.setAttribute("position",new Zt(T,x));D.setAttribute("uv",new Zt(v,p));D.setAttribute("faceIndex",new Zt(R,h));e.push(D);if(r>xi){r--}}return{lodPlanes:e,sizeLods:t,sigmas:n}}function So(i,e,t){const n=new Zn(i,e,t);n.texture.mapping=Vr;n.texture.name="PMREM.cubeUv";n.scissorTest=true;return n}function Mr(i,e,t,n,r){i.viewport.set(e,t,n,r);i.scissor.set(e,t,n,r)}function Rf(i,e,t){const n=new Float32Array(Wn);const r=new L(0,1,0);const s=new In({name:"SphericalGaussianBlur",defines:{"n":Wn,"CUBEUV_TEXEL_WIDTH":1/e,"CUBEUV_TEXEL_HEIGHT":1/t,"CUBEUV_MAX_MIP":`${i}.0`},uniforms:{"envMap":{value:null},"samples":{value:1},"weights":{value:n},"latitudinal":{value:false},"dTheta":{value:0},"mipInt":{value:0},"poleAxis":{value:r}},vertexShader:ra(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Cn,depthTest:false,depthWrite:false});return s}function Eo(){return new In({name:"EquirectangularToCubeUV",uniforms:{"envMap":{value:null}},vertexShader:ra(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Cn,depthTest:false,depthWrite:false})}function yo(){return new In({name:"CubemapToCubeUV",uniforms:{"envMap":{value:null},"flipEnvMap":{value:-1}},vertexShader:ra(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Cn,depthTest:false,depthWrite:false})}function ra(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function Cf(i){let e=new WeakMap;let t=null;function n(a){if(a&&a.isTexture){const l=a.mapping;const c=l===Bs||l===zs;const u=l===Ti||l===bi;if(c||u){if(a.isRenderTargetTexture&&a.needsPMREMUpdate===true){a.needsPMREMUpdate=false;let d=e.get(a);if(t===null)t=new Mo(i);d=c?t.fromEquirectangular(a,d):t.fromCubemap(a,d);e.set(a,d);return d.texture}else{if(e.has(a)){return e.get(a).texture}else{const d=a.image;if(c&&d&&d.height>0||u&&d&&r(d)){if(t===null)t=new Mo(i);const f=c?t.fromEquirectangular(a):t.fromCubemap(a);e.set(a,f);a.addEventListener("dispose",s);return f.texture}else{return null}}}}}return a}function r(a){let l=0;const c=6;for(let u=0;u<c;u++){if(a[u]!==void 0)l++}return l===c}function s(a){const l=a.target;l.removeEventListener("dispose",s);const c=e.get(l);if(c!==void 0){e.delete(l);c.dispose()}}function o(){e=new WeakMap;if(t!==null){t.dispose();t=null}}return{get:n,dispose:o}}function Lf(i){const e={};function t(n){if(e[n]!==void 0){return e[n]}let r;switch(n){case"WEBGL_depth_texture":r=i.getExtension("WEBGL_depth_texture")||i.getExtension("MOZ_WEBGL_depth_texture")||i.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=i.getExtension("EXT_texture_filter_anisotropic")||i.getExtension("MOZ_EXT_texture_filter_anisotropic")||i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=i.getExtension("WEBGL_compressed_texture_s3tc")||i.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=i.getExtension("WEBGL_compressed_texture_pvrtc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=i.getExtension(n)}e[n]=r;return r}return{has:function(n){return t(n)!==null},init:function(n){if(n.isWebGL2){t("EXT_color_buffer_float");t("WEBGL_clip_cull_distance")}else{t("WEBGL_depth_texture");t("OES_texture_float");t("OES_texture_half_float");t("OES_texture_half_float_linear");t("OES_standard_derivatives");t("OES_element_index_uint");t("OES_vertex_array_object");t("ANGLE_instanced_arrays")}t("OES_texture_float_linear");t("EXT_color_buffer_half_float");t("WEBGL_multisampled_render_to_texture")},get:function(n){const r=t(n);if(r===null){console.warn("THREE.WebGLRenderer: "+n+" extension not supported.")}return r}}}function Pf(i,e,t,n){const r={};const s=new WeakMap;function o(d){const f=d.target;if(f.index!==null){e.remove(f.index)}for(const _ in f.attributes){e.remove(f.attributes[_])}for(const _ in f.morphAttributes){const x=f.morphAttributes[_];for(let p=0,h=x.length;p<h;p++){e.remove(x[p])}}f.removeEventListener("dispose",o);delete r[f.id];const m=s.get(f);if(m){e.remove(m);s.delete(f)}n.releaseStatesOfGeometry(f);if(f.isInstancedBufferGeometry===true){delete f._maxInstanceCount}t.memory.geometries--}function a(d,f){if(r[f.id]===true)return f;f.addEventListener("dispose",o);r[f.id]=true;t.memory.geometries++;return f}function l(d){const f=d.attributes;for(const _ in f){e.update(f[_],i.ARRAY_BUFFER)}const m=d.morphAttributes;for(const _ in m){const x=m[_];for(let p=0,h=x.length;p<h;p++){e.update(x[p],i.ARRAY_BUFFER)}}}function c(d){const f=[];const m=d.index;const _=d.attributes.position;let x=0;if(m!==null){const T=m.array;x=m.version;for(let v=0,R=T.length;v<R;v+=3){const D=T[v+0];const C=T[v+1];const A=T[v+2];f.push(D,C,C,A,A,D)}}else if(_!==void 0){const T=_.array;x=_.version;for(let v=0,R=T.length/3-1;v<R;v+=3){const D=v+0;const C=v+1;const A=v+2;f.push(D,C,C,A,A,D)}}else{return}const p=new(Sl(f)?Cl:Rl)(f,1);p.version=x;const h=s.get(d);if(h)e.remove(h);s.set(d,p)}function u(d){const f=s.get(d);if(f){const m=d.index;if(m!==null){if(f.version<m.version){c(d)}}}else{c(d)}return s.get(d)}return{get:a,update:l,getWireframeAttribute:u}}function Df(i,e,t,n){const r=n.isWebGL2;let s;function o(m){s=m}let a,l;function c(m){a=m.type;l=m.bytesPerElement}function u(m,_){i.drawElements(s,_,a,m*l);t.update(_,s,1)}function d(m,_,x){if(x===0)return;let p,h;if(r){p=i;h="drawElementsInstanced"}else{p=e.get("ANGLE_instanced_arrays");h="drawElementsInstancedANGLE";if(p===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}p[h](s,_,a,m*l,x);t.update(_,s,x)}function f(m,_,x){if(x===0)return;const p=e.get("WEBGL_multi_draw");if(p===null){for(let h=0;h<x;h++){this.render(m[h]/l,_[h])}}else{p.multiDrawElementsWEBGL(s,_,0,a,m,0,x);let h=0;for(let T=0;T<x;T++){h+=_[T]}t.update(h,s,1)}}this.setMode=o;this.setIndex=c;this.render=u;this.renderInstances=d;this.renderMultiDraw=f}function Uf(i){const e={geometries:0,textures:0};const t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,o,a){t.calls++;switch(o){case i.TRIANGLES:t.triangles+=a*(s/3);break;case i.LINES:t.lines+=a*(s/2);break;case i.LINE_STRIP:t.lines+=a*(s-1);break;case i.LINE_LOOP:t.lines+=a*s;break;case i.POINTS:t.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function r(){t.calls=0;t.triangles=0;t.points=0;t.lines=0}return{memory:e,render:t,programs:null,autoReset:true,reset:r,update:n}}function If(i,e){return i[0]-e[0]}function Nf(i,e){return Math.abs(e[1])-Math.abs(i[1])}function Of(i,e,t){const n={};const r=new Float32Array(8);const s=new WeakMap;const o=new it;const a=[];for(let c=0;c<8;c++){a[c]=[c,0]}function l(c,u,d){const f=c.morphTargetInfluences;if(e.isWebGL2===true){const m=u.morphAttributes.position||u.morphAttributes.normal||u.morphAttributes.color;const _=m!==void 0?m.length:0;let x=s.get(u);if(x===void 0||x.count!==_){let P=function(){j.dispose();s.delete(u);u.removeEventListener("dispose",P)};if(x!==void 0)x.texture.dispose();const T=u.morphAttributes.position!==void 0;const v=u.morphAttributes.normal!==void 0;const R=u.morphAttributes.color!==void 0;const D=u.morphAttributes.position||[];const C=u.morphAttributes.normal||[];const A=u.morphAttributes.color||[];let X=0;if(T===true)X=1;if(v===true)X=2;if(R===true)X=3;let E=u.attributes.position.count*X;let y=1;if(E>e.maxTextureSize){y=Math.ceil(E/e.maxTextureSize);E=e.maxTextureSize}const H=new Float32Array(E*y*4*_);const j=new Tl(H,E,y,_);j.type=wn;j.needsUpdate=true;const ce=X*4;for(let F=0;F<_;F++){const V=D[F];const Y=C[F];const W=A[F];const k=E*y*4*F;for(let Q=0;Q<V.count;Q++){const ne=Q*ce;if(T===true){o.fromBufferAttribute(V,Q);H[k+ne+0]=o.x;H[k+ne+1]=o.y;H[k+ne+2]=o.z;H[k+ne+3]=0}if(v===true){o.fromBufferAttribute(Y,Q);H[k+ne+4]=o.x;H[k+ne+5]=o.y;H[k+ne+6]=o.z;H[k+ne+7]=0}if(R===true){o.fromBufferAttribute(W,Q);H[k+ne+8]=o.x;H[k+ne+9]=o.y;H[k+ne+10]=o.z;H[k+ne+11]=W.itemSize===4?o.w:1}}}x={count:_,texture:j,size:new Pe(E,y)};s.set(u,x);u.addEventListener("dispose",P)}let p=0;for(let T=0;T<f.length;T++){p+=f[T]}const h=u.morphTargetsRelative?1:1-p;d.getUniforms().setValue(i,"morphTargetBaseInfluence",h);d.getUniforms().setValue(i,"morphTargetInfluences",f);d.getUniforms().setValue(i,"morphTargetsTexture",x.texture,t);d.getUniforms().setValue(i,"morphTargetsTextureSize",x.size)}else{const m=f===void 0?0:f.length;let _=n[u.id];if(_===void 0||_.length!==m){_=[];for(let v=0;v<m;v++){_[v]=[v,0]}n[u.id]=_}for(let v=0;v<m;v++){const R=_[v];R[0]=v;R[1]=f[v]}_.sort(Nf);for(let v=0;v<8;v++){if(v<m&&_[v][1]){a[v][0]=_[v][0];a[v][1]=_[v][1]}else{a[v][0]=Number.MAX_SAFE_INTEGER;a[v][1]=0}}a.sort(If);const x=u.morphAttributes.position;const p=u.morphAttributes.normal;let h=0;for(let v=0;v<8;v++){const R=a[v];const D=R[0];const C=R[1];if(D!==Number.MAX_SAFE_INTEGER&&C){if(x&&u.getAttribute("morphTarget"+v)!==x[D]){u.setAttribute("morphTarget"+v,x[D])}if(p&&u.getAttribute("morphNormal"+v)!==p[D]){u.setAttribute("morphNormal"+v,p[D])}r[v]=C;h+=C}else{if(x&&u.hasAttribute("morphTarget"+v)===true){u.deleteAttribute("morphTarget"+v)}if(p&&u.hasAttribute("morphNormal"+v)===true){u.deleteAttribute("morphNormal"+v)}r[v]=0}}const T=u.morphTargetsRelative?1:1-h;d.getUniforms().setValue(i,"morphTargetBaseInfluence",T);d.getUniforms().setValue(i,"morphTargetInfluences",r)}}return{update:l}}function Ff(i,e,t,n){let r=new WeakMap;function s(l){const c=n.render.frame;const u=l.geometry;const d=e.get(l,u);if(r.get(d)!==c){e.update(d);r.set(d,c)}if(l.isInstancedMesh){if(l.hasEventListener("dispose",a)===false){l.addEventListener("dispose",a)}if(r.get(l)!==c){t.update(l.instanceMatrix,i.ARRAY_BUFFER);if(l.instanceColor!==null){t.update(l.instanceColor,i.ARRAY_BUFFER)}r.set(l,c)}}if(l.isSkinnedMesh){const f=l.skeleton;if(r.get(f)!==c){f.update();r.set(f,c)}}return d}function o(){r=new WeakMap}function a(l){const c=l.target;c.removeEventListener("dispose",a);t.remove(c.instanceMatrix);if(c.instanceColor!==null)t.remove(c.instanceColor)}return{update:s,dispose:o}}class Nl extends Dt{constructor(e,t,n,r,s,o,a,l,c,u){u=u!==void 0?u:qn;if(u!==qn&&u!==Ai){throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat")}if(n===void 0&&u===qn)n=An;if(n===void 0&&u===Ai)n=Yn;super(null,r,s,o,a,l,u,n,c);this.isDepthTexture=true;this.image={width:e,height:t};this.magFilter=a!==void 0?a:Ct;this.minFilter=l!==void 0?l:Ct;this.flipY=false;this.generateMipmaps=false;this.compareFunction=null}copy(e){super.copy(e);this.compareFunction=e.compareFunction;return this}toJSON(e){const t=super.toJSON(e);if(this.compareFunction!==null)t.compareFunction=this.compareFunction;return t}}const Ol=new Dt;const Fl=new Nl(1,1);Fl.compareFunction=xl;const Bl=new Tl;const zl=new Su;const Hl=new Dl;const To=[];const bo=[];const Ao=new Float32Array(16);const wo=new Float32Array(9);const Ro=new Float32Array(4);function Li(i,e,t){const n=i[0];if(n<=0||n>0)return i;const r=e*t;let s=To[r];if(s===void 0){s=new Float32Array(r);To[r]=s}if(e!==0){n.toArray(s,0);for(let o=1,a=0;o!==e;++o){a+=t;i[o].toArray(s,a)}}return s}function ct(i,e){if(i.length!==e.length)return false;for(let t=0,n=i.length;t<n;t++){if(i[t]!==e[t])return false}return true}function ut(i,e){for(let t=0,n=e.length;t<n;t++){i[t]=e[t]}}function Yr(i,e){let t=bo[e];if(t===void 0){t=new Int32Array(e);bo[e]=t}for(let n=0;n!==e;++n){t[n]=i.allocateTextureUnit()}return t}function Bf(i,e){const t=this.cache;if(t[0]===e)return;i.uniform1f(this.addr,e);t[0]=e}function zf(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y){i.uniform2f(this.addr,e.x,e.y);t[0]=e.x;t[1]=e.y}}else{if(ct(t,e))return;i.uniform2fv(this.addr,e);ut(t,e)}}function Hf(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z){i.uniform3f(this.addr,e.x,e.y,e.z);t[0]=e.x;t[1]=e.y;t[2]=e.z}}else if(e.r!==void 0){if(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b){i.uniform3f(this.addr,e.r,e.g,e.b);t[0]=e.r;t[1]=e.g;t[2]=e.b}}else{if(ct(t,e))return;i.uniform3fv(this.addr,e);ut(t,e)}}function Gf(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w){i.uniform4f(this.addr,e.x,e.y,e.z,e.w);t[0]=e.x;t[1]=e.y;t[2]=e.z;t[3]=e.w}}else{if(ct(t,e))return;i.uniform4fv(this.addr,e);ut(t,e)}}function Vf(i,e){const t=this.cache;const n=e.elements;if(n===void 0){if(ct(t,e))return;i.uniformMatrix2fv(this.addr,false,e);ut(t,e)}else{if(ct(t,n))return;Ro.set(n);i.uniformMatrix2fv(this.addr,false,Ro);ut(t,n)}}function kf(i,e){const t=this.cache;const n=e.elements;if(n===void 0){if(ct(t,e))return;i.uniformMatrix3fv(this.addr,false,e);ut(t,e)}else{if(ct(t,n))return;wo.set(n);i.uniformMatrix3fv(this.addr,false,wo);ut(t,n)}}function Wf(i,e){const t=this.cache;const n=e.elements;if(n===void 0){if(ct(t,e))return;i.uniformMatrix4fv(this.addr,false,e);ut(t,e)}else{if(ct(t,n))return;Ao.set(n);i.uniformMatrix4fv(this.addr,false,Ao);ut(t,n)}}function Xf(i,e){const t=this.cache;if(t[0]===e)return;i.uniform1i(this.addr,e);t[0]=e}function Yf(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y){i.uniform2i(this.addr,e.x,e.y);t[0]=e.x;t[1]=e.y}}else{if(ct(t,e))return;i.uniform2iv(this.addr,e);ut(t,e)}}function qf(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z){i.uniform3i(this.addr,e.x,e.y,e.z);t[0]=e.x;t[1]=e.y;t[2]=e.z}}else{if(ct(t,e))return;i.uniform3iv(this.addr,e);ut(t,e)}}function jf(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w){i.uniform4i(this.addr,e.x,e.y,e.z,e.w);t[0]=e.x;t[1]=e.y;t[2]=e.z;t[3]=e.w}}else{if(ct(t,e))return;i.uniform4iv(this.addr,e);ut(t,e)}}function Kf(i,e){const t=this.cache;if(t[0]===e)return;i.uniform1ui(this.addr,e);t[0]=e}function Zf(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y){i.uniform2ui(this.addr,e.x,e.y);t[0]=e.x;t[1]=e.y}}else{if(ct(t,e))return;i.uniform2uiv(this.addr,e);ut(t,e)}}function $f(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z){i.uniform3ui(this.addr,e.x,e.y,e.z);t[0]=e.x;t[1]=e.y;t[2]=e.z}}else{if(ct(t,e))return;i.uniform3uiv(this.addr,e);ut(t,e)}}function Jf(i,e){const t=this.cache;if(e.x!==void 0){if(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w){i.uniform4ui(this.addr,e.x,e.y,e.z,e.w);t[0]=e.x;t[1]=e.y;t[2]=e.z;t[3]=e.w}}else{if(ct(t,e))return;i.uniform4uiv(this.addr,e);ut(t,e)}}function Qf(i,e,t){const n=this.cache;const r=t.allocateTextureUnit();if(n[0]!==r){i.uniform1i(this.addr,r);n[0]=r}const s=this.type===i.SAMPLER_2D_SHADOW?Fl:Ol;t.setTexture2D(e||s,r)}function ep(i,e,t){const n=this.cache;const r=t.allocateTextureUnit();if(n[0]!==r){i.uniform1i(this.addr,r);n[0]=r}t.setTexture3D(e||zl,r)}function tp(i,e,t){const n=this.cache;const r=t.allocateTextureUnit();if(n[0]!==r){i.uniform1i(this.addr,r);n[0]=r}t.setTextureCube(e||Hl,r)}function np(i,e,t){const n=this.cache;const r=t.allocateTextureUnit();if(n[0]!==r){i.uniform1i(this.addr,r);n[0]=r}t.setTexture2DArray(e||Bl,r)}function ip(i){switch(i){case 5126:return Bf;case 35664:return zf;case 35665:return Hf;case 35666:return Gf;case 35674:return Vf;case 35675:return kf;case 35676:return Wf;case 5124:case 35670:return Xf;case 35667:case 35671:return Yf;case 35668:case 35672:return qf;case 35669:case 35673:return jf;case 5125:return Kf;case 36294:return Zf;case 36295:return $f;case 36296:return Jf;case 35678:case 36198:case 36298:case 36306:case 35682:return Qf;case 35679:case 36299:case 36307:return ep;case 35680:case 36300:case 36308:case 36293:return tp;case 36289:case 36303:case 36311:case 36292:return np}}function rp(i,e){i.uniform1fv(this.addr,e)}function sp(i,e){const t=Li(e,this.size,2);i.uniform2fv(this.addr,t)}function ap(i,e){const t=Li(e,this.size,3);i.uniform3fv(this.addr,t)}function op(i,e){const t=Li(e,this.size,4);i.uniform4fv(this.addr,t)}function lp(i,e){const t=Li(e,this.size,4);i.uniformMatrix2fv(this.addr,false,t)}function cp(i,e){const t=Li(e,this.size,9);i.uniformMatrix3fv(this.addr,false,t)}function up(i,e){const t=Li(e,this.size,16);i.uniformMatrix4fv(this.addr,false,t)}function hp(i,e){i.uniform1iv(this.addr,e)}function dp(i,e){i.uniform2iv(this.addr,e)}function fp(i,e){i.uniform3iv(this.addr,e)}function pp(i,e){i.uniform4iv(this.addr,e)}function mp(i,e){i.uniform1uiv(this.addr,e)}function gp(i,e){i.uniform2uiv(this.addr,e)}function _p(i,e){i.uniform3uiv(this.addr,e)}function vp(i,e){i.uniform4uiv(this.addr,e)}function xp(i,e,t){const n=this.cache;const r=e.length;const s=Yr(t,r);if(!ct(n,s)){i.uniform1iv(this.addr,s);ut(n,s)}for(let o=0;o!==r;++o){t.setTexture2D(e[o]||Ol,s[o])}}function Mp(i,e,t){const n=this.cache;const r=e.length;const s=Yr(t,r);if(!ct(n,s)){i.uniform1iv(this.addr,s);ut(n,s)}for(let o=0;o!==r;++o){t.setTexture3D(e[o]||zl,s[o])}}function Sp(i,e,t){const n=this.cache;const r=e.length;const s=Yr(t,r);if(!ct(n,s)){i.uniform1iv(this.addr,s);ut(n,s)}for(let o=0;o!==r;++o){t.setTextureCube(e[o]||Hl,s[o])}}function Ep(i,e,t){const n=this.cache;const r=e.length;const s=Yr(t,r);if(!ct(n,s)){i.uniform1iv(this.addr,s);ut(n,s)}for(let o=0;o!==r;++o){t.setTexture2DArray(e[o]||Bl,s[o])}}function yp(i){switch(i){case 5126:return rp;case 35664:return sp;case 35665:return ap;case 35666:return op;case 35674:return lp;case 35675:return cp;case 35676:return up;case 5124:case 35670:return hp;case 35667:case 35671:return dp;case 35668:case 35672:return fp;case 35669:case 35673:return pp;case 5125:return mp;case 36294:return gp;case 36295:return _p;case 36296:return vp;case 35678:case 36198:case 36298:case 36306:case 35682:return xp;case 35679:case 36299:case 36307:return Mp;case 35680:case 36300:case 36308:case 36293:return Sp;case 36289:case 36303:case 36311:case 36292:return Ep}}class Tp{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.setValue=ip(t.type)}}class bp{constructor(e,t,n){this.id=e;this.addr=n;this.cache=[];this.type=t.type;this.size=t.size;this.setValue=yp(t.type)}}class Ap{constructor(e){this.id=e;this.seq=[];this.map={}}setValue(e,t,n){const r=this.seq;for(let s=0,o=r.length;s!==o;++s){const a=r[s];a.setValue(e,t[a.id],n)}}}const Rs=/(\w+)(\])?(\[|\.)?/g;function Co(i,e){i.seq.push(e);i.map[e.id]=e}function wp(i,e,t){const n=i.name,r=n.length;Rs.lastIndex=0;while(true){const s=Rs.exec(n),o=Rs.lastIndex;let a=s[1];const l=s[2]==="]",c=s[3];if(l)a=a|0;if(c===void 0||c==="["&&o+2===r){Co(t,c===void 0?new Tp(a,i,e):new bp(a,i,e));break}else{const u=t.map;let d=u[a];if(d===void 0){d=new Ap(a);Co(t,d)}t=d}}}class Pr{constructor(e,t){this.seq=[];this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let r=0;r<n;++r){const s=e.getActiveUniform(t,r),o=e.getUniformLocation(t,s.name);wp(s,o,this)}}setValue(e,t,n,r){const s=this.map[t];if(s!==void 0)s.setValue(e,n,r)}setOptional(e,t,n){const r=t[n];if(r!==void 0)this.setValue(e,n,r)}static upload(e,t,n,r){for(let s=0,o=t.length;s!==o;++s){const a=t[s],l=n[a.id];if(l.needsUpdate!==false){a.setValue(e,l.value,r)}}}static seqWithValue(e,t){const n=[];for(let r=0,s=e.length;r!==s;++r){const o=e[r];if(o.id in t)n.push(o)}return n}}function Lo(i,e,t){const n=i.createShader(e);i.shaderSource(n,t);i.compileShader(n);return n}const Rp=37297;let Cp=0;function Lp(i,e){const t=i.split("\n");const n=[];const r=Math.max(e-6,0);const s=Math.min(e+6,t.length);for(let o=r;o<s;o++){const a=o+1;n.push(`${a===e?">":" "} ${a}: ${t[o]}`)}return n.join("\n")}function Pp(i){const e=$e.getPrimaries($e.workingColorSpace);const t=$e.getPrimaries(i);let n;if(e===t){n=""}else if(e===Fr&&t===Or){n="LinearDisplayP3ToLinearSRGB"}else if(e===Or&&t===Fr){n="LinearSRGBToLinearDisplayP3"}switch(i){case xn:case kr:return[n,"LinearTransferOETF"];case pt:case Qs:return[n,"sRGBTransferOETF"];default:console.warn("THREE.WebGLProgram: Unsupported color space:",i);return[n,"LinearTransferOETF"]}}function Po(i,e,t){const n=i.getShaderParameter(e,i.COMPILE_STATUS);const r=i.getShaderInfoLog(e).trim();if(n&&r==="")return"";const s=/ERROR: 0:(\d+)/.exec(r);if(s){const o=parseInt(s[1]);return t.toUpperCase()+"\n\n"+r+"\n\n"+Lp(i.getShaderSource(e),o)}else{return r}}function Dp(i,e){const t=Pp(e);return`vec4 ${i}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`}function Up(i,e){let t;switch(e){case Pc:t="Linear";break;case Dc:t="Reinhard";break;case Uc:t="OptimizedCineon";break;case Ic:t="ACESFilmic";break;case Oc:t="AgX";break;case Nc:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e);t="Linear"}return"vec3 "+i+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function Ip(i){const e=[i.extensionDerivatives||!!i.envMapCubeUVHeight||i.bumpMap||i.normalMapTangentSpace||i.clearcoatNormalMap||i.flatShading||i.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(i.extensionFragDepth||i.logarithmicDepthBuffer)&&i.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",i.extensionDrawBuffers&&i.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(i.extensionShaderTextureLOD||i.envMap||i.transmission)&&i.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return e.filter(Mi).join("\n")}function Np(i){const e=[i.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":""];return e.filter(Mi).join("\n")}function Op(i){const e=[];for(const t in i){const n=i[t];if(n===false)continue;e.push("#define "+t+" "+n)}return e.join("\n")}function Fp(i,e){const t={};const n=i.getProgramParameter(e,i.ACTIVE_ATTRIBUTES);for(let r=0;r<n;r++){const s=i.getActiveAttrib(e,r);const o=s.name;let a=1;if(s.type===i.FLOAT_MAT2)a=2;if(s.type===i.FLOAT_MAT3)a=3;if(s.type===i.FLOAT_MAT4)a=4;t[o]={type:s.type,location:i.getAttribLocation(e,o),locationSize:a}}return t}function Mi(i){return i!==""}function Do(i,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return i.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Uo(i,e){return i.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Bp=/^[ \t]*#include +<([\w\d./]+)>/gm;function Xs(i){return i.replace(Bp,Hp)}const zp=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]);function Hp(i,e){let t=Oe[e];if(t===void 0){const n=zp.get(e);if(n!==void 0){t=Oe[n];console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n)}else{throw new Error("Can not resolve #include <"+e+">")}}return Xs(t)}const Gp=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Io(i){return i.replace(Gp,Vp)}function Vp(i,e,t,n){let r="";for(let s=parseInt(e);s<parseInt(t);s++){r+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s)}return r}function No(i){let e="precision "+i.precision+" float;\nprecision "+i.precision+" int;";if(i.precision==="highp"){e+="\n#define HIGH_PRECISION"}else if(i.precision==="mediump"){e+="\n#define MEDIUM_PRECISION"}else if(i.precision==="lowp"){e+="\n#define LOW_PRECISION"}return e}function kp(i){let e="SHADOWMAP_TYPE_BASIC";if(i.shadowMapType===ll){e="SHADOWMAP_TYPE_PCF"}else if(i.shadowMapType===sc){e="SHADOWMAP_TYPE_PCF_SOFT"}else if(i.shadowMapType===mn){e="SHADOWMAP_TYPE_VSM"}return e}function Wp(i){let e="ENVMAP_TYPE_CUBE";if(i.envMap){switch(i.envMapMode){case Ti:case bi:e="ENVMAP_TYPE_CUBE";break;case Vr:e="ENVMAP_TYPE_CUBE_UV";break}}return e}function Xp(i){let e="ENVMAP_MODE_REFLECTION";if(i.envMap){switch(i.envMapMode){case bi:e="ENVMAP_MODE_REFRACTION";break}}return e}function Yp(i){let e="ENVMAP_BLENDING_NONE";if(i.envMap){switch(i.combine){case $s:e="ENVMAP_BLENDING_MULTIPLY";break;case Cc:e="ENVMAP_BLENDING_MIX";break;case Lc:e="ENVMAP_BLENDING_ADD";break}}return e}function qp(i){const e=i.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2;const n=1/e;const r=1/(3*Math.max(Math.pow(2,t),7*16));return{texelWidth:r,texelHeight:n,maxMip:t}}function jp(i,e,t,n){const r=i.getContext();const s=t.defines;let o=t.vertexShader;let a=t.fragmentShader;const l=kp(t);const c=Wp(t);const u=Xp(t);const d=Yp(t);const f=qp(t);const m=t.isWebGL2?"":Ip(t);const _=Np(t);const x=Op(s);const p=r.createProgram();let h,T;let v=t.glslVersion?"#version "+t.glslVersion+"\n":"";if(t.isRawShaderMaterial){h=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,x].filter(Mi).join("\n");if(h.length>0){h+="\n"}T=[m,"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,x].filter(Mi).join("\n");if(T.length>0){T+="\n"}}else{h=[No(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,x,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+u:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===false?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===false?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(Mi).join("\n");T=[m,No(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,x,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.envMap?"#define "+u:"",t.envMap?"#define "+d:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===false?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==Ln?"#define TONE_MAPPING":"",t.toneMapping!==Ln?Oe["tonemapping_pars_fragment"]:"",t.toneMapping!==Ln?Up("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",Oe["colorspace_pars_fragment"],Dp("linearToOutputTexel",t.outputColorSpace),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"","\n"].filter(Mi).join("\n")}o=Xs(o);o=Do(o,t);o=Uo(o,t);a=Xs(a);a=Do(a,t);a=Uo(a,t);o=Io(o);a=Io(a);if(t.isWebGL2&&t.isRawShaderMaterial!==true){v="#version 300 es\n";h=[_,"precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+h;T=["precision mediump sampler2DArray;","#define varying in",t.glslVersion===Ja?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Ja?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+T}const R=v+h+o;const D=v+T+a;const C=Lo(r,r.VERTEX_SHADER,R);const A=Lo(r,r.FRAGMENT_SHADER,D);r.attachShader(p,C);r.attachShader(p,A);if(t.index0AttributeName!==void 0){r.bindAttribLocation(p,0,t.index0AttributeName)}else if(t.morphTargets===true){r.bindAttribLocation(p,0,"position")}r.linkProgram(p);function X(j){if(i.debug.checkShaderErrors){const ce=r.getProgramInfoLog(p).trim();const P=r.getShaderInfoLog(C).trim();const F=r.getShaderInfoLog(A).trim();let V=true;let Y=true;if(r.getProgramParameter(p,r.LINK_STATUS)===false){V=false;if(typeof i.debug.onShaderError==="function"){i.debug.onShaderError(r,p,C,A)}else{const W=Po(r,C,"vertex");const k=Po(r,A,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(p,r.VALIDATE_STATUS)+"\n\nProgram Info Log: "+ce+"\n"+W+"\n"+k)}}else if(ce!==""){console.warn("THREE.WebGLProgram: Program Info Log:",ce)}else if(P===""||F===""){Y=false}if(Y){j.diagnostics={runnable:V,programLog:ce,vertexShader:{log:P,prefix:h},fragmentShader:{log:F,prefix:T}}}}r.deleteShader(C);r.deleteShader(A);E=new Pr(r,p);y=Fp(r,p)}let E;this.getUniforms=function(){if(E===void 0){X(this)}return E};let y;this.getAttributes=function(){if(y===void 0){X(this)}return y};let H=t.rendererExtensionParallelShaderCompile===false;this.isReady=function(){if(H===false){H=r.getProgramParameter(p,Rp)}return H};this.destroy=function(){n.releaseStatesOfProgram(this);r.deleteProgram(p);this.program=void 0};this.type=t.shaderType;this.name=t.shaderName;this.id=Cp++;this.cacheKey=e;this.usedTimes=1;this.program=p;this.vertexShader=C;this.fragmentShader=A;return this}let Kp=0;class Zp{constructor(){this.shaderCache=new Map;this.materialCache=new Map}update(e){const t=e.vertexShader;const n=e.fragmentShader;const r=this._getShaderStage(t);const s=this._getShaderStage(n);const o=this._getShaderCacheForMaterial(e);if(o.has(r)===false){o.add(r);r.usedTimes++}if(o.has(s)===false){o.add(s);s.usedTimes++}return this}remove(e){const t=this.materialCache.get(e);for(const n of t){n.usedTimes--;if(n.usedTimes===0)this.shaderCache.delete(n.code)}this.materialCache.delete(e);return this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear();this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);if(n===void 0){n=new Set;t.set(e,n)}return n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);if(n===void 0){n=new $p(e);t.set(e,n)}return n}}class $p{constructor(e){this.id=Kp++;this.code=e;this.usedTimes=0}}function Jp(i,e,t,n,r,s,o){const a=new bl;const l=new Zp;const c=[];const u=r.isWebGL2;const d=r.logarithmicDepthBuffer;const f=r.vertexTextures;let m=r.precision;const _={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function x(E){if(E===0)return"uv";return`uv${E}`}function p(E,y,H,j,ce){const P=j.fog;const F=ce.geometry;const V=E.isMeshStandardMaterial?j.environment:null;const Y=(E.isMeshStandardMaterial?t:e).get(E.envMap||V);const W=!!Y&&Y.mapping===Vr?Y.image.height:null;const k=_[E.type];if(E.precision!==null){m=r.getMaxPrecision(E.precision);if(m!==E.precision){console.warn("THREE.WebGLProgram.getParameters:",E.precision,"not supported, using",m,"instead.")}}const Q=F.morphAttributes.position||F.morphAttributes.normal||F.morphAttributes.color;const ne=Q!==void 0?Q.length:0;let de=0;if(F.morphAttributes.position!==void 0)de=1;if(F.morphAttributes.normal!==void 0)de=2;if(F.morphAttributes.color!==void 0)de=3;let G,K;let he,xe;if(k){const bt=Lt[k];G=bt.vertexShader;K=bt.fragmentShader}else{G=E.vertexShader;K=E.fragmentShader;l.update(E);he=l.getVertexShaderID(E);xe=l.getFragmentShaderID(E)}const _e=i.getRenderTarget();const Ce=ce.isInstancedMesh===true;const Le=ce.isBatchedMesh===true;const Ae=!!E.map;const ke=!!E.matcap;const I=!!Y;const ht=!!E.aoMap;const Ee=!!E.lightMap;const Re=!!E.bumpMap;const me=!!E.normalMap;const Qe=!!E.displacementMap;const De=!!E.emissiveMap;const S=!!E.metalnessMap;const g=!!E.roughnessMap;const N=E.anisotropy>0;const te=E.clearcoat>0;const $=E.iridescence>0;const ee=E.sheen>0;const ge=E.transmission>0;const ue=N&&!!E.anisotropyMap;const pe=te&&!!E.clearcoatMap;const ye=te&&!!E.clearcoatNormalMap;const Ie=te&&!!E.clearcoatRoughnessMap;const Z=$&&!!E.iridescenceMap;const We=$&&!!E.iridescenceThicknessMap;const b=ee&&!!E.sheenColorMap;const q=ee&&!!E.sheenRoughnessMap;const le=!!E.specularMap;const ie=!!E.specularColorMap;const ve=!!E.specularIntensityMap;const ze=ge&&!!E.transmissionMap;const Xe=ge&&!!E.thicknessMap;const Fe=!!E.gradientMap;const oe=!!E.alphaMap;const w=E.alphaTest>0;const re=!!E.alphaHash;const se=!!E.extensions;const Te=!!F.attributes.uv1;const Me=!!F.attributes.uv2;const qe=!!F.attributes.uv3;let je=Ln;if(E.toneMapped){if(_e===null||_e.isXRRenderTarget===true){je=i.toneMapping}}const ot={isWebGL2:u,shaderID:k,shaderType:E.type,shaderName:E.name,vertexShader:G,fragmentShader:K,defines:E.defines,customVertexShaderID:he,customFragmentShaderID:xe,isRawShaderMaterial:E.isRawShaderMaterial===true,glslVersion:E.glslVersion,precision:m,batching:Le,instancing:Ce,instancingColor:Ce&&ce.instanceColor!==null,supportsVertexTextures:f,outputColorSpace:_e===null?i.outputColorSpace:_e.isXRRenderTarget===true?_e.texture.colorSpace:xn,map:Ae,matcap:ke,envMap:I,envMapMode:I&&Y.mapping,envMapCubeUVHeight:W,aoMap:ht,lightMap:Ee,bumpMap:Re,normalMap:me,displacementMap:f&&Qe,emissiveMap:De,normalMapObjectSpace:me&&E.normalMapType===jc,normalMapTangentSpace:me&&E.normalMapType===vl,metalnessMap:S,roughnessMap:g,anisotropy:N,anisotropyMap:ue,clearcoat:te,clearcoatMap:pe,clearcoatNormalMap:ye,clearcoatRoughnessMap:Ie,iridescence:$,iridescenceMap:Z,iridescenceThicknessMap:We,sheen:ee,sheenColorMap:b,sheenRoughnessMap:q,specularMap:le,specularColorMap:ie,specularIntensityMap:ve,transmission:ge,transmissionMap:ze,thicknessMap:Xe,gradientMap:Fe,opaque:E.transparent===false&&E.blending===Ei,alphaMap:oe,alphaTest:w,alphaHash:re,combine:E.combine,mapUv:Ae&&x(E.map.channel),aoMapUv:ht&&x(E.aoMap.channel),lightMapUv:Ee&&x(E.lightMap.channel),bumpMapUv:Re&&x(E.bumpMap.channel),normalMapUv:me&&x(E.normalMap.channel),displacementMapUv:Qe&&x(E.displacementMap.channel),emissiveMapUv:De&&x(E.emissiveMap.channel),metalnessMapUv:S&&x(E.metalnessMap.channel),roughnessMapUv:g&&x(E.roughnessMap.channel),anisotropyMapUv:ue&&x(E.anisotropyMap.channel),clearcoatMapUv:pe&&x(E.clearcoatMap.channel),clearcoatNormalMapUv:ye&&x(E.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:Ie&&x(E.clearcoatRoughnessMap.channel),iridescenceMapUv:Z&&x(E.iridescenceMap.channel),iridescenceThicknessMapUv:We&&x(E.iridescenceThicknessMap.channel),sheenColorMapUv:b&&x(E.sheenColorMap.channel),sheenRoughnessMapUv:q&&x(E.sheenRoughnessMap.channel),specularMapUv:le&&x(E.specularMap.channel),specularColorMapUv:ie&&x(E.specularColorMap.channel),specularIntensityMapUv:ve&&x(E.specularIntensityMap.channel),transmissionMapUv:ze&&x(E.transmissionMap.channel),thicknessMapUv:Xe&&x(E.thicknessMap.channel),alphaMapUv:oe&&x(E.alphaMap.channel),vertexTangents:!!F.attributes.tangent&&(me||N),vertexColors:E.vertexColors,vertexAlphas:E.vertexColors===true&&!!F.attributes.color&&F.attributes.color.itemSize===4,vertexUv1s:Te,vertexUv2s:Me,vertexUv3s:qe,pointsUvs:ce.isPoints===true&&!!F.attributes.uv&&(Ae||oe),fog:!!P,useFog:E.fog===true,fogExp2:P&&P.isFogExp2,flatShading:E.flatShading===true,sizeAttenuation:E.sizeAttenuation===true,logarithmicDepthBuffer:d,skinning:ce.isSkinnedMesh===true,morphTargets:F.morphAttributes.position!==void 0,morphNormals:F.morphAttributes.normal!==void 0,morphColors:F.morphAttributes.color!==void 0,morphTargetsCount:ne,morphTextureStride:de,numDirLights:y.directional.length,numPointLights:y.point.length,numSpotLights:y.spot.length,numSpotLightMaps:y.spotLightMap.length,numRectAreaLights:y.rectArea.length,numHemiLights:y.hemi.length,numDirLightShadows:y.directionalShadowMap.length,numPointLightShadows:y.pointShadowMap.length,numSpotLightShadows:y.spotShadowMap.length,numSpotLightShadowsWithMaps:y.numSpotLightShadowsWithMaps,numLightProbes:y.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:E.dithering,shadowMapEnabled:i.shadowMap.enabled&&H.length>0,shadowMapType:i.shadowMap.type,toneMapping:je,useLegacyLights:i._useLegacyLights,decodeVideoTexture:Ae&&E.map.isVideoTexture===true&&$e.getTransfer(E.map.colorSpace)===et,premultipliedAlpha:E.premultipliedAlpha,doubleSided:E.side===nn,flipSided:E.side===Pt,useDepthPacking:E.depthPacking>=0,depthPacking:E.depthPacking||0,index0AttributeName:E.index0AttributeName,extensionDerivatives:se&&E.extensions.derivatives===true,extensionFragDepth:se&&E.extensions.fragDepth===true,extensionDrawBuffers:se&&E.extensions.drawBuffers===true,extensionShaderTextureLOD:se&&E.extensions.shaderTextureLOD===true,extensionClipCullDistance:se&&E.extensions.clipCullDistance&&n.has("WEBGL_clip_cull_distance"),rendererExtensionFragDepth:u||n.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||n.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||n.has("EXT_shader_texture_lod"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:E.customProgramCacheKey()};return ot}function h(E){const y=[];if(E.shaderID){y.push(E.shaderID)}else{y.push(E.customVertexShaderID);y.push(E.customFragmentShaderID)}if(E.defines!==void 0){for(const H in E.defines){y.push(H);y.push(E.defines[H])}}if(E.isRawShaderMaterial===false){T(y,E);v(y,E);y.push(i.outputColorSpace)}y.push(E.customProgramCacheKey);return y.join()}function T(E,y){E.push(y.precision);E.push(y.outputColorSpace);E.push(y.envMapMode);E.push(y.envMapCubeUVHeight);E.push(y.mapUv);E.push(y.alphaMapUv);E.push(y.lightMapUv);E.push(y.aoMapUv);E.push(y.bumpMapUv);E.push(y.normalMapUv);E.push(y.displacementMapUv);E.push(y.emissiveMapUv);E.push(y.metalnessMapUv);E.push(y.roughnessMapUv);E.push(y.anisotropyMapUv);E.push(y.clearcoatMapUv);E.push(y.clearcoatNormalMapUv);E.push(y.clearcoatRoughnessMapUv);E.push(y.iridescenceMapUv);E.push(y.iridescenceThicknessMapUv);E.push(y.sheenColorMapUv);E.push(y.sheenRoughnessMapUv);E.push(y.specularMapUv);E.push(y.specularColorMapUv);E.push(y.specularIntensityMapUv);E.push(y.transmissionMapUv);E.push(y.thicknessMapUv);E.push(y.combine);E.push(y.fogExp2);E.push(y.sizeAttenuation);E.push(y.morphTargetsCount);E.push(y.morphAttributeCount);E.push(y.numDirLights);E.push(y.numPointLights);E.push(y.numSpotLights);E.push(y.numSpotLightMaps);E.push(y.numHemiLights);E.push(y.numRectAreaLights);E.push(y.numDirLightShadows);E.push(y.numPointLightShadows);E.push(y.numSpotLightShadows);E.push(y.numSpotLightShadowsWithMaps);E.push(y.numLightProbes);E.push(y.shadowMapType);E.push(y.toneMapping);E.push(y.numClippingPlanes);E.push(y.numClipIntersection);E.push(y.depthPacking)}function v(E,y){a.disableAll();if(y.isWebGL2)a.enable(0);if(y.supportsVertexTextures)a.enable(1);if(y.instancing)a.enable(2);if(y.instancingColor)a.enable(3);if(y.matcap)a.enable(4);if(y.envMap)a.enable(5);if(y.normalMapObjectSpace)a.enable(6);if(y.normalMapTangentSpace)a.enable(7);if(y.clearcoat)a.enable(8);if(y.iridescence)a.enable(9);if(y.alphaTest)a.enable(10);if(y.vertexColors)a.enable(11);if(y.vertexAlphas)a.enable(12);if(y.vertexUv1s)a.enable(13);if(y.vertexUv2s)a.enable(14);if(y.vertexUv3s)a.enable(15);if(y.vertexTangents)a.enable(16);if(y.anisotropy)a.enable(17);if(y.alphaHash)a.enable(18);if(y.batching)a.enable(19);E.push(a.mask);a.disableAll();if(y.fog)a.enable(0);if(y.useFog)a.enable(1);if(y.flatShading)a.enable(2);if(y.logarithmicDepthBuffer)a.enable(3);if(y.skinning)a.enable(4);if(y.morphTargets)a.enable(5);if(y.morphNormals)a.enable(6);if(y.morphColors)a.enable(7);if(y.premultipliedAlpha)a.enable(8);if(y.shadowMapEnabled)a.enable(9);if(y.useLegacyLights)a.enable(10);if(y.doubleSided)a.enable(11);if(y.flipSided)a.enable(12);if(y.useDepthPacking)a.enable(13);if(y.dithering)a.enable(14);if(y.transmission)a.enable(15);if(y.sheen)a.enable(16);if(y.opaque)a.enable(17);if(y.pointsUvs)a.enable(18);if(y.decodeVideoTexture)a.enable(19);E.push(a.mask)}function R(E){const y=_[E.type];let H;if(y){const j=Lt[y];H=na.clone(j.uniforms)}else{H=E.uniforms}return H}function D(E,y){let H;for(let j=0,ce=c.length;j<ce;j++){const P=c[j];if(P.cacheKey===y){H=P;++H.usedTimes;break}}if(H===void 0){H=new jp(i,y,E,s);c.push(H)}return H}function C(E){if(--E.usedTimes===0){const y=c.indexOf(E);c[y]=c[c.length-1];c.pop();E.destroy()}}function A(E){l.remove(E)}function X(){l.dispose()}return{getParameters:p,getProgramCacheKey:h,getUniforms:R,acquireProgram:D,releaseProgram:C,releaseShaderCache:A,programs:c,dispose:X}}function Qp(){let i=new WeakMap;function e(s){let o=i.get(s);if(o===void 0){o={};i.set(s,o)}return o}function t(s){i.delete(s)}function n(s,o,a){i.get(s)[o]=a}function r(){i=new WeakMap}return{get:e,remove:t,update:n,dispose:r}}function em(i,e){if(i.groupOrder!==e.groupOrder){return i.groupOrder-e.groupOrder}else if(i.renderOrder!==e.renderOrder){return i.renderOrder-e.renderOrder}else if(i.material.id!==e.material.id){return i.material.id-e.material.id}else if(i.z!==e.z){return i.z-e.z}else{return i.id-e.id}}function Oo(i,e){if(i.groupOrder!==e.groupOrder){return i.groupOrder-e.groupOrder}else if(i.renderOrder!==e.renderOrder){return i.renderOrder-e.renderOrder}else if(i.z!==e.z){return e.z-i.z}else{return i.id-e.id}}function Fo(){const i=[];let e=0;const t=[];const n=[];const r=[];function s(){e=0;t.length=0;n.length=0;r.length=0}function o(d,f,m,_,x,p){let h=i[e];if(h===void 0){h={id:d.id,object:d,geometry:f,material:m,groupOrder:_,renderOrder:d.renderOrder,z:x,group:p};i[e]=h}else{h.id=d.id;h.object=d;h.geometry=f;h.material=m;h.groupOrder=_;h.renderOrder=d.renderOrder;h.z=x;h.group=p}e++;return h}function a(d,f,m,_,x,p){const h=o(d,f,m,_,x,p);if(m.transmission>0){n.push(h)}else if(m.transparent===true){r.push(h)}else{t.push(h)}}function l(d,f,m,_,x,p){const h=o(d,f,m,_,x,p);if(m.transmission>0){n.unshift(h)}else if(m.transparent===true){r.unshift(h)}else{t.unshift(h)}}function c(d,f){if(t.length>1)t.sort(d||em);if(n.length>1)n.sort(f||Oo);if(r.length>1)r.sort(f||Oo)}function u(){for(let d=e,f=i.length;d<f;d++){const m=i[d];if(m.id===null)break;m.id=null;m.object=null;m.geometry=null;m.material=null;m.group=null}}return{opaque:t,transmissive:n,transparent:r,init:s,push:a,unshift:l,finish:u,sort:c}}function tm(){let i=new WeakMap;function e(n,r){const s=i.get(n);let o;if(s===void 0){o=new Fo;i.set(n,[o])}else{if(r>=s.length){o=new Fo;s.push(o)}else{o=s[r]}}return o}function t(){i=new WeakMap}return{get:e,dispose:t}}function nm(){const i={};return{get:function(e){if(i[e.id]!==void 0){return i[e.id]}let t;switch(e.type){case"DirectionalLight":t={direction:new L,color:new Ye};break;case"SpotLight":t={position:new L,direction:new L,color:new Ye,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new L,color:new Ye,distance:0,decay:0};break;case"HemisphereLight":t={direction:new L,skyColor:new Ye,groundColor:new Ye};break;case"RectAreaLight":t={color:new Ye,position:new L,halfWidth:new L,halfHeight:new L};break}i[e.id]=t;return t}}}function im(){const i={};return{get:function(e){if(i[e.id]!==void 0){return i[e.id]}let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Pe};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Pe};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Pe,shadowCameraNear:1,shadowCameraFar:1e3};break}i[e.id]=t;return t}}}let rm=0;function sm(i,e){return(e.castShadow?2:0)-(i.castShadow?2:0)+(e.map?1:0)-(i.map?1:0)}function am(i,e){const t=new nm;const n=im();const r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let u=0;u<9;u++)r.probe.push(new L);const s=new L;const o=new st;const a=new st;function l(u,d){let f=0,m=0,_=0;for(let j=0;j<9;j++)r.probe[j].set(0,0,0);let x=0;let p=0;let h=0;let T=0;let v=0;let R=0;let D=0;let C=0;let A=0;let X=0;let E=0;u.sort(sm);const y=d===true?Math.PI:1;for(let j=0,ce=u.length;j<ce;j++){const P=u[j];const F=P.color;const V=P.intensity;const Y=P.distance;const W=P.shadow&&P.shadow.map?P.shadow.map.texture:null;if(P.isAmbientLight){f+=F.r*V*y;m+=F.g*V*y;_+=F.b*V*y}else if(P.isLightProbe){for(let k=0;k<9;k++){r.probe[k].addScaledVector(P.sh.coefficients[k],V)}E++}else if(P.isDirectionalLight){const k=t.get(P);k.color.copy(P.color).multiplyScalar(P.intensity*y);if(P.castShadow){const Q=P.shadow;const ne=n.get(P);ne.shadowBias=Q.bias;ne.shadowNormalBias=Q.normalBias;ne.shadowRadius=Q.radius;ne.shadowMapSize=Q.mapSize;r.directionalShadow[x]=ne;r.directionalShadowMap[x]=W;r.directionalShadowMatrix[x]=P.shadow.matrix;R++}r.directional[x]=k;x++}else if(P.isSpotLight){const k=t.get(P);k.position.setFromMatrixPosition(P.matrixWorld);k.color.copy(F).multiplyScalar(V*y);k.distance=Y;k.coneCos=Math.cos(P.angle);k.penumbraCos=Math.cos(P.angle*(1-P.penumbra));k.decay=P.decay;r.spot[h]=k;const Q=P.shadow;if(P.map){r.spotLightMap[A]=P.map;A++;Q.updateMatrices(P);if(P.castShadow)X++}r.spotLightMatrix[h]=Q.matrix;if(P.castShadow){const ne=n.get(P);ne.shadowBias=Q.bias;ne.shadowNormalBias=Q.normalBias;ne.shadowRadius=Q.radius;ne.shadowMapSize=Q.mapSize;r.spotShadow[h]=ne;r.spotShadowMap[h]=W;C++}h++}else if(P.isRectAreaLight){const k=t.get(P);k.color.copy(F).multiplyScalar(V);k.halfWidth.set(P.width*.5,0,0);k.halfHeight.set(0,P.height*.5,0);r.rectArea[T]=k;T++}else if(P.isPointLight){const k=t.get(P);k.color.copy(P.color).multiplyScalar(P.intensity*y);k.distance=P.distance;k.decay=P.decay;if(P.castShadow){const Q=P.shadow;const ne=n.get(P);ne.shadowBias=Q.bias;ne.shadowNormalBias=Q.normalBias;ne.shadowRadius=Q.radius;ne.shadowMapSize=Q.mapSize;ne.shadowCameraNear=Q.camera.near;ne.shadowCameraFar=Q.camera.far;r.pointShadow[p]=ne;r.pointShadowMap[p]=W;r.pointShadowMatrix[p]=P.shadow.matrix;D++}r.point[p]=k;p++}else if(P.isHemisphereLight){const k=t.get(P);k.skyColor.copy(P.color).multiplyScalar(V*y);k.groundColor.copy(P.groundColor).multiplyScalar(V*y);r.hemi[v]=k;v++}}if(T>0){if(e.isWebGL2){if(i.has("OES_texture_float_linear")===true){r.rectAreaLTC1=ae.LTC_FLOAT_1;r.rectAreaLTC2=ae.LTC_FLOAT_2}else{r.rectAreaLTC1=ae.LTC_HALF_1;r.rectAreaLTC2=ae.LTC_HALF_2}}else{if(i.has("OES_texture_float_linear")===true){r.rectAreaLTC1=ae.LTC_FLOAT_1;r.rectAreaLTC2=ae.LTC_FLOAT_2}else if(i.has("OES_texture_half_float_linear")===true){r.rectAreaLTC1=ae.LTC_HALF_1;r.rectAreaLTC2=ae.LTC_HALF_2}else{console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")}}}r.ambient[0]=f;r.ambient[1]=m;r.ambient[2]=_;const H=r.hash;if(H.directionalLength!==x||H.pointLength!==p||H.spotLength!==h||H.rectAreaLength!==T||H.hemiLength!==v||H.numDirectionalShadows!==R||H.numPointShadows!==D||H.numSpotShadows!==C||H.numSpotMaps!==A||H.numLightProbes!==E){r.directional.length=x;r.spot.length=h;r.rectArea.length=T;r.point.length=p;r.hemi.length=v;r.directionalShadow.length=R;r.directionalShadowMap.length=R;r.pointShadow.length=D;r.pointShadowMap.length=D;r.spotShadow.length=C;r.spotShadowMap.length=C;r.directionalShadowMatrix.length=R;r.pointShadowMatrix.length=D;r.spotLightMatrix.length=C+A-X;r.spotLightMap.length=A;r.numSpotLightShadowsWithMaps=X;r.numLightProbes=E;H.directionalLength=x;H.pointLength=p;H.spotLength=h;H.rectAreaLength=T;H.hemiLength=v;H.numDirectionalShadows=R;H.numPointShadows=D;H.numSpotShadows=C;H.numSpotMaps=A;H.numLightProbes=E;r.version=rm++}}function c(u,d){let f=0;let m=0;let _=0;let x=0;let p=0;const h=d.matrixWorldInverse;for(let T=0,v=u.length;T<v;T++){const R=u[T];if(R.isDirectionalLight){const D=r.directional[f];D.direction.setFromMatrixPosition(R.matrixWorld);s.setFromMatrixPosition(R.target.matrixWorld);D.direction.sub(s);D.direction.transformDirection(h);f++}else if(R.isSpotLight){const D=r.spot[_];D.position.setFromMatrixPosition(R.matrixWorld);D.position.applyMatrix4(h);D.direction.setFromMatrixPosition(R.matrixWorld);s.setFromMatrixPosition(R.target.matrixWorld);D.direction.sub(s);D.direction.transformDirection(h);_++}else if(R.isRectAreaLight){const D=r.rectArea[x];D.position.setFromMatrixPosition(R.matrixWorld);D.position.applyMatrix4(h);a.identity();o.copy(R.matrixWorld);o.premultiply(h);a.extractRotation(o);D.halfWidth.set(R.width*.5,0,0);D.halfHeight.set(0,R.height*.5,0);D.halfWidth.applyMatrix4(a);D.halfHeight.applyMatrix4(a);x++}else if(R.isPointLight){const D=r.point[m];D.position.setFromMatrixPosition(R.matrixWorld);D.position.applyMatrix4(h);m++}else if(R.isHemisphereLight){const D=r.hemi[p];D.direction.setFromMatrixPosition(R.matrixWorld);D.direction.transformDirection(h);p++}}}return{setup:l,setupView:c,state:r}}function Bo(i,e){const t=new am(i,e);const n=[];const r=[];function s(){n.length=0;r.length=0}function o(d){n.push(d)}function a(d){r.push(d)}function l(d){t.setup(n,d)}function c(d){t.setupView(n,d)}const u={lightsArray:n,shadowsArray:r,lights:t};return{init:s,state:u,setupLights:l,setupLightsView:c,pushLight:o,pushShadow:a}}function om(i,e){let t=new WeakMap;function n(s,o=0){const a=t.get(s);let l;if(a===void 0){l=new Bo(i,e);t.set(s,[l])}else{if(o>=a.length){l=new Bo(i,e);a.push(l)}else{l=a[o]}}return l}function r(){t=new WeakMap}return{get:n,dispose:r}}class lm extends Ci{constructor(e){super();this.isMeshDepthMaterial=true;this.type="MeshDepthMaterial";this.depthPacking=Yc;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.setValues(e)}copy(e){super.copy(e);this.depthPacking=e.depthPacking;this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;return this}}class cm extends Ci{constructor(e){super();this.isMeshDistanceMaterial=true;this.type="MeshDistanceMaterial";this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.setValues(e)}copy(e){super.copy(e);this.map=e.map;this.alphaMap=e.alphaMap;this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;return this}}const um="void main() {\n	gl_Position = vec4( position, 1.0 );\n}";const hm="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function dm(i,e,t){let n=new ia;const r=new Pe,s=new Pe,o=new it,a=new lm({depthPacking:qc}),l=new cm,c={},u=t.maxTextureSize;const d={[Un]:Pt,[Pt]:Un,[nn]:nn};const f=new In({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Pe},radius:{value:4}},vertexShader:um,fragmentShader:hm});const m=f.clone();m.defines.HORIZONTAL_PASS=1;const _=new zt;_.setAttribute("position",new Zt(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const x=new an(_,f);const p=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=ll;let h=this.type;this.render=function(C,A,X){if(p.enabled===false)return;if(p.autoUpdate===false&&p.needsUpdate===false)return;if(C.length===0)return;const E=i.getRenderTarget();const y=i.getActiveCubeFace();const H=i.getActiveMipmapLevel();const j=i.state;j.setBlending(Cn);j.buffers.color.setClear(1,1,1,1);j.buffers.depth.setTest(true);j.setScissorTest(false);const ce=h!==mn&&this.type===mn;const P=h===mn&&this.type!==mn;for(let F=0,V=C.length;F<V;F++){const Y=C[F];const W=Y.shadow;if(W===void 0){console.warn("THREE.WebGLShadowMap:",Y,"has no shadow.");continue}if(W.autoUpdate===false&&W.needsUpdate===false)continue;r.copy(W.mapSize);const k=W.getFrameExtents();r.multiply(k);s.copy(W.mapSize);if(r.x>u||r.y>u){if(r.x>u){s.x=Math.floor(u/k.x);r.x=s.x*k.x;W.mapSize.x=s.x}if(r.y>u){s.y=Math.floor(u/k.y);r.y=s.y*k.y;W.mapSize.y=s.y}}if(W.map===null||ce===true||P===true){const ne=this.type!==mn?{minFilter:Ct,magFilter:Ct}:{};if(W.map!==null){W.map.dispose()}W.map=new Zn(r.x,r.y,ne);W.map.texture.name=Y.name+".shadowMap";W.camera.updateProjectionMatrix()}i.setRenderTarget(W.map);i.clear();const Q=W.getViewportCount();for(let ne=0;ne<Q;ne++){const de=W.getViewport(ne);o.set(s.x*de.x,s.y*de.y,s.x*de.z,s.y*de.w);j.viewport(o);W.updateMatrices(Y,ne);n=W.getFrustum();R(A,X,W.camera,Y,this.type)}if(W.isPointLightShadow!==true&&this.type===mn){T(W,X)}W.needsUpdate=false}h=this.type;p.needsUpdate=false;i.setRenderTarget(E,y,H)};function T(C,A){const X=e.update(x);if(f.defines.VSM_SAMPLES!==C.blurSamples){f.defines.VSM_SAMPLES=C.blurSamples;m.defines.VSM_SAMPLES=C.blurSamples;f.needsUpdate=true;m.needsUpdate=true}if(C.mapPass===null){C.mapPass=new Zn(r.x,r.y)}f.uniforms.shadow_pass.value=C.map.texture;f.uniforms.resolution.value=C.mapSize;f.uniforms.radius.value=C.radius;i.setRenderTarget(C.mapPass);i.clear();i.renderBufferDirect(A,null,X,f,x,null);m.uniforms.shadow_pass.value=C.mapPass.texture;m.uniforms.resolution.value=C.mapSize;m.uniforms.radius.value=C.radius;i.setRenderTarget(C.map);i.clear();i.renderBufferDirect(A,null,X,m,x,null)}function v(C,A,X,E){let y=null;const H=X.isPointLight===true?C.customDistanceMaterial:C.customDepthMaterial;if(H!==void 0){y=H}else{y=X.isPointLight===true?l:a;if(i.localClippingEnabled&&A.clipShadows===true&&Array.isArray(A.clippingPlanes)&&A.clippingPlanes.length!==0||A.displacementMap&&A.displacementScale!==0||A.alphaMap&&A.alphaTest>0||A.map&&A.alphaTest>0){const j=y.uuid,ce=A.uuid;let P=c[j];if(P===void 0){P={};c[j]=P}let F=P[ce];if(F===void 0){F=y.clone();P[ce]=F;A.addEventListener("dispose",D)}y=F}}y.visible=A.visible;y.wireframe=A.wireframe;if(E===mn){y.side=A.shadowSide!==null?A.shadowSide:A.side}else{y.side=A.shadowSide!==null?A.shadowSide:d[A.side]}y.alphaMap=A.alphaMap;y.alphaTest=A.alphaTest;y.map=A.map;y.clipShadows=A.clipShadows;y.clippingPlanes=A.clippingPlanes;y.clipIntersection=A.clipIntersection;y.displacementMap=A.displacementMap;y.displacementScale=A.displacementScale;y.displacementBias=A.displacementBias;y.wireframeLinewidth=A.wireframeLinewidth;y.linewidth=A.linewidth;if(X.isPointLight===true&&y.isMeshDistanceMaterial===true){const j=i.properties.get(y);j.light=X}return y}function R(C,A,X,E,y){if(C.visible===false)return;const H=C.layers.test(A.layers);if(H&&(C.isMesh||C.isLine||C.isPoints)){if((C.castShadow||C.receiveShadow&&y===mn)&&(!C.frustumCulled||n.intersectsObject(C))){C.modelViewMatrix.multiplyMatrices(X.matrixWorldInverse,C.matrixWorld);const ce=e.update(C);const P=C.material;if(Array.isArray(P)){const F=ce.groups;for(let V=0,Y=F.length;V<Y;V++){const W=F[V];const k=P[W.materialIndex];if(k&&k.visible){const Q=v(C,k,E,y);C.onBeforeShadow(i,C,A,X,ce,Q,W);i.renderBufferDirect(X,null,ce,Q,C,W);C.onAfterShadow(i,C,A,X,ce,Q,W)}}}else if(P.visible){const F=v(C,P,E,y);C.onBeforeShadow(i,C,A,X,ce,F,null);i.renderBufferDirect(X,null,ce,F,C,null);C.onAfterShadow(i,C,A,X,ce,F,null)}}}const j=C.children;for(let ce=0,P=j.length;ce<P;ce++){R(j[ce],A,X,E,y)}}function D(C){const A=C.target;A.removeEventListener("dispose",D);for(const X in c){const E=c[X];const y=C.target.uuid;if(y in E){const H=E[y];H.dispose();delete E[y]}}}}function fm(i,e,t){const n=t.isWebGL2;function r(){let w=false;const re=new it;let se=null;const Te=new it(0,0,0,0);return{setMask:function(Me){if(se!==Me&&!w){i.colorMask(Me,Me,Me,Me);se=Me}},setLocked:function(Me){w=Me},setClear:function(Me,qe,je,ot,bt){if(bt===true){Me*=ot;qe*=ot;je*=ot}re.set(Me,qe,je,ot);if(Te.equals(re)===false){i.clearColor(Me,qe,je,ot);Te.copy(re)}},reset:function(){w=false;se=null;Te.set(-1,0,0,0)}}}function s(){let w=false;let re=null;let se=null;let Te=null;return{setTest:function(Me){if(Me){Le(i.DEPTH_TEST)}else{Ae(i.DEPTH_TEST)}},setMask:function(Me){if(re!==Me&&!w){i.depthMask(Me);re=Me}},setFunc:function(Me){if(se!==Me){switch(Me){case Ec:i.depthFunc(i.NEVER);break;case yc:i.depthFunc(i.ALWAYS);break;case Tc:i.depthFunc(i.LESS);break;case Ir:i.depthFunc(i.LEQUAL);break;case bc:i.depthFunc(i.EQUAL);break;case Ac:i.depthFunc(i.GEQUAL);break;case wc:i.depthFunc(i.GREATER);break;case Rc:i.depthFunc(i.NOTEQUAL);break;default:i.depthFunc(i.LEQUAL)}se=Me}},setLocked:function(Me){w=Me},setClear:function(Me){if(Te!==Me){i.clearDepth(Me);Te=Me}},reset:function(){w=false;re=null;se=null;Te=null}}}function o(){let w=false;let re=null;let se=null;let Te=null;let Me=null;let qe=null;let je=null;let ot=null;let bt=null;return{setTest:function(Je){if(!w){if(Je){Le(i.STENCIL_TEST)}else{Ae(i.STENCIL_TEST)}}},setMask:function(Je){if(re!==Je&&!w){i.stencilMask(Je);re=Je}},setFunc:function(Je,At,$t){if(se!==Je||Te!==At||Me!==$t){i.stencilFunc(Je,At,$t);se=Je;Te=At;Me=$t}},setOp:function(Je,At,$t){if(qe!==Je||je!==At||ot!==$t){i.stencilOp(Je,At,$t);qe=Je;je=At;ot=$t}},setLocked:function(Je){w=Je},setClear:function(Je){if(bt!==Je){i.clearStencil(Je);bt=Je}},reset:function(){w=false;re=null;se=null;Te=null;Me=null;qe=null;je=null;ot=null;bt=null}}}const a=new r;const l=new s;const c=new o;const u=new WeakMap;const d=new WeakMap;let f={};let m={};let _=new WeakMap;let x=[];let p=null;let h=false;let T=null;let v=null;let R=null;let D=null;let C=null;let A=null;let X=null;let E=new Ye(0,0,0);let y=0;let H=false;let j=null;let ce=null;let P=null;let F=null;let V=null;const Y=i.getParameter(i.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let W=false;let k=0;const Q=i.getParameter(i.VERSION);if(Q.indexOf("WebGL")!==-1){k=parseFloat(/^WebGL (\d)/.exec(Q)[1]);W=k>=1}else if(Q.indexOf("OpenGL ES")!==-1){k=parseFloat(/^OpenGL ES (\d)/.exec(Q)[1]);W=k>=2}let ne=null;let de={};const G=i.getParameter(i.SCISSOR_BOX);const K=i.getParameter(i.VIEWPORT);const he=new it().fromArray(G);const xe=new it().fromArray(K);function _e(w,re,se,Te){const Me=new Uint8Array(4);const qe=i.createTexture();i.bindTexture(w,qe);i.texParameteri(w,i.TEXTURE_MIN_FILTER,i.NEAREST);i.texParameteri(w,i.TEXTURE_MAG_FILTER,i.NEAREST);for(let je=0;je<se;je++){if(n&&(w===i.TEXTURE_3D||w===i.TEXTURE_2D_ARRAY)){i.texImage3D(re,0,i.RGBA,1,1,Te,0,i.RGBA,i.UNSIGNED_BYTE,Me)}else{i.texImage2D(re+je,0,i.RGBA,1,1,0,i.RGBA,i.UNSIGNED_BYTE,Me)}}return qe}const Ce={};Ce[i.TEXTURE_2D]=_e(i.TEXTURE_2D,i.TEXTURE_2D,1);Ce[i.TEXTURE_CUBE_MAP]=_e(i.TEXTURE_CUBE_MAP,i.TEXTURE_CUBE_MAP_POSITIVE_X,6);if(n){Ce[i.TEXTURE_2D_ARRAY]=_e(i.TEXTURE_2D_ARRAY,i.TEXTURE_2D_ARRAY,1,1);Ce[i.TEXTURE_3D]=_e(i.TEXTURE_3D,i.TEXTURE_3D,1,1)}a.setClear(0,0,0,1);l.setClear(1);c.setClear(0);Le(i.DEPTH_TEST);l.setFunc(Ir);De(false);S(xa);Le(i.CULL_FACE);me(Cn);function Le(w){if(f[w]!==true){i.enable(w);f[w]=true}}function Ae(w){if(f[w]!==false){i.disable(w);f[w]=false}}function ke(w,re){if(m[w]!==re){i.bindFramebuffer(w,re);m[w]=re;if(n){if(w===i.DRAW_FRAMEBUFFER){m[i.FRAMEBUFFER]=re}if(w===i.FRAMEBUFFER){m[i.DRAW_FRAMEBUFFER]=re}}return true}return false}function I(w,re){let se=x;let Te=false;if(w){se=_.get(re);if(se===void 0){se=[];_.set(re,se)}if(w.isWebGLMultipleRenderTargets){const Me=w.texture;if(se.length!==Me.length||se[0]!==i.COLOR_ATTACHMENT0){for(let qe=0,je=Me.length;qe<je;qe++){se[qe]=i.COLOR_ATTACHMENT0+qe}se.length=Me.length;Te=true}}else{if(se[0]!==i.COLOR_ATTACHMENT0){se[0]=i.COLOR_ATTACHMENT0;Te=true}}}else{if(se[0]!==i.BACK){se[0]=i.BACK;Te=true}}if(Te){if(t.isWebGL2){i.drawBuffers(se)}else{e.get("WEBGL_draw_buffers").drawBuffersWEBGL(se)}}}function ht(w){if(p!==w){i.useProgram(w);p=w;return true}return false}const Ee={[kn]:i.FUNC_ADD,[oc]:i.FUNC_SUBTRACT,[lc]:i.FUNC_REVERSE_SUBTRACT};if(n){Ee[ya]=i.MIN;Ee[Ta]=i.MAX}else{const w=e.get("EXT_blend_minmax");if(w!==null){Ee[ya]=w.MIN_EXT;Ee[Ta]=w.MAX_EXT}}const Re={[cc]:i.ZERO,[uc]:i.ONE,[hc]:i.SRC_COLOR,[Os]:i.SRC_ALPHA,[_c]:i.SRC_ALPHA_SATURATE,[mc]:i.DST_COLOR,[fc]:i.DST_ALPHA,[dc]:i.ONE_MINUS_SRC_COLOR,[Fs]:i.ONE_MINUS_SRC_ALPHA,[gc]:i.ONE_MINUS_DST_COLOR,[pc]:i.ONE_MINUS_DST_ALPHA,[vc]:i.CONSTANT_COLOR,[xc]:i.ONE_MINUS_CONSTANT_COLOR,[Mc]:i.CONSTANT_ALPHA,[Sc]:i.ONE_MINUS_CONSTANT_ALPHA};function me(w,re,se,Te,Me,qe,je,ot,bt,Je){if(w===Cn){if(h===true){Ae(i.BLEND);h=false}return}if(h===false){Le(i.BLEND);h=true}if(w!==ac){if(w!==T||Je!==H){if(v!==kn||C!==kn){i.blendEquation(i.FUNC_ADD);v=kn;C=kn}if(Je){switch(w){case Ei:i.blendFuncSeparate(i.ONE,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case Ma:i.blendFunc(i.ONE,i.ONE);break;case Sa:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case Ea:i.blendFuncSeparate(i.ZERO,i.SRC_COLOR,i.ZERO,i.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",w);break}}else{switch(w){case Ei:i.blendFuncSeparate(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case Ma:i.blendFunc(i.SRC_ALPHA,i.ONE);break;case Sa:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case Ea:i.blendFunc(i.ZERO,i.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",w);break}}R=null;D=null;A=null;X=null;E.set(0,0,0);y=0;T=w;H=Je}return}Me=Me||re;qe=qe||se;je=je||Te;if(re!==v||Me!==C){i.blendEquationSeparate(Ee[re],Ee[Me]);v=re;C=Me}if(se!==R||Te!==D||qe!==A||je!==X){i.blendFuncSeparate(Re[se],Re[Te],Re[qe],Re[je]);R=se;D=Te;A=qe;X=je}if(ot.equals(E)===false||bt!==y){i.blendColor(ot.r,ot.g,ot.b,bt);E.copy(ot);y=bt}T=w;H=false}function Qe(w,re){w.side===nn?Ae(i.CULL_FACE):Le(i.CULL_FACE);let se=w.side===Pt;if(re)se=!se;De(se);w.blending===Ei&&w.transparent===false?me(Cn):me(w.blending,w.blendEquation,w.blendSrc,w.blendDst,w.blendEquationAlpha,w.blendSrcAlpha,w.blendDstAlpha,w.blendColor,w.blendAlpha,w.premultipliedAlpha);l.setFunc(w.depthFunc);l.setTest(w.depthTest);l.setMask(w.depthWrite);a.setMask(w.colorWrite);const Te=w.stencilWrite;c.setTest(Te);if(Te){c.setMask(w.stencilWriteMask);c.setFunc(w.stencilFunc,w.stencilRef,w.stencilFuncMask);c.setOp(w.stencilFail,w.stencilZFail,w.stencilZPass)}N(w.polygonOffset,w.polygonOffsetFactor,w.polygonOffsetUnits);w.alphaToCoverage===true?Le(i.SAMPLE_ALPHA_TO_COVERAGE):Ae(i.SAMPLE_ALPHA_TO_COVERAGE)}function De(w){if(j!==w){if(w){i.frontFace(i.CW)}else{i.frontFace(i.CCW)}j=w}}function S(w){if(w!==ic){Le(i.CULL_FACE);if(w!==ce){if(w===xa){i.cullFace(i.BACK)}else if(w===rc){i.cullFace(i.FRONT)}else{i.cullFace(i.FRONT_AND_BACK)}}}else{Ae(i.CULL_FACE)}ce=w}function g(w){if(w!==P){if(W)i.lineWidth(w);P=w}}function N(w,re,se){if(w){Le(i.POLYGON_OFFSET_FILL);if(F!==re||V!==se){i.polygonOffset(re,se);F=re;V=se}}else{Ae(i.POLYGON_OFFSET_FILL)}}function te(w){if(w){Le(i.SCISSOR_TEST)}else{Ae(i.SCISSOR_TEST)}}function $(w){if(w===void 0)w=i.TEXTURE0+Y-1;if(ne!==w){i.activeTexture(w);ne=w}}function ee(w,re,se){if(se===void 0){if(ne===null){se=i.TEXTURE0+Y-1}else{se=ne}}let Te=de[se];if(Te===void 0){Te={type:void 0,texture:void 0};de[se]=Te}if(Te.type!==w||Te.texture!==re){if(ne!==se){i.activeTexture(se);ne=se}i.bindTexture(w,re||Ce[w]);Te.type=w;Te.texture=re}}function ge(){const w=de[ne];if(w!==void 0&&w.type!==void 0){i.bindTexture(w.type,null);w.type=void 0;w.texture=void 0}}function ue(){try{i.compressedTexImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function pe(){try{i.compressedTexImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function ye(){try{i.texSubImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function Ie(){try{i.texSubImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function Z(){try{i.compressedTexSubImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function We(){try{i.compressedTexSubImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function b(){try{i.texStorage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function q(){try{i.texStorage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function le(){try{i.texImage2D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function ie(){try{i.texImage3D.apply(i,arguments)}catch(w){console.error("THREE.WebGLState:",w)}}function ve(w){if(he.equals(w)===false){i.scissor(w.x,w.y,w.z,w.w);he.copy(w)}}function ze(w){if(xe.equals(w)===false){i.viewport(w.x,w.y,w.z,w.w);xe.copy(w)}}function Xe(w,re){let se=d.get(re);if(se===void 0){se=new WeakMap;d.set(re,se)}let Te=se.get(w);if(Te===void 0){Te=i.getUniformBlockIndex(re,w.name);se.set(w,Te)}}function Fe(w,re){const se=d.get(re);const Te=se.get(w);if(u.get(re)!==Te){i.uniformBlockBinding(re,Te,w.__bindingPointIndex);u.set(re,Te)}}function oe(){i.disable(i.BLEND);i.disable(i.CULL_FACE);i.disable(i.DEPTH_TEST);i.disable(i.POLYGON_OFFSET_FILL);i.disable(i.SCISSOR_TEST);i.disable(i.STENCIL_TEST);i.disable(i.SAMPLE_ALPHA_TO_COVERAGE);i.blendEquation(i.FUNC_ADD);i.blendFunc(i.ONE,i.ZERO);i.blendFuncSeparate(i.ONE,i.ZERO,i.ONE,i.ZERO);i.blendColor(0,0,0,0);i.colorMask(true,true,true,true);i.clearColor(0,0,0,0);i.depthMask(true);i.depthFunc(i.LESS);i.clearDepth(1);i.stencilMask(4294967295);i.stencilFunc(i.ALWAYS,0,4294967295);i.stencilOp(i.KEEP,i.KEEP,i.KEEP);i.clearStencil(0);i.cullFace(i.BACK);i.frontFace(i.CCW);i.polygonOffset(0,0);i.activeTexture(i.TEXTURE0);i.bindFramebuffer(i.FRAMEBUFFER,null);if(n===true){i.bindFramebuffer(i.DRAW_FRAMEBUFFER,null);i.bindFramebuffer(i.READ_FRAMEBUFFER,null)}i.useProgram(null);i.lineWidth(1);i.scissor(0,0,i.canvas.width,i.canvas.height);i.viewport(0,0,i.canvas.width,i.canvas.height);f={};ne=null;de={};m={};_=new WeakMap;x=[];p=null;h=false;T=null;v=null;R=null;D=null;C=null;A=null;X=null;E=new Ye(0,0,0);y=0;H=false;j=null;ce=null;P=null;F=null;V=null;he.set(0,0,i.canvas.width,i.canvas.height);xe.set(0,0,i.canvas.width,i.canvas.height);a.reset();l.reset();c.reset()}return{buffers:{color:a,depth:l,stencil:c},enable:Le,disable:Ae,bindFramebuffer:ke,drawBuffers:I,useProgram:ht,setBlending:me,setMaterial:Qe,setFlipSided:De,setCullFace:S,setLineWidth:g,setPolygonOffset:N,setScissorTest:te,activeTexture:$,bindTexture:ee,unbindTexture:ge,compressedTexImage2D:ue,compressedTexImage3D:pe,texImage2D:le,texImage3D:ie,updateUBOMapping:Xe,uniformBlockBinding:Fe,texStorage2D:b,texStorage3D:q,texSubImage2D:ye,texSubImage3D:Ie,compressedTexSubImage2D:Z,compressedTexSubImage3D:We,scissor:ve,viewport:ze,reset:oe}}function pm(i,e,t,n,r,s,o){const a=r.isWebGL2;const l=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null;const c=typeof navigator==="undefined"?false:/OculusBrowser/g.test(navigator.userAgent);const u=new WeakMap;let d;const f=new WeakMap;let m=false;try{m=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(S){}function _(S,g){return m?new OffscreenCanvas(S,g):Xi("canvas")}function x(S,g,N,te){let $=1;if(S.width>te||S.height>te){$=te/Math.max(S.width,S.height)}if($<1||g===true){if(typeof HTMLImageElement!=="undefined"&&S instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&S instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&S instanceof ImageBitmap){const ee=g?zr:Math.floor;const ge=ee($*S.width);const ue=ee($*S.height);if(d===void 0)d=_(ge,ue);const pe=N?_(ge,ue):d;pe.width=ge;pe.height=ue;const ye=pe.getContext("2d");ye.drawImage(S,0,0,ge,ue);console.warn("THREE.WebGLRenderer: Texture has been resized from ("+S.width+"x"+S.height+") to ("+ge+"x"+ue+").");return pe}else{if("data"in S){console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+S.width+"x"+S.height+").")}return S}}return S}function p(S){return Ws(S.width)&&Ws(S.height)}function h(S){if(a)return false;return S.wrapS!==Bt||S.wrapT!==Bt||S.minFilter!==Ct&&S.minFilter!==Vt}function T(S,g){return S.generateMipmaps&&g&&S.minFilter!==Ct&&S.minFilter!==Vt}function v(S){i.generateMipmap(S)}function R(S,g,N,te,$=false){if(a===false)return g;if(S!==null){if(i[S]!==void 0)return i[S];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+S+"'")}let ee=g;if(g===i.RED){if(N===i.FLOAT)ee=i.R32F;if(N===i.HALF_FLOAT)ee=i.R16F;if(N===i.UNSIGNED_BYTE)ee=i.R8}if(g===i.RED_INTEGER){if(N===i.UNSIGNED_BYTE)ee=i.R8UI;if(N===i.UNSIGNED_SHORT)ee=i.R16UI;if(N===i.UNSIGNED_INT)ee=i.R32UI;if(N===i.BYTE)ee=i.R8I;if(N===i.SHORT)ee=i.R16I;if(N===i.INT)ee=i.R32I}if(g===i.RG){if(N===i.FLOAT)ee=i.RG32F;if(N===i.HALF_FLOAT)ee=i.RG16F;if(N===i.UNSIGNED_BYTE)ee=i.RG8}if(g===i.RGBA){const ge=$?Nr:$e.getTransfer(te);if(N===i.FLOAT)ee=i.RGBA32F;if(N===i.HALF_FLOAT)ee=i.RGBA16F;if(N===i.UNSIGNED_BYTE)ee=ge===et?i.SRGB8_ALPHA8:i.RGBA8;if(N===i.UNSIGNED_SHORT_4_4_4_4)ee=i.RGBA4;if(N===i.UNSIGNED_SHORT_5_5_5_1)ee=i.RGB5_A1}if(ee===i.R16F||ee===i.R32F||ee===i.RG16F||ee===i.RG32F||ee===i.RGBA16F||ee===i.RGBA32F){e.get("EXT_color_buffer_float")}return ee}function D(S,g,N){if(T(S,N)===true||S.isFramebufferTexture&&S.minFilter!==Ct&&S.minFilter!==Vt){return Math.log2(Math.max(g.width,g.height))+1}else if(S.mipmaps!==void 0&&S.mipmaps.length>0){return S.mipmaps.length}else if(S.isCompressedTexture&&Array.isArray(S.image)){return g.mipmaps.length}else{return 1}}function C(S){if(S===Ct||S===ba||S===ts){return i.NEAREST}return i.LINEAR}function A(S){const g=S.target;g.removeEventListener("dispose",A);E(g);if(g.isVideoTexture){u.delete(g)}}function X(S){const g=S.target;g.removeEventListener("dispose",X);H(g)}function E(S){const g=n.get(S);if(g.__webglInit===void 0)return;const N=S.source;const te=f.get(N);if(te){const $=te[g.__cacheKey];$.usedTimes--;if($.usedTimes===0){y(S)}if(Object.keys(te).length===0){f.delete(N)}}n.remove(S)}function y(S){const g=n.get(S);i.deleteTexture(g.__webglTexture);const N=S.source;const te=f.get(N);delete te[g.__cacheKey];o.memory.textures--}function H(S){const g=S.texture;const N=n.get(S);const te=n.get(g);if(te.__webglTexture!==void 0){i.deleteTexture(te.__webglTexture);o.memory.textures--}if(S.depthTexture){S.depthTexture.dispose()}if(S.isWebGLCubeRenderTarget){for(let $=0;$<6;$++){if(Array.isArray(N.__webglFramebuffer[$])){for(let ee=0;ee<N.__webglFramebuffer[$].length;ee++)i.deleteFramebuffer(N.__webglFramebuffer[$][ee])}else{i.deleteFramebuffer(N.__webglFramebuffer[$])}if(N.__webglDepthbuffer)i.deleteRenderbuffer(N.__webglDepthbuffer[$])}}else{if(Array.isArray(N.__webglFramebuffer)){for(let $=0;$<N.__webglFramebuffer.length;$++)i.deleteFramebuffer(N.__webglFramebuffer[$])}else{i.deleteFramebuffer(N.__webglFramebuffer)}if(N.__webglDepthbuffer)i.deleteRenderbuffer(N.__webglDepthbuffer);if(N.__webglMultisampledFramebuffer)i.deleteFramebuffer(N.__webglMultisampledFramebuffer);if(N.__webglColorRenderbuffer){for(let $=0;$<N.__webglColorRenderbuffer.length;$++){if(N.__webglColorRenderbuffer[$])i.deleteRenderbuffer(N.__webglColorRenderbuffer[$])}}if(N.__webglDepthRenderbuffer)i.deleteRenderbuffer(N.__webglDepthRenderbuffer)}if(S.isWebGLMultipleRenderTargets){for(let $=0,ee=g.length;$<ee;$++){const ge=n.get(g[$]);if(ge.__webglTexture){i.deleteTexture(ge.__webglTexture);o.memory.textures--}n.remove(g[$])}}n.remove(g);n.remove(S)}let j=0;function ce(){j=0}function P(){const S=j;if(S>=r.maxTextures){console.warn("THREE.WebGLTextures: Trying to use "+S+" texture units while this GPU supports only "+r.maxTextures)}j+=1;return S}function F(S){const g=[];g.push(S.wrapS);g.push(S.wrapT);g.push(S.wrapR||0);g.push(S.magFilter);g.push(S.minFilter);g.push(S.anisotropy);g.push(S.internalFormat);g.push(S.format);g.push(S.type);g.push(S.generateMipmaps);g.push(S.premultiplyAlpha);g.push(S.flipY);g.push(S.unpackAlignment);g.push(S.colorSpace);return g.join()}function V(S,g){const N=n.get(S);if(S.isVideoTexture)Qe(S);if(S.isRenderTargetTexture===false&&S.version>0&&N.__version!==S.version){const te=S.image;if(te===null){console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.")}else if(te.complete===false){console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}else{he(N,S,g);return}}t.bindTexture(i.TEXTURE_2D,N.__webglTexture,i.TEXTURE0+g)}function Y(S,g){const N=n.get(S);if(S.version>0&&N.__version!==S.version){he(N,S,g);return}t.bindTexture(i.TEXTURE_2D_ARRAY,N.__webglTexture,i.TEXTURE0+g)}function W(S,g){const N=n.get(S);if(S.version>0&&N.__version!==S.version){he(N,S,g);return}t.bindTexture(i.TEXTURE_3D,N.__webglTexture,i.TEXTURE0+g)}function k(S,g){const N=n.get(S);if(S.version>0&&N.__version!==S.version){xe(N,S,g);return}t.bindTexture(i.TEXTURE_CUBE_MAP,N.__webglTexture,i.TEXTURE0+g)}const Q={[Hs]:i.REPEAT,[Bt]:i.CLAMP_TO_EDGE,[Gs]:i.MIRRORED_REPEAT};const ne={[Ct]:i.NEAREST,[ba]:i.NEAREST_MIPMAP_NEAREST,[ts]:i.NEAREST_MIPMAP_LINEAR,[Vt]:i.LINEAR,[Fc]:i.LINEAR_MIPMAP_NEAREST,[Vi]:i.LINEAR_MIPMAP_LINEAR};const de={[Kc]:i.NEVER,[tu]:i.ALWAYS,[Zc]:i.LESS,[xl]:i.LEQUAL,[$c]:i.EQUAL,[eu]:i.GEQUAL,[Jc]:i.GREATER,[Qc]:i.NOTEQUAL};function G(S,g,N){if(N){i.texParameteri(S,i.TEXTURE_WRAP_S,Q[g.wrapS]);i.texParameteri(S,i.TEXTURE_WRAP_T,Q[g.wrapT]);if(S===i.TEXTURE_3D||S===i.TEXTURE_2D_ARRAY){i.texParameteri(S,i.TEXTURE_WRAP_R,Q[g.wrapR])}i.texParameteri(S,i.TEXTURE_MAG_FILTER,ne[g.magFilter]);i.texParameteri(S,i.TEXTURE_MIN_FILTER,ne[g.minFilter])}else{i.texParameteri(S,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE);i.texParameteri(S,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE);if(S===i.TEXTURE_3D||S===i.TEXTURE_2D_ARRAY){i.texParameteri(S,i.TEXTURE_WRAP_R,i.CLAMP_TO_EDGE)}if(g.wrapS!==Bt||g.wrapT!==Bt){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.")}i.texParameteri(S,i.TEXTURE_MAG_FILTER,C(g.magFilter));i.texParameteri(S,i.TEXTURE_MIN_FILTER,C(g.minFilter));if(g.minFilter!==Ct&&g.minFilter!==Vt){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")}}if(g.compareFunction){i.texParameteri(S,i.TEXTURE_COMPARE_MODE,i.COMPARE_REF_TO_TEXTURE);i.texParameteri(S,i.TEXTURE_COMPARE_FUNC,de[g.compareFunction])}if(e.has("EXT_texture_filter_anisotropic")===true){const te=e.get("EXT_texture_filter_anisotropic");if(g.magFilter===Ct)return;if(g.minFilter!==ts&&g.minFilter!==Vi)return;if(g.type===wn&&e.has("OES_texture_float_linear")===false)return;if(a===false&&(g.type===ki&&e.has("OES_texture_half_float_linear")===false))return;if(g.anisotropy>1||n.get(g).__currentAnisotropy){i.texParameterf(S,te.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(g.anisotropy,r.getMaxAnisotropy()));n.get(g).__currentAnisotropy=g.anisotropy}}}function K(S,g){let N=false;if(S.__webglInit===void 0){S.__webglInit=true;g.addEventListener("dispose",A)}const te=g.source;let $=f.get(te);if($===void 0){$={};f.set(te,$)}const ee=F(g);if(ee!==S.__cacheKey){if($[ee]===void 0){$[ee]={texture:i.createTexture(),usedTimes:0};o.memory.textures++;N=true}$[ee].usedTimes++;const ge=$[S.__cacheKey];if(ge!==void 0){$[S.__cacheKey].usedTimes--;if(ge.usedTimes===0){y(g)}}S.__cacheKey=ee;S.__webglTexture=$[ee].texture}return N}function he(S,g,N){let te=i.TEXTURE_2D;if(g.isDataArrayTexture||g.isCompressedArrayTexture)te=i.TEXTURE_2D_ARRAY;if(g.isData3DTexture)te=i.TEXTURE_3D;const $=K(S,g);const ee=g.source;t.bindTexture(te,S.__webglTexture,i.TEXTURE0+N);const ge=n.get(ee);if(ee.version!==ge.__version||$===true){t.activeTexture(i.TEXTURE0+N);const ue=$e.getPrimaries($e.workingColorSpace);const pe=g.colorSpace===Wt?null:$e.getPrimaries(g.colorSpace);const ye=g.colorSpace===Wt||ue===pe?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,g.flipY);i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,g.premultiplyAlpha);i.pixelStorei(i.UNPACK_ALIGNMENT,g.unpackAlignment);i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,ye);const Ie=h(g)&&p(g.image)===false;let Z=x(g.image,Ie,false,r.maxTextureSize);Z=De(g,Z);const We=p(Z)||a,b=s.convert(g.format,g.colorSpace);let q=s.convert(g.type),le=R(g.internalFormat,b,q,g.colorSpace,g.isVideoTexture);G(te,g,We);let ie;const ve=g.mipmaps;const ze=a&&g.isVideoTexture!==true&&le!==gl;const Xe=ge.__version===void 0||$===true;const Fe=D(g,Z,We);if(g.isDepthTexture){le=i.DEPTH_COMPONENT;if(a){if(g.type===wn){le=i.DEPTH_COMPONENT32F}else if(g.type===An){le=i.DEPTH_COMPONENT24}else if(g.type===Yn){le=i.DEPTH24_STENCIL8}else{le=i.DEPTH_COMPONENT16}}else{if(g.type===wn){console.error("WebGLRenderer: Floating point depth texture requires WebGL2.")}}if(g.format===qn&&le===i.DEPTH_COMPONENT){if(g.type!==Js&&g.type!==An){console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");g.type=An;q=s.convert(g.type)}}if(g.format===Ai&&le===i.DEPTH_COMPONENT){le=i.DEPTH_STENCIL;if(g.type!==Yn){console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");g.type=Yn;q=s.convert(g.type)}}if(Xe){if(ze){t.texStorage2D(i.TEXTURE_2D,1,le,Z.width,Z.height)}else{t.texImage2D(i.TEXTURE_2D,0,le,Z.width,Z.height,0,b,q,null)}}}else if(g.isDataTexture){if(ve.length>0&&We){if(ze&&Xe){t.texStorage2D(i.TEXTURE_2D,Fe,le,ve[0].width,ve[0].height)}for(let oe=0,w=ve.length;oe<w;oe++){ie=ve[oe];if(ze){t.texSubImage2D(i.TEXTURE_2D,oe,0,0,ie.width,ie.height,b,q,ie.data)}else{t.texImage2D(i.TEXTURE_2D,oe,le,ie.width,ie.height,0,b,q,ie.data)}}g.generateMipmaps=false}else{if(ze){if(Xe){t.texStorage2D(i.TEXTURE_2D,Fe,le,Z.width,Z.height)}t.texSubImage2D(i.TEXTURE_2D,0,0,0,Z.width,Z.height,b,q,Z.data)}else{t.texImage2D(i.TEXTURE_2D,0,le,Z.width,Z.height,0,b,q,Z.data)}}}else if(g.isCompressedTexture){if(g.isCompressedArrayTexture){if(ze&&Xe){t.texStorage3D(i.TEXTURE_2D_ARRAY,Fe,le,ve[0].width,ve[0].height,Z.depth)}for(let oe=0,w=ve.length;oe<w;oe++){ie=ve[oe];if(g.format!==Kt){if(b!==null){if(ze){t.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,oe,0,0,0,ie.width,ie.height,Z.depth,b,ie.data,0,0)}else{t.compressedTexImage3D(i.TEXTURE_2D_ARRAY,oe,le,ie.width,ie.height,Z.depth,0,ie.data,0,0)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(ze){t.texSubImage3D(i.TEXTURE_2D_ARRAY,oe,0,0,0,ie.width,ie.height,Z.depth,b,q,ie.data)}else{t.texImage3D(i.TEXTURE_2D_ARRAY,oe,le,ie.width,ie.height,Z.depth,0,b,q,ie.data)}}}}else{if(ze&&Xe){t.texStorage2D(i.TEXTURE_2D,Fe,le,ve[0].width,ve[0].height)}for(let oe=0,w=ve.length;oe<w;oe++){ie=ve[oe];if(g.format!==Kt){if(b!==null){if(ze){t.compressedTexSubImage2D(i.TEXTURE_2D,oe,0,0,ie.width,ie.height,b,ie.data)}else{t.compressedTexImage2D(i.TEXTURE_2D,oe,le,ie.width,ie.height,0,ie.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(ze){t.texSubImage2D(i.TEXTURE_2D,oe,0,0,ie.width,ie.height,b,q,ie.data)}else{t.texImage2D(i.TEXTURE_2D,oe,le,ie.width,ie.height,0,b,q,ie.data)}}}}}else if(g.isDataArrayTexture){if(ze){if(Xe){t.texStorage3D(i.TEXTURE_2D_ARRAY,Fe,le,Z.width,Z.height,Z.depth)}t.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,0,Z.width,Z.height,Z.depth,b,q,Z.data)}else{t.texImage3D(i.TEXTURE_2D_ARRAY,0,le,Z.width,Z.height,Z.depth,0,b,q,Z.data)}}else if(g.isData3DTexture){if(ze){if(Xe){t.texStorage3D(i.TEXTURE_3D,Fe,le,Z.width,Z.height,Z.depth)}t.texSubImage3D(i.TEXTURE_3D,0,0,0,0,Z.width,Z.height,Z.depth,b,q,Z.data)}else{t.texImage3D(i.TEXTURE_3D,0,le,Z.width,Z.height,Z.depth,0,b,q,Z.data)}}else if(g.isFramebufferTexture){if(Xe){if(ze){t.texStorage2D(i.TEXTURE_2D,Fe,le,Z.width,Z.height)}else{let oe=Z.width,w=Z.height;for(let re=0;re<Fe;re++){t.texImage2D(i.TEXTURE_2D,re,le,oe,w,0,b,q,null);oe>>=1;w>>=1}}}}else{if(ve.length>0&&We){if(ze&&Xe){t.texStorage2D(i.TEXTURE_2D,Fe,le,ve[0].width,ve[0].height)}for(let oe=0,w=ve.length;oe<w;oe++){ie=ve[oe];if(ze){t.texSubImage2D(i.TEXTURE_2D,oe,0,0,b,q,ie)}else{t.texImage2D(i.TEXTURE_2D,oe,le,b,q,ie)}}g.generateMipmaps=false}else{if(ze){if(Xe){t.texStorage2D(i.TEXTURE_2D,Fe,le,Z.width,Z.height)}t.texSubImage2D(i.TEXTURE_2D,0,0,0,b,q,Z)}else{t.texImage2D(i.TEXTURE_2D,0,le,b,q,Z)}}}if(T(g,We)){v(te)}ge.__version=ee.version;if(g.onUpdate)g.onUpdate(g)}S.__version=g.version}function xe(S,g,N){if(g.image.length!==6)return;const te=K(S,g);const $=g.source;t.bindTexture(i.TEXTURE_CUBE_MAP,S.__webglTexture,i.TEXTURE0+N);const ee=n.get($);if($.version!==ee.__version||te===true){t.activeTexture(i.TEXTURE0+N);const ge=$e.getPrimaries($e.workingColorSpace);const ue=g.colorSpace===Wt?null:$e.getPrimaries(g.colorSpace);const pe=g.colorSpace===Wt||ge===ue?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,g.flipY);i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,g.premultiplyAlpha);i.pixelStorei(i.UNPACK_ALIGNMENT,g.unpackAlignment);i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,pe);const ye=g.isCompressedTexture||g.image[0].isCompressedTexture;const Ie=g.image[0]&&g.image[0].isDataTexture;const Z=[];for(let oe=0;oe<6;oe++){if(!ye&&!Ie){Z[oe]=x(g.image[oe],false,true,r.maxCubemapSize)}else{Z[oe]=Ie?g.image[oe].image:g.image[oe]}Z[oe]=De(g,Z[oe])}const We=Z[0],b=p(We)||a,q=s.convert(g.format,g.colorSpace),le=s.convert(g.type),ie=R(g.internalFormat,q,le,g.colorSpace);const ve=a&&g.isVideoTexture!==true;const ze=ee.__version===void 0||te===true;let Xe=D(g,We,b);G(i.TEXTURE_CUBE_MAP,g,b);let Fe;if(ye){if(ve&&ze){t.texStorage2D(i.TEXTURE_CUBE_MAP,Xe,ie,We.width,We.height)}for(let oe=0;oe<6;oe++){Fe=Z[oe].mipmaps;for(let w=0;w<Fe.length;w++){const re=Fe[w];if(g.format!==Kt){if(q!==null){if(ve){t.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,w,0,0,re.width,re.height,q,re.data)}else{t.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,w,ie,re.width,re.height,0,re.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")}}else{if(ve){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,w,0,0,re.width,re.height,q,le,re.data)}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,w,ie,re.width,re.height,0,q,le,re.data)}}}}}else{Fe=g.mipmaps;if(ve&&ze){if(Fe.length>0)Xe++;t.texStorage2D(i.TEXTURE_CUBE_MAP,Xe,ie,Z[0].width,Z[0].height)}for(let oe=0;oe<6;oe++){if(Ie){if(ve){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,0,0,0,Z[oe].width,Z[oe].height,q,le,Z[oe].data)}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,0,ie,Z[oe].width,Z[oe].height,0,q,le,Z[oe].data)}for(let w=0;w<Fe.length;w++){const re=Fe[w];const se=re.image[oe].image;if(ve){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,w+1,0,0,se.width,se.height,q,le,se.data)}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,w+1,ie,se.width,se.height,0,q,le,se.data)}}}else{if(ve){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,0,0,0,q,le,Z[oe])}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,0,ie,q,le,Z[oe])}for(let w=0;w<Fe.length;w++){const re=Fe[w];if(ve){t.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,w+1,0,0,q,le,re.image[oe])}else{t.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+oe,w+1,ie,q,le,re.image[oe])}}}}}if(T(g,b)){v(i.TEXTURE_CUBE_MAP)}ee.__version=$.version;if(g.onUpdate)g.onUpdate(g)}S.__version=g.version}function _e(S,g,N,te,$,ee){const ge=s.convert(N.format,N.colorSpace);const ue=s.convert(N.type);const pe=R(N.internalFormat,ge,ue,N.colorSpace);const ye=n.get(g);if(!ye.__hasExternalTextures){const Ie=Math.max(1,g.width>>ee);const Z=Math.max(1,g.height>>ee);if($===i.TEXTURE_3D||$===i.TEXTURE_2D_ARRAY){t.texImage3D($,ee,pe,Ie,Z,g.depth,0,ge,ue,null)}else{t.texImage2D($,ee,pe,Ie,Z,0,ge,ue,null)}}t.bindFramebuffer(i.FRAMEBUFFER,S);if(me(g)){l.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,te,$,n.get(N).__webglTexture,0,Re(g))}else if($===i.TEXTURE_2D||$>=i.TEXTURE_CUBE_MAP_POSITIVE_X&&$<=i.TEXTURE_CUBE_MAP_NEGATIVE_Z){i.framebufferTexture2D(i.FRAMEBUFFER,te,$,n.get(N).__webglTexture,ee)}t.bindFramebuffer(i.FRAMEBUFFER,null)}function Ce(S,g,N){i.bindRenderbuffer(i.RENDERBUFFER,S);if(g.depthBuffer&&!g.stencilBuffer){let te=a===true?i.DEPTH_COMPONENT24:i.DEPTH_COMPONENT16;if(N||me(g)){const $=g.depthTexture;if($&&$.isDepthTexture){if($.type===wn){te=i.DEPTH_COMPONENT32F}else if($.type===An){te=i.DEPTH_COMPONENT24}}const ee=Re(g);if(me(g)){l.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,ee,te,g.width,g.height)}else{i.renderbufferStorageMultisample(i.RENDERBUFFER,ee,te,g.width,g.height)}}else{i.renderbufferStorage(i.RENDERBUFFER,te,g.width,g.height)}i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.RENDERBUFFER,S)}else if(g.depthBuffer&&g.stencilBuffer){const te=Re(g);if(N&&me(g)===false){i.renderbufferStorageMultisample(i.RENDERBUFFER,te,i.DEPTH24_STENCIL8,g.width,g.height)}else if(me(g)){l.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,te,i.DEPTH24_STENCIL8,g.width,g.height)}else{i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,g.width,g.height)}i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.RENDERBUFFER,S)}else{const te=g.isWebGLMultipleRenderTargets===true?g.texture:[g.texture];for(let $=0;$<te.length;$++){const ee=te[$];const ge=s.convert(ee.format,ee.colorSpace);const ue=s.convert(ee.type);const pe=R(ee.internalFormat,ge,ue,ee.colorSpace);const ye=Re(g);if(N&&me(g)===false){i.renderbufferStorageMultisample(i.RENDERBUFFER,ye,pe,g.width,g.height)}else if(me(g)){l.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,ye,pe,g.width,g.height)}else{i.renderbufferStorage(i.RENDERBUFFER,pe,g.width,g.height)}}}i.bindRenderbuffer(i.RENDERBUFFER,null)}function Le(S,g){const N=g&&g.isWebGLCubeRenderTarget;if(N)throw new Error("Depth Texture with cube render targets is not supported");t.bindFramebuffer(i.FRAMEBUFFER,S);if(!(g.depthTexture&&g.depthTexture.isDepthTexture)){throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture")}if(!n.get(g.depthTexture).__webglTexture||g.depthTexture.image.width!==g.width||g.depthTexture.image.height!==g.height){g.depthTexture.image.width=g.width;g.depthTexture.image.height=g.height;g.depthTexture.needsUpdate=true}V(g.depthTexture,0);const te=n.get(g.depthTexture).__webglTexture;const $=Re(g);if(g.depthTexture.format===qn){if(me(g)){l.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,te,0,$)}else{i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,te,0)}}else if(g.depthTexture.format===Ai){if(me(g)){l.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,te,0,$)}else{i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,te,0)}}else{throw new Error("Unknown depthTexture format")}}function Ae(S){const g=n.get(S);const N=S.isWebGLCubeRenderTarget===true;if(S.depthTexture&&!g.__autoAllocateDepthBuffer){if(N)throw new Error("target.depthTexture not supported in Cube render targets");Le(g.__webglFramebuffer,S)}else{if(N){g.__webglDepthbuffer=[];for(let te=0;te<6;te++){t.bindFramebuffer(i.FRAMEBUFFER,g.__webglFramebuffer[te]);g.__webglDepthbuffer[te]=i.createRenderbuffer();Ce(g.__webglDepthbuffer[te],S,false)}}else{t.bindFramebuffer(i.FRAMEBUFFER,g.__webglFramebuffer);g.__webglDepthbuffer=i.createRenderbuffer();Ce(g.__webglDepthbuffer,S,false)}}t.bindFramebuffer(i.FRAMEBUFFER,null)}function ke(S,g,N){const te=n.get(S);if(g!==void 0){_e(te.__webglFramebuffer,S,S.texture,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,0)}if(N!==void 0){Ae(S)}}function I(S){const g=S.texture;const N=n.get(S);const te=n.get(g);S.addEventListener("dispose",X);if(S.isWebGLMultipleRenderTargets!==true){if(te.__webglTexture===void 0){te.__webglTexture=i.createTexture()}te.__version=g.version;o.memory.textures++}const $=S.isWebGLCubeRenderTarget===true;const ee=S.isWebGLMultipleRenderTargets===true;const ge=p(S)||a;if($){N.__webglFramebuffer=[];for(let ue=0;ue<6;ue++){if(a&&g.mipmaps&&g.mipmaps.length>0){N.__webglFramebuffer[ue]=[];for(let pe=0;pe<g.mipmaps.length;pe++){N.__webglFramebuffer[ue][pe]=i.createFramebuffer()}}else{N.__webglFramebuffer[ue]=i.createFramebuffer()}}}else{if(a&&g.mipmaps&&g.mipmaps.length>0){N.__webglFramebuffer=[];for(let ue=0;ue<g.mipmaps.length;ue++){N.__webglFramebuffer[ue]=i.createFramebuffer()}}else{N.__webglFramebuffer=i.createFramebuffer()}if(ee){if(r.drawBuffers){const ue=S.texture;for(let pe=0,ye=ue.length;pe<ye;pe++){const Ie=n.get(ue[pe]);if(Ie.__webglTexture===void 0){Ie.__webglTexture=i.createTexture();o.memory.textures++}}}else{console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.")}}if(a&&S.samples>0&&me(S)===false){const ue=ee?g:[g];N.__webglMultisampledFramebuffer=i.createFramebuffer();N.__webglColorRenderbuffer=[];t.bindFramebuffer(i.FRAMEBUFFER,N.__webglMultisampledFramebuffer);for(let pe=0;pe<ue.length;pe++){const ye=ue[pe];N.__webglColorRenderbuffer[pe]=i.createRenderbuffer();i.bindRenderbuffer(i.RENDERBUFFER,N.__webglColorRenderbuffer[pe]);const Ie=s.convert(ye.format,ye.colorSpace);const Z=s.convert(ye.type);const We=R(ye.internalFormat,Ie,Z,ye.colorSpace,S.isXRRenderTarget===true);const b=Re(S);i.renderbufferStorageMultisample(i.RENDERBUFFER,b,We,S.width,S.height);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+pe,i.RENDERBUFFER,N.__webglColorRenderbuffer[pe])}i.bindRenderbuffer(i.RENDERBUFFER,null);if(S.depthBuffer){N.__webglDepthRenderbuffer=i.createRenderbuffer();Ce(N.__webglDepthRenderbuffer,S,true)}t.bindFramebuffer(i.FRAMEBUFFER,null)}}if($){t.bindTexture(i.TEXTURE_CUBE_MAP,te.__webglTexture);G(i.TEXTURE_CUBE_MAP,g,ge);for(let ue=0;ue<6;ue++){if(a&&g.mipmaps&&g.mipmaps.length>0){for(let pe=0;pe<g.mipmaps.length;pe++){_e(N.__webglFramebuffer[ue][pe],S,g,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+ue,pe)}}else{_e(N.__webglFramebuffer[ue],S,g,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+ue,0)}}if(T(g,ge)){v(i.TEXTURE_CUBE_MAP)}t.unbindTexture()}else if(ee){const ue=S.texture;for(let pe=0,ye=ue.length;pe<ye;pe++){const Ie=ue[pe];const Z=n.get(Ie);t.bindTexture(i.TEXTURE_2D,Z.__webglTexture);G(i.TEXTURE_2D,Ie,ge);_e(N.__webglFramebuffer,S,Ie,i.COLOR_ATTACHMENT0+pe,i.TEXTURE_2D,0);if(T(Ie,ge)){v(i.TEXTURE_2D)}}t.unbindTexture()}else{let ue=i.TEXTURE_2D;if(S.isWebGL3DRenderTarget||S.isWebGLArrayRenderTarget){if(a){ue=S.isWebGL3DRenderTarget?i.TEXTURE_3D:i.TEXTURE_2D_ARRAY}else{console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")}}t.bindTexture(ue,te.__webglTexture);G(ue,g,ge);if(a&&g.mipmaps&&g.mipmaps.length>0){for(let pe=0;pe<g.mipmaps.length;pe++){_e(N.__webglFramebuffer[pe],S,g,i.COLOR_ATTACHMENT0,ue,pe)}}else{_e(N.__webglFramebuffer,S,g,i.COLOR_ATTACHMENT0,ue,0)}if(T(g,ge)){v(ue)}t.unbindTexture()}if(S.depthBuffer){Ae(S)}}function ht(S){const g=p(S)||a;const N=S.isWebGLMultipleRenderTargets===true?S.texture:[S.texture];for(let te=0,$=N.length;te<$;te++){const ee=N[te];if(T(ee,g)){const ge=S.isWebGLCubeRenderTarget?i.TEXTURE_CUBE_MAP:i.TEXTURE_2D;const ue=n.get(ee).__webglTexture;t.bindTexture(ge,ue);v(ge);t.unbindTexture()}}}function Ee(S){if(a&&S.samples>0&&me(S)===false){const g=S.isWebGLMultipleRenderTargets?S.texture:[S.texture];const N=S.width;const te=S.height;let $=i.COLOR_BUFFER_BIT;const ee=[];const ge=S.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT;const ue=n.get(S);const pe=S.isWebGLMultipleRenderTargets===true;if(pe){for(let ye=0;ye<g.length;ye++){t.bindFramebuffer(i.FRAMEBUFFER,ue.__webglMultisampledFramebuffer);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+ye,i.RENDERBUFFER,null);t.bindFramebuffer(i.FRAMEBUFFER,ue.__webglFramebuffer);i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+ye,i.TEXTURE_2D,null,0)}}t.bindFramebuffer(i.READ_FRAMEBUFFER,ue.__webglMultisampledFramebuffer);t.bindFramebuffer(i.DRAW_FRAMEBUFFER,ue.__webglFramebuffer);for(let ye=0;ye<g.length;ye++){ee.push(i.COLOR_ATTACHMENT0+ye);if(S.depthBuffer){ee.push(ge)}const Ie=ue.__ignoreDepthValues!==void 0?ue.__ignoreDepthValues:false;if(Ie===false){if(S.depthBuffer)$|=i.DEPTH_BUFFER_BIT;if(S.stencilBuffer)$|=i.STENCIL_BUFFER_BIT}if(pe){i.framebufferRenderbuffer(i.READ_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.RENDERBUFFER,ue.__webglColorRenderbuffer[ye])}if(Ie===true){i.invalidateFramebuffer(i.READ_FRAMEBUFFER,[ge]);i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,[ge])}if(pe){const Z=n.get(g[ye]).__webglTexture;i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,Z,0)}i.blitFramebuffer(0,0,N,te,0,0,N,te,$,i.NEAREST);if(c){i.invalidateFramebuffer(i.READ_FRAMEBUFFER,ee)}}t.bindFramebuffer(i.READ_FRAMEBUFFER,null);t.bindFramebuffer(i.DRAW_FRAMEBUFFER,null);if(pe){for(let ye=0;ye<g.length;ye++){t.bindFramebuffer(i.FRAMEBUFFER,ue.__webglMultisampledFramebuffer);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+ye,i.RENDERBUFFER,ue.__webglColorRenderbuffer[ye]);const Ie=n.get(g[ye]).__webglTexture;t.bindFramebuffer(i.FRAMEBUFFER,ue.__webglFramebuffer);i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+ye,i.TEXTURE_2D,Ie,0)}}t.bindFramebuffer(i.DRAW_FRAMEBUFFER,ue.__webglMultisampledFramebuffer)}}function Re(S){return Math.min(r.maxSamples,S.samples)}function me(S){const g=n.get(S);return a&&S.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===true&&g.__useRenderToTexture!==false}function Qe(S){const g=o.render.frame;if(u.get(S)!==g){u.set(S,g);S.update()}}function De(S,g){const N=S.colorSpace;const te=S.format;const $=S.type;if(S.isCompressedTexture===true||S.isVideoTexture===true||S.format===ks)return g;if(N!==xn&&N!==Wt){if($e.getTransfer(N)===et){if(a===false){if(e.has("EXT_sRGB")===true&&te===Kt){S.format=ks;S.minFilter=Vt;S.generateMipmaps=false}else{g=El.sRGBToLinear(g)}}else{if(te!==Kt||$!==Pn){console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.")}}}else{console.error("THREE.WebGLTextures: Unsupported texture color space:",N)}}return g}this.allocateTextureUnit=P;this.resetTextureUnits=ce;this.setTexture2D=V;this.setTexture2DArray=Y;this.setTexture3D=W;this.setTextureCube=k;this.rebindTextures=ke;this.setupRenderTarget=I;this.updateRenderTargetMipmap=ht;this.updateMultisampleRenderTarget=Ee;this.setupDepthRenderbuffer=Ae;this.setupFrameBufferTexture=_e;this.useMultisampledRTT=me}function mm(i,e,t){const n=t.isWebGL2;function r(s,o=Wt){let a;const l=$e.getTransfer(o);if(s===Pn)return i.UNSIGNED_BYTE;if(s===hl)return i.UNSIGNED_SHORT_4_4_4_4;if(s===dl)return i.UNSIGNED_SHORT_5_5_5_1;if(s===Bc)return i.BYTE;if(s===zc)return i.SHORT;if(s===Js)return i.UNSIGNED_SHORT;if(s===ul)return i.INT;if(s===An)return i.UNSIGNED_INT;if(s===wn)return i.FLOAT;if(s===ki){if(n)return i.HALF_FLOAT;a=e.get("OES_texture_half_float");if(a!==null){return a.HALF_FLOAT_OES}else{return null}}if(s===Hc)return i.ALPHA;if(s===Kt)return i.RGBA;if(s===Gc)return i.LUMINANCE;if(s===Vc)return i.LUMINANCE_ALPHA;if(s===qn)return i.DEPTH_COMPONENT;if(s===Ai)return i.DEPTH_STENCIL;if(s===ks){a=e.get("EXT_sRGB");if(a!==null){return a.SRGB_ALPHA_EXT}else{return null}}if(s===kc)return i.RED;if(s===fl)return i.RED_INTEGER;if(s===Wc)return i.RG;if(s===pl)return i.RG_INTEGER;if(s===ml)return i.RGBA_INTEGER;if(s===ns||s===is||s===rs||s===ss){if(l===et){a=e.get("WEBGL_compressed_texture_s3tc_srgb");if(a!==null){if(s===ns)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(s===is)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(s===rs)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(s===ss)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{return null}}else{a=e.get("WEBGL_compressed_texture_s3tc");if(a!==null){if(s===ns)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===is)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===rs)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===ss)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else{return null}}}if(s===Aa||s===wa||s===Ra||s===Ca){a=e.get("WEBGL_compressed_texture_pvrtc");if(a!==null){if(s===Aa)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===wa)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===Ra)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===Ca)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else{return null}}if(s===gl){a=e.get("WEBGL_compressed_texture_etc1");if(a!==null){return a.COMPRESSED_RGB_ETC1_WEBGL}else{return null}}if(s===La||s===Pa){a=e.get("WEBGL_compressed_texture_etc");if(a!==null){if(s===La)return l===et?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(s===Pa)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}else{return null}}if(s===Da||s===Ua||s===Ia||s===Na||s===Oa||s===Fa||s===Ba||s===za||s===Ha||s===Ga||s===Va||s===ka||s===Wa||s===Xa){a=e.get("WEBGL_compressed_texture_astc");if(a!==null){if(s===Da)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(s===Ua)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(s===Ia)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(s===Na)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(s===Oa)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(s===Fa)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(s===Ba)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(s===za)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(s===Ha)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(s===Ga)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(s===Va)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(s===ka)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(s===Wa)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(s===Xa)return l===et?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}else{return null}}if(s===as||s===Ya||s===qa){a=e.get("EXT_texture_compression_bptc");if(a!==null){if(s===as)return l===et?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(s===Ya)return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(s===qa)return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else{return null}}if(s===Xc||s===ja||s===Ka||s===Za){a=e.get("EXT_texture_compression_rgtc");if(a!==null){if(s===as)return a.COMPRESSED_RED_RGTC1_EXT;if(s===ja)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(s===Ka)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(s===Za)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else{return null}}if(s===Yn){if(n)return i.UNSIGNED_INT_24_8;a=e.get("WEBGL_depth_texture");if(a!==null){return a.UNSIGNED_INT_24_8_WEBGL}else{return null}}return i[s]!==void 0?i[s]:null}return{convert:r}}class gm extends kt{constructor(e=[]){super();this.isArrayCamera=true;this.cameras=e}}class Sr extends mt{constructor(){super();this.isGroup=true;this.type="Group"}}const _m={type:"move"};class Cs{constructor(){this._targetRay=null;this._grip=null;this._hand=null}getHandSpace(){if(this._hand===null){this._hand=new Sr;this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false}}return this._hand}getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new Sr;this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;this._targetRay.hasLinearVelocity=false;this._targetRay.linearVelocity=new L;this._targetRay.hasAngularVelocity=false;this._targetRay.angularVelocity=new L}return this._targetRay}getGripSpace(){if(this._grip===null){this._grip=new Sr;this._grip.matrixAutoUpdate=false;this._grip.visible=false;this._grip.hasLinearVelocity=false;this._grip.linearVelocity=new L;this._grip.hasAngularVelocity=false;this._grip.angularVelocity=new L}return this._grip}dispatchEvent(e){if(this._targetRay!==null){this._targetRay.dispatchEvent(e)}if(this._grip!==null){this._grip.dispatchEvent(e)}if(this._hand!==null){this._hand.dispatchEvent(e)}return this}connect(e){if(e&&e.hand){const t=this._hand;if(t){for(const n of e.hand.values()){this._getHandJoint(t,n)}}}this.dispatchEvent({type:"connected",data:e});return this}disconnect(e){this.dispatchEvent({type:"disconnected",data:e});if(this._targetRay!==null){this._targetRay.visible=false}if(this._grip!==null){this._grip.visible=false}if(this._hand!==null){this._hand.visible=false}return this}update(e,t,n){let r=null;let s=null;let o=null;const a=this._targetRay;const l=this._grip;const c=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(c&&e.hand){o=true;for(const x of e.hand.values()){const p=t.getJointPose(x,n);const h=this._getHandJoint(c,x);if(p!==null){h.matrix.fromArray(p.transform.matrix);h.matrix.decompose(h.position,h.rotation,h.scale);h.matrixWorldNeedsUpdate=true;h.jointRadius=p.radius}h.visible=p!==null}const u=c.joints["index-finger-tip"];const d=c.joints["thumb-tip"];const f=u.position.distanceTo(d.position);const m=.02;const _=.005;if(c.inputState.pinching&&f>m+_){c.inputState.pinching=false;this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})}else if(!c.inputState.pinching&&f<=m-_){c.inputState.pinching=true;this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this})}}else{if(l!==null&&e.gripSpace){s=t.getPose(e.gripSpace,n);if(s!==null){l.matrix.fromArray(s.transform.matrix);l.matrix.decompose(l.position,l.rotation,l.scale);l.matrixWorldNeedsUpdate=true;if(s.linearVelocity){l.hasLinearVelocity=true;l.linearVelocity.copy(s.linearVelocity)}else{l.hasLinearVelocity=false}if(s.angularVelocity){l.hasAngularVelocity=true;l.angularVelocity.copy(s.angularVelocity)}else{l.hasAngularVelocity=false}}}}if(a!==null){r=t.getPose(e.targetRaySpace,n);if(r===null&&s!==null){r=s}if(r!==null){a.matrix.fromArray(r.transform.matrix);a.matrix.decompose(a.position,a.rotation,a.scale);a.matrixWorldNeedsUpdate=true;if(r.linearVelocity){a.hasLinearVelocity=true;a.linearVelocity.copy(r.linearVelocity)}else{a.hasLinearVelocity=false}if(r.angularVelocity){a.hasAngularVelocity=true;a.angularVelocity.copy(r.angularVelocity)}else{a.hasAngularVelocity=false}this.dispatchEvent(_m)}}}if(a!==null){a.visible=r!==null}if(l!==null){l.visible=s!==null}if(c!==null){c.visible=o!==null}return this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new Sr;n.matrixAutoUpdate=false;n.visible=false;e.joints[t.jointName]=n;e.add(n)}return e.joints[t.jointName]}}class vm extends Jn{constructor(e,t){super();const n=this;let r=null;let s=1;let o=null;let a="local-floor";let l=1;let c=null;let u=null;let d=null;let f=null;let m=null;let _=null;const x=t.getContextAttributes();let p=null;let h=null;const T=[];const v=[];const R=new Pe;let D=null;const C=new kt;C.layers.enable(1);C.viewport=new it;const A=new kt;A.layers.enable(2);A.viewport=new it;const X=[C,A];const E=new gm;E.layers.enable(1);E.layers.enable(2);let y=null;let H=null;this.cameraAutoUpdate=true;this.enabled=false;this.isPresenting=false;this.getController=function(G){let K=T[G];if(K===void 0){K=new Cs;T[G]=K}return K.getTargetRaySpace()};this.getControllerGrip=function(G){let K=T[G];if(K===void 0){K=new Cs;T[G]=K}return K.getGripSpace()};this.getHand=function(G){let K=T[G];if(K===void 0){K=new Cs;T[G]=K}return K.getHandSpace()};function j(G){const K=v.indexOf(G.inputSource);if(K===-1){return}const he=T[K];if(he!==void 0){he.update(G.inputSource,G.frame,c||o);he.dispatchEvent({type:G.type,data:G.inputSource})}}function ce(){r.removeEventListener("select",j);r.removeEventListener("selectstart",j);r.removeEventListener("selectend",j);r.removeEventListener("squeeze",j);r.removeEventListener("squeezestart",j);r.removeEventListener("squeezeend",j);r.removeEventListener("end",ce);r.removeEventListener("inputsourceschange",P);for(let G=0;G<T.length;G++){const K=v[G];if(K===null)continue;v[G]=null;T[G].disconnect(K)}y=null;H=null;e.setRenderTarget(p);m=null;f=null;d=null;r=null;h=null;de.stop();n.isPresenting=false;e.setPixelRatio(D);e.setSize(R.width,R.height,false);n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(G){s=G;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")}};this.setReferenceSpaceType=function(G){a=G;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")}};this.getReferenceSpace=function(){return c||o};this.setReferenceSpace=function(G){c=G};this.getBaseLayer=function(){return f!==null?f:m};this.getBinding=function(){return d};this.getFrame=function(){return _};this.getSession=function(){return r};this.setSession=async function(G){r=G;if(r!==null){p=e.getRenderTarget();r.addEventListener("select",j);r.addEventListener("selectstart",j);r.addEventListener("selectend",j);r.addEventListener("squeeze",j);r.addEventListener("squeezestart",j);r.addEventListener("squeezeend",j);r.addEventListener("end",ce);r.addEventListener("inputsourceschange",P);if(x.xrCompatible!==true){await t.makeXRCompatible()}D=e.getPixelRatio();e.getSize(R);if(r.renderState.layers===void 0||e.capabilities.isWebGL2===false){const K={antialias:r.renderState.layers===void 0?x.antialias:true,alpha:true,depth:x.depth,stencil:x.stencil,framebufferScaleFactor:s};m=new XRWebGLLayer(r,t,K);r.updateRenderState({baseLayer:m});e.setPixelRatio(1);e.setSize(m.framebufferWidth,m.framebufferHeight,false);h=new Zn(m.framebufferWidth,m.framebufferHeight,{format:Kt,type:Pn,colorSpace:e.outputColorSpace,stencilBuffer:x.stencil})}else{let K=null;let he=null;let xe=null;if(x.depth){xe=x.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24;K=x.stencil?Ai:qn;he=x.stencil?Yn:An}const _e={colorFormat:t.RGBA8,depthFormat:xe,scaleFactor:s};d=new XRWebGLBinding(r,t);f=d.createProjectionLayer(_e);r.updateRenderState({layers:[f]});e.setPixelRatio(1);e.setSize(f.textureWidth,f.textureHeight,false);h=new Zn(f.textureWidth,f.textureHeight,{format:Kt,type:Pn,depthTexture:new Nl(f.textureWidth,f.textureHeight,he,void 0,void 0,void 0,void 0,void 0,void 0,K),stencilBuffer:x.stencil,colorSpace:e.outputColorSpace,samples:x.antialias?4:0});const Ce=e.properties.get(h);Ce.__ignoreDepthValues=f.ignoreDepthValues}h.isXRRenderTarget=true;this.setFoveation(l);c=null;o=await r.requestReferenceSpace(a);de.setContext(r);de.start();n.isPresenting=true;n.dispatchEvent({type:"sessionstart"})}};this.getEnvironmentBlendMode=function(){if(r!==null){return r.environmentBlendMode}};function P(G){for(let K=0;K<G.removed.length;K++){const he=G.removed[K];const xe=v.indexOf(he);if(xe>=0){v[xe]=null;T[xe].disconnect(he)}}for(let K=0;K<G.added.length;K++){const he=G.added[K];let xe=v.indexOf(he);if(xe===-1){for(let Ce=0;Ce<T.length;Ce++){if(Ce>=v.length){v.push(he);xe=Ce;break}else if(v[Ce]===null){v[Ce]=he;xe=Ce;break}}if(xe===-1)break}const _e=T[xe];if(_e){_e.connect(he)}}}const F=new L;const V=new L;function Y(G,K,he){F.setFromMatrixPosition(K.matrixWorld);V.setFromMatrixPosition(he.matrixWorld);const xe=F.distanceTo(V);const _e=K.projectionMatrix.elements;const Ce=he.projectionMatrix.elements;const Le=_e[14]/(_e[10]-1);const Ae=_e[14]/(_e[10]+1);const ke=(_e[9]+1)/_e[5];const I=(_e[9]-1)/_e[5];const ht=(_e[8]-1)/_e[0];const Ee=(Ce[8]+1)/Ce[0];const Re=Le*ht;const me=Le*Ee;const Qe=xe/(-ht+Ee);const De=Qe*-ht;K.matrixWorld.decompose(G.position,G.quaternion,G.scale);G.translateX(De);G.translateZ(Qe);G.matrixWorld.compose(G.position,G.quaternion,G.scale);G.matrixWorldInverse.copy(G.matrixWorld).invert();const S=Le+Qe;const g=Ae+Qe;const N=Re-De;const te=me+(xe-De);const $=ke*Ae/g*S;const ee=I*Ae/g*S;G.projectionMatrix.makePerspective(N,te,$,ee,S,g);G.projectionMatrixInverse.copy(G.projectionMatrix).invert()}function W(G,K){if(K===null){G.matrixWorld.copy(G.matrix)}else{G.matrixWorld.multiplyMatrices(K.matrixWorld,G.matrix)}G.matrixWorldInverse.copy(G.matrixWorld).invert()}this.updateCamera=function(G){if(r===null)return;E.near=A.near=C.near=G.near;E.far=A.far=C.far=G.far;if(y!==E.near||H!==E.far){r.updateRenderState({depthNear:E.near,depthFar:E.far});y=E.near;H=E.far}const K=G.parent;const he=E.cameras;W(E,K);for(let xe=0;xe<he.length;xe++){W(he[xe],K)}if(he.length===2){Y(E,C,A)}else{E.projectionMatrix.copy(C.projectionMatrix)}k(G,E,K)};function k(G,K,he){if(he===null){G.matrix.copy(K.matrixWorld)}else{G.matrix.copy(he.matrixWorld);G.matrix.invert();G.matrix.multiply(K.matrixWorld)}G.matrix.decompose(G.position,G.quaternion,G.scale);G.updateMatrixWorld(true);G.projectionMatrix.copy(K.projectionMatrix);G.projectionMatrixInverse.copy(K.projectionMatrixInverse);if(G.isPerspectiveCamera){G.fov=Wi*2*Math.atan(1/G.projectionMatrix.elements[5]);G.zoom=1}}this.getCamera=function(){return E};this.getFoveation=function(){if(f===null&&m===null){return void 0}return l};this.setFoveation=function(G){l=G;if(f!==null){f.fixedFoveation=G}if(m!==null&&m.fixedFoveation!==void 0){m.fixedFoveation=G}};let Q=null;function ne(G,K){u=K.getViewerPose(c||o);_=K;if(u!==null){const he=u.views;if(m!==null){e.setRenderTargetFramebuffer(h,m.framebuffer);e.setRenderTarget(h)}let xe=false;if(he.length!==E.cameras.length){E.cameras.length=0;xe=true}for(let _e=0;_e<he.length;_e++){const Ce=he[_e];let Le=null;if(m!==null){Le=m.getViewport(Ce)}else{const ke=d.getViewSubImage(f,Ce);Le=ke.viewport;if(_e===0){e.setRenderTargetTextures(h,ke.colorTexture,f.ignoreDepthValues?void 0:ke.depthStencilTexture);e.setRenderTarget(h)}}let Ae=X[_e];if(Ae===void 0){Ae=new kt;Ae.layers.enable(_e);Ae.viewport=new it;X[_e]=Ae}Ae.matrix.fromArray(Ce.transform.matrix);Ae.matrix.decompose(Ae.position,Ae.quaternion,Ae.scale);Ae.projectionMatrix.fromArray(Ce.projectionMatrix);Ae.projectionMatrixInverse.copy(Ae.projectionMatrix).invert();Ae.viewport.set(Le.x,Le.y,Le.width,Le.height);if(_e===0){E.matrix.copy(Ae.matrix);E.matrix.decompose(E.position,E.quaternion,E.scale)}if(xe===true){E.cameras.push(Ae)}}}for(let he=0;he<T.length;he++){const xe=v[he];const _e=T[he];if(xe!==null&&_e!==void 0){_e.update(xe,K,c||o)}}if(Q)Q(G,K);if(K.detectedPlanes){n.dispatchEvent({type:"planesdetected",data:K})}_=null}const de=new Ul;de.setAnimationLoop(ne);this.setAnimationLoop=function(G){Q=G};this.dispose=function(){}}}function xm(i,e){function t(p,h){if(p.matrixAutoUpdate===true){p.updateMatrix()}h.value.copy(p.matrix)}function n(p,h){h.color.getRGB(p.fogColor.value,Ll(i));if(h.isFog){p.fogNear.value=h.near;p.fogFar.value=h.far}else if(h.isFogExp2){p.fogDensity.value=h.density}}function r(p,h,T,v,R){if(h.isMeshBasicMaterial){s(p,h)}else if(h.isMeshLambertMaterial){s(p,h)}else if(h.isMeshToonMaterial){s(p,h);d(p,h)}else if(h.isMeshPhongMaterial){s(p,h);u(p,h)}else if(h.isMeshStandardMaterial){s(p,h);f(p,h);if(h.isMeshPhysicalMaterial){m(p,h,R)}}else if(h.isMeshMatcapMaterial){s(p,h);_(p,h)}else if(h.isMeshDepthMaterial){s(p,h)}else if(h.isMeshDistanceMaterial){s(p,h);x(p,h)}else if(h.isMeshNormalMaterial){s(p,h)}else if(h.isLineBasicMaterial){o(p,h);if(h.isLineDashedMaterial){a(p,h)}}else if(h.isPointsMaterial){l(p,h,T,v)}else if(h.isSpriteMaterial){c(p,h)}else if(h.isShadowMaterial){p.color.value.copy(h.color);p.opacity.value=h.opacity}else if(h.isShaderMaterial){h.uniformsNeedUpdate=false}}function s(p,h){p.opacity.value=h.opacity;if(h.color){p.diffuse.value.copy(h.color)}if(h.emissive){p.emissive.value.copy(h.emissive).multiplyScalar(h.emissiveIntensity)}if(h.map){p.map.value=h.map;t(h.map,p.mapTransform)}if(h.alphaMap){p.alphaMap.value=h.alphaMap;t(h.alphaMap,p.alphaMapTransform)}if(h.bumpMap){p.bumpMap.value=h.bumpMap;t(h.bumpMap,p.bumpMapTransform);p.bumpScale.value=h.bumpScale;if(h.side===Pt){p.bumpScale.value*=-1}}if(h.normalMap){p.normalMap.value=h.normalMap;t(h.normalMap,p.normalMapTransform);p.normalScale.value.copy(h.normalScale);if(h.side===Pt){p.normalScale.value.negate()}}if(h.displacementMap){p.displacementMap.value=h.displacementMap;t(h.displacementMap,p.displacementMapTransform);p.displacementScale.value=h.displacementScale;p.displacementBias.value=h.displacementBias}if(h.emissiveMap){p.emissiveMap.value=h.emissiveMap;t(h.emissiveMap,p.emissiveMapTransform)}if(h.specularMap){p.specularMap.value=h.specularMap;t(h.specularMap,p.specularMapTransform)}if(h.alphaTest>0){p.alphaTest.value=h.alphaTest}const T=e.get(h).envMap;if(T){p.envMap.value=T;p.flipEnvMap.value=T.isCubeTexture&&T.isRenderTargetTexture===false?-1:1;p.reflectivity.value=h.reflectivity;p.ior.value=h.ior;p.refractionRatio.value=h.refractionRatio}if(h.lightMap){p.lightMap.value=h.lightMap;const v=i._useLegacyLights===true?Math.PI:1;p.lightMapIntensity.value=h.lightMapIntensity*v;t(h.lightMap,p.lightMapTransform)}if(h.aoMap){p.aoMap.value=h.aoMap;p.aoMapIntensity.value=h.aoMapIntensity;t(h.aoMap,p.aoMapTransform)}}function o(p,h){p.diffuse.value.copy(h.color);p.opacity.value=h.opacity;if(h.map){p.map.value=h.map;t(h.map,p.mapTransform)}}function a(p,h){p.dashSize.value=h.dashSize;p.totalSize.value=h.dashSize+h.gapSize;p.scale.value=h.scale}function l(p,h,T,v){p.diffuse.value.copy(h.color);p.opacity.value=h.opacity;p.size.value=h.size*T;p.scale.value=v*.5;if(h.map){p.map.value=h.map;t(h.map,p.uvTransform)}if(h.alphaMap){p.alphaMap.value=h.alphaMap;t(h.alphaMap,p.alphaMapTransform)}if(h.alphaTest>0){p.alphaTest.value=h.alphaTest}}function c(p,h){p.diffuse.value.copy(h.color);p.opacity.value=h.opacity;p.rotation.value=h.rotation;if(h.map){p.map.value=h.map;t(h.map,p.mapTransform)}if(h.alphaMap){p.alphaMap.value=h.alphaMap;t(h.alphaMap,p.alphaMapTransform)}if(h.alphaTest>0){p.alphaTest.value=h.alphaTest}}function u(p,h){p.specular.value.copy(h.specular);p.shininess.value=Math.max(h.shininess,1e-4)}function d(p,h){if(h.gradientMap){p.gradientMap.value=h.gradientMap}}function f(p,h){p.metalness.value=h.metalness;if(h.metalnessMap){p.metalnessMap.value=h.metalnessMap;t(h.metalnessMap,p.metalnessMapTransform)}p.roughness.value=h.roughness;if(h.roughnessMap){p.roughnessMap.value=h.roughnessMap;t(h.roughnessMap,p.roughnessMapTransform)}const T=e.get(h).envMap;if(T){p.envMapIntensity.value=h.envMapIntensity}}function m(p,h,T){p.ior.value=h.ior;if(h.sheen>0){p.sheenColor.value.copy(h.sheenColor).multiplyScalar(h.sheen);p.sheenRoughness.value=h.sheenRoughness;if(h.sheenColorMap){p.sheenColorMap.value=h.sheenColorMap;t(h.sheenColorMap,p.sheenColorMapTransform)}if(h.sheenRoughnessMap){p.sheenRoughnessMap.value=h.sheenRoughnessMap;t(h.sheenRoughnessMap,p.sheenRoughnessMapTransform)}}if(h.clearcoat>0){p.clearcoat.value=h.clearcoat;p.clearcoatRoughness.value=h.clearcoatRoughness;if(h.clearcoatMap){p.clearcoatMap.value=h.clearcoatMap;t(h.clearcoatMap,p.clearcoatMapTransform)}if(h.clearcoatRoughnessMap){p.clearcoatRoughnessMap.value=h.clearcoatRoughnessMap;t(h.clearcoatRoughnessMap,p.clearcoatRoughnessMapTransform)}if(h.clearcoatNormalMap){p.clearcoatNormalMap.value=h.clearcoatNormalMap;t(h.clearcoatNormalMap,p.clearcoatNormalMapTransform);p.clearcoatNormalScale.value.copy(h.clearcoatNormalScale);if(h.side===Pt){p.clearcoatNormalScale.value.negate()}}}if(h.iridescence>0){p.iridescence.value=h.iridescence;p.iridescenceIOR.value=h.iridescenceIOR;p.iridescenceThicknessMinimum.value=h.iridescenceThicknessRange[0];p.iridescenceThicknessMaximum.value=h.iridescenceThicknessRange[1];if(h.iridescenceMap){p.iridescenceMap.value=h.iridescenceMap;t(h.iridescenceMap,p.iridescenceMapTransform)}if(h.iridescenceThicknessMap){p.iridescenceThicknessMap.value=h.iridescenceThicknessMap;t(h.iridescenceThicknessMap,p.iridescenceThicknessMapTransform)}}if(h.transmission>0){p.transmission.value=h.transmission;p.transmissionSamplerMap.value=T.texture;p.transmissionSamplerSize.value.set(T.width,T.height);if(h.transmissionMap){p.transmissionMap.value=h.transmissionMap;t(h.transmissionMap,p.transmissionMapTransform)}p.thickness.value=h.thickness;if(h.thicknessMap){p.thicknessMap.value=h.thicknessMap;t(h.thicknessMap,p.thicknessMapTransform)}p.attenuationDistance.value=h.attenuationDistance;p.attenuationColor.value.copy(h.attenuationColor)}if(h.anisotropy>0){p.anisotropyVector.value.set(h.anisotropy*Math.cos(h.anisotropyRotation),h.anisotropy*Math.sin(h.anisotropyRotation));if(h.anisotropyMap){p.anisotropyMap.value=h.anisotropyMap;t(h.anisotropyMap,p.anisotropyMapTransform)}}p.specularIntensity.value=h.specularIntensity;p.specularColor.value.copy(h.specularColor);if(h.specularColorMap){p.specularColorMap.value=h.specularColorMap;t(h.specularColorMap,p.specularColorMapTransform)}if(h.specularIntensityMap){p.specularIntensityMap.value=h.specularIntensityMap;t(h.specularIntensityMap,p.specularIntensityMapTransform)}}function _(p,h){if(h.matcap){p.matcap.value=h.matcap}}function x(p,h){const T=e.get(h).light;p.referencePosition.value.setFromMatrixPosition(T.matrixWorld);p.nearDistance.value=T.shadow.camera.near;p.farDistance.value=T.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:r}}function Mm(i,e,t,n){let r={};let s={};let o=[];const a=t.isWebGL2?i.getParameter(i.MAX_UNIFORM_BUFFER_BINDINGS):0;function l(T,v){const R=v.program;n.uniformBlockBinding(T,R)}function c(T,v){let R=r[T.id];if(R===void 0){_(T);R=u(T);r[T.id]=R;T.addEventListener("dispose",p)}const D=v.program;n.updateUBOMapping(T,D);const C=e.render.frame;if(s[T.id]!==C){f(T);s[T.id]=C}}function u(T){const v=d();T.__bindingPointIndex=v;const R=i.createBuffer();const D=T.__size;const C=T.usage;i.bindBuffer(i.UNIFORM_BUFFER,R);i.bufferData(i.UNIFORM_BUFFER,D,C);i.bindBuffer(i.UNIFORM_BUFFER,null);i.bindBufferBase(i.UNIFORM_BUFFER,v,R);return R}function d(){for(let T=0;T<a;T++){if(o.indexOf(T)===-1){o.push(T);return T}}console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");return 0}function f(T){const v=r[T.id];const R=T.uniforms;const D=T.__cache;i.bindBuffer(i.UNIFORM_BUFFER,v);for(let C=0,A=R.length;C<A;C++){const X=Array.isArray(R[C])?R[C]:[R[C]];for(let E=0,y=X.length;E<y;E++){const H=X[E];if(m(H,C,E,D)===true){const j=H.__offset;const ce=Array.isArray(H.value)?H.value:[H.value];let P=0;for(let F=0;F<ce.length;F++){const V=ce[F];const Y=x(V);if(typeof V==="number"||typeof V==="boolean"){H.__data[0]=V;i.bufferSubData(i.UNIFORM_BUFFER,j+P,H.__data)}else if(V.isMatrix3){H.__data[0]=V.elements[0];H.__data[1]=V.elements[1];H.__data[2]=V.elements[2];H.__data[3]=0;H.__data[4]=V.elements[3];H.__data[5]=V.elements[4];H.__data[6]=V.elements[5];H.__data[7]=0;H.__data[8]=V.elements[6];H.__data[9]=V.elements[7];H.__data[10]=V.elements[8];H.__data[11]=0}else{V.toArray(H.__data,P);P+=Y.storage/Float32Array.BYTES_PER_ELEMENT}}i.bufferSubData(i.UNIFORM_BUFFER,j,H.__data)}}}i.bindBuffer(i.UNIFORM_BUFFER,null)}function m(T,v,R,D){const C=T.value;const A=v+"_"+R;if(D[A]===void 0){if(typeof C==="number"||typeof C==="boolean"){D[A]=C}else{D[A]=C.clone()}return true}else{const X=D[A];if(typeof C==="number"||typeof C==="boolean"){if(X!==C){D[A]=C;return true}}else{if(X.equals(C)===false){X.copy(C);return true}}}return false}function _(T){const v=T.uniforms;let R=0;const D=16;for(let A=0,X=v.length;A<X;A++){const E=Array.isArray(v[A])?v[A]:[v[A]];for(let y=0,H=E.length;y<H;y++){const j=E[y];const ce=Array.isArray(j.value)?j.value:[j.value];for(let P=0,F=ce.length;P<F;P++){const V=ce[P];const Y=x(V);const W=R%D;if(W!==0&&D-W<Y.boundary){R+=D-W}j.__data=new Float32Array(Y.storage/Float32Array.BYTES_PER_ELEMENT);j.__offset=R;R+=Y.storage}}}const C=R%D;if(C>0)R+=D-C;T.__size=R;T.__cache={};return this}function x(T){const v={boundary:0,storage:0};if(typeof T==="number"||typeof T==="boolean"){v.boundary=4;v.storage=4}else if(T.isVector2){v.boundary=8;v.storage=8}else if(T.isVector3||T.isColor){v.boundary=16;v.storage=12}else if(T.isVector4){v.boundary=16;v.storage=16}else if(T.isMatrix3){v.boundary=48;v.storage=48}else if(T.isMatrix4){v.boundary=64;v.storage=64}else if(T.isTexture){console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.")}else{console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",T)}return v}function p(T){const v=T.target;v.removeEventListener("dispose",p);const R=o.indexOf(v.__bindingPointIndex);o.splice(R,1);i.deleteBuffer(r[v.id]);delete r[v.id];delete s[v.id]}function h(){for(const T in r){i.deleteBuffer(r[T])}o=[];r={};s={}}return{bind:l,update:c,dispose:h}}class Gl{constructor(e={}){const{canvas:t=gu(),context:n=null,depth:r=true,stencil:s=true,alpha:o=false,antialias:a=false,premultipliedAlpha:l=true,preserveDrawingBuffer:c=false,powerPreference:u="default",failIfMajorPerformanceCaveat:d=false}=e;this.isWebGLRenderer=true;let f;if(n!==null){f=n.getContextAttributes().alpha}else{f=o}const m=new Uint32Array(4);const _=new Int32Array(4);let x=null;let p=null;const h=[];const T=[];this.domElement=t;this.debug={checkShaderErrors:true,onShaderError:null};this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;this.sortObjects=true;this.clippingPlanes=[];this.localClippingEnabled=false;this._outputColorSpace=pt;this._useLegacyLights=false;this.toneMapping=Ln;this.toneMappingExposure=1;const v=this;let R=false;let D=0;let C=0;let A=null;let X=-1;let E=null;const y=new it;const H=new it;let j=null;const ce=new Ye(0);let P=0;let F=t.width;let V=t.height;let Y=1;let W=null;let k=null;const Q=new it(0,0,F,V);const ne=new it(0,0,F,V);let de=false;const G=new ia;let K=false;let he=false;let xe=null;const _e=new st;const Ce=new Pe;const Le=new L;const Ae={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};function ke(){return A===null?Y:1}let I=n;function ht(M,U){for(let B=0;B<M.length;B++){const z=M[B];const O=t.getContext(z,U);if(O!==null)return O}return null}try{const M={alpha:true,depth:r,stencil:s,antialias:a,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:u,failIfMajorPerformanceCaveat:d};if("setAttribute"in t)t.setAttribute("data-engine",`three.js r${Zs}`);t.addEventListener("webglcontextlost",oe,false);t.addEventListener("webglcontextrestored",w,false);t.addEventListener("webglcontextcreationerror",re,false);if(I===null){const U=["webgl2","webgl","experimental-webgl"];if(v.isWebGL1Renderer===true){U.shift()}I=ht(U,M);if(I===null){if(ht(U)){throw new Error("Error creating WebGL context with your selected attributes.")}else{throw new Error("Error creating WebGL context.")}}}if(typeof WebGLRenderingContext!=="undefined"&&I instanceof WebGLRenderingContext){console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.")}if(I.getShaderPrecisionFormat===void 0){I.getShaderPrecisionFormat=function(){return{"rangeMin":1,"rangeMax":1,"precision":1}}}}catch(M){console.error("THREE.WebGLRenderer: "+M.message);throw M}let Ee,Re,me,Qe;let De,S,g,N,te,$,ee;let ge,ue,pe,ye,Ie,Z;let We,b,q,le;let ie,ve,ze;function Xe(){Ee=new Lf(I);Re=new Tf(I,Ee,e);Ee.init(Re);ie=new mm(I,Ee,Re);me=new fm(I,Ee,Re);Qe=new Uf(I);De=new Qp;S=new pm(I,Ee,me,De,Re,ie,Qe);g=new Af(v);N=new Cf(v);te=new Hu(I,Re);ve=new Ef(I,Ee,te,Re);$=new Pf(I,te,Qe,ve);ee=new Ff(I,$,te,Qe);b=new Of(I,Re,S);Ie=new bf(De);ge=new Jp(v,g,N,Ee,Re,ve,Ie);ue=new xm(v,De);pe=new tm;ye=new om(Ee,Re);We=new Sf(v,g,N,me,ee,f,l);Z=new dm(v,ee,Re);ze=new Mm(I,Qe,Re,me);q=new yf(I,Ee,Qe,Re);le=new Df(I,Ee,Qe,Re);Qe.programs=ge.programs;v.capabilities=Re;v.extensions=Ee;v.properties=De;v.renderLists=pe;v.shadowMap=Z;v.state=me;v.info=Qe}Xe();const Fe=new vm(v,I);this.xr=Fe;this.getContext=function(){return I};this.getContextAttributes=function(){return I.getContextAttributes()};this.forceContextLoss=function(){const M=Ee.get("WEBGL_lose_context");if(M)M.loseContext()};this.forceContextRestore=function(){const M=Ee.get("WEBGL_lose_context");if(M)M.restoreContext()};this.getPixelRatio=function(){return Y};this.setPixelRatio=function(M){if(M===void 0)return;Y=M;this.setSize(F,V,false)};this.getSize=function(M){return M.set(F,V)};this.setSize=function(M,U,B=true){if(Fe.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}F=M;V=U;t.width=Math.floor(M*Y);t.height=Math.floor(U*Y);if(B===true){t.style.width=M+"px";t.style.height=U+"px"}this.setViewport(0,0,M,U)};this.getDrawingBufferSize=function(M){return M.set(F*Y,V*Y).floor()};this.setDrawingBufferSize=function(M,U,B){F=M;V=U;Y=B;t.width=Math.floor(M*B);t.height=Math.floor(U*B);this.setViewport(0,0,M,U)};this.getCurrentViewport=function(M){return M.copy(y)};this.getViewport=function(M){return M.copy(Q)};this.setViewport=function(M,U,B,z){if(M.isVector4){Q.set(M.x,M.y,M.z,M.w)}else{Q.set(M,U,B,z)}me.viewport(y.copy(Q).multiplyScalar(Y).floor())};this.getScissor=function(M){return M.copy(ne)};this.setScissor=function(M,U,B,z){if(M.isVector4){ne.set(M.x,M.y,M.z,M.w)}else{ne.set(M,U,B,z)}me.scissor(H.copy(ne).multiplyScalar(Y).floor())};this.getScissorTest=function(){return de};this.setScissorTest=function(M){me.setScissorTest(de=M)};this.setOpaqueSort=function(M){W=M};this.setTransparentSort=function(M){k=M};this.getClearColor=function(M){return M.copy(We.getClearColor())};this.setClearColor=function(){We.setClearColor.apply(We,arguments)};this.getClearAlpha=function(){return We.getClearAlpha()};this.setClearAlpha=function(){We.setClearAlpha.apply(We,arguments)};this.clear=function(M=true,U=true,B=true){let z=0;if(M){let O=false;if(A!==null){const fe=A.texture.format;O=fe===ml||fe===pl||fe===fl}if(O){const fe=A.texture.type;const Se=fe===Pn||fe===An||fe===Js||fe===Yn||fe===hl||fe===dl;const be=We.getClearColor();const we=We.getClearAlpha();const Be=be.r;const Ue=be.g;const Ne=be.b;if(Se){m[0]=Be;m[1]=Ue;m[2]=Ne;m[3]=we;I.clearBufferuiv(I.COLOR,0,m)}else{_[0]=Be;_[1]=Ue;_[2]=Ne;_[3]=we;I.clearBufferiv(I.COLOR,0,_)}}else{z|=I.COLOR_BUFFER_BIT}}if(U)z|=I.DEPTH_BUFFER_BIT;if(B){z|=I.STENCIL_BUFFER_BIT;this.state.buffers.stencil.setMask(4294967295)}I.clear(z)};this.clearColor=function(){this.clear(true,false,false)};this.clearDepth=function(){this.clear(false,true,false)};this.clearStencil=function(){this.clear(false,false,true)};this.dispose=function(){t.removeEventListener("webglcontextlost",oe,false);t.removeEventListener("webglcontextrestored",w,false);t.removeEventListener("webglcontextcreationerror",re,false);pe.dispose();ye.dispose();De.dispose();g.dispose();N.dispose();ee.dispose();ve.dispose();ze.dispose();ge.dispose();Fe.dispose();Fe.removeEventListener("sessionstart",bt);Fe.removeEventListener("sessionend",Je);if(xe){xe.dispose();xe=null}At.stop()};function oe(M){M.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");R=true}function w(){console.log("THREE.WebGLRenderer: Context Restored.");R=false;const M=Qe.autoReset;const U=Z.enabled;const B=Z.autoUpdate;const z=Z.needsUpdate;const O=Z.type;Xe();Qe.autoReset=M;Z.enabled=U;Z.autoUpdate=B;Z.needsUpdate=z;Z.type=O}function re(M){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",M.statusMessage)}function se(M){const U=M.target;U.removeEventListener("dispose",se);Te(U)}function Te(M){Me(M);De.remove(M)}function Me(M){const U=De.get(M).programs;if(U!==void 0){U.forEach(function(B){ge.releaseProgram(B)});if(M.isShaderMaterial){ge.releaseShaderCache(M)}}}this.renderBufferDirect=function(M,U,B,z,O,fe){if(U===null)U=Ae;const Se=O.isMesh&&O.matrixWorld.determinant()<0;const be=$l(M,U,B,z,O);me.setMaterial(z,Se);let we=B.index;let Be=1;if(z.wireframe===true){we=$.getWireframeAttribute(B);if(we===void 0)return;Be=2}const Ue=B.drawRange;const Ne=B.attributes.position;let rt=Ue.start*Be;let Ut=(Ue.start+Ue.count)*Be;if(fe!==null){rt=Math.max(rt,fe.start*Be);Ut=Math.min(Ut,(fe.start+fe.count)*Be)}if(we!==null){rt=Math.max(rt,0);Ut=Math.min(Ut,we.count)}else if(Ne!==void 0&&Ne!==null){rt=Math.max(rt,0);Ut=Math.min(Ut,Ne.count)}const dt=Ut-rt;if(dt<0||dt===Infinity)return;ve.setup(O,z,be,B,we);let ln;let tt=q;if(we!==null){ln=te.get(we);tt=le;tt.setIndex(ln)}if(O.isMesh){if(z.wireframe===true){me.setLineWidth(z.wireframeLinewidth*ke());tt.setMode(I.LINES)}else{tt.setMode(I.TRIANGLES)}}else if(O.isLine){let He=z.linewidth;if(He===void 0)He=1;me.setLineWidth(He*ke());if(O.isLineSegments){tt.setMode(I.LINES)}else if(O.isLineLoop){tt.setMode(I.LINE_LOOP)}else{tt.setMode(I.LINE_STRIP)}}else if(O.isPoints){tt.setMode(I.POINTS)}else if(O.isSprite){tt.setMode(I.TRIANGLES)}if(O.isBatchedMesh){tt.renderMultiDraw(O._multiDrawStarts,O._multiDrawCounts,O._multiDrawCount)}else if(O.isInstancedMesh){tt.renderInstances(rt,dt,O.count)}else if(B.isInstancedBufferGeometry){const He=B._maxInstanceCount!==void 0?B._maxInstanceCount:Infinity;const jr=Math.min(B.instanceCount,He);tt.renderInstances(rt,dt,jr)}else{tt.render(rt,dt)}};function qe(M,U,B){if(M.transparent===true&&M.side===nn&&M.forceSinglePass===false){M.side=Pt;M.needsUpdate=true;Ji(M,U,B);M.side=Un;M.needsUpdate=true;Ji(M,U,B);M.side=nn}else{Ji(M,U,B)}}this.compile=function(M,U,B=null){if(B===null)B=M;p=ye.get(B);p.init();T.push(p);B.traverseVisible(function(O){if(O.isLight&&O.layers.test(U.layers)){p.pushLight(O);if(O.castShadow){p.pushShadow(O)}}});if(M!==B){M.traverseVisible(function(O){if(O.isLight&&O.layers.test(U.layers)){p.pushLight(O);if(O.castShadow){p.pushShadow(O)}}})}p.setupLights(v._useLegacyLights);const z=new Set;M.traverse(function(O){const fe=O.material;if(fe){if(Array.isArray(fe)){for(let Se=0;Se<fe.length;Se++){const be=fe[Se];qe(be,B,O);z.add(be)}}else{qe(fe,B,O);z.add(fe)}}});T.pop();p=null;return z};this.compileAsync=function(M,U,B=null){const z=this.compile(M,U,B);return new Promise(O=>{function fe(){z.forEach(function(Se){const be=De.get(Se);const we=be.currentProgram;if(we.isReady()){z.delete(Se)}});if(z.size===0){O(M);return}setTimeout(fe,10)}if(Ee.get("KHR_parallel_shader_compile")!==null){fe()}else{setTimeout(fe,10)}})};let je=null;function ot(M){if(je)je(M)}function bt(){At.stop()}function Je(){At.start()}const At=new Ul;At.setAnimationLoop(ot);if(typeof self!=="undefined")At.setContext(self);this.setAnimationLoop=function(M){je=M;Fe.setAnimationLoop(M);M===null?At.stop():At.start()};Fe.addEventListener("sessionstart",bt);Fe.addEventListener("sessionend",Je);this.render=function(M,U){if(U!==void 0&&U.isCamera!==true){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(R===true)return;if(M.matrixWorldAutoUpdate===true)M.updateMatrixWorld();if(U.parent===null&&U.matrixWorldAutoUpdate===true)U.updateMatrixWorld();if(Fe.enabled===true&&Fe.isPresenting===true){if(Fe.cameraAutoUpdate===true)Fe.updateCamera(U);U=Fe.getCamera()}if(M.isScene===true)M.onBeforeRender(v,M,U,A);p=ye.get(M,T.length);p.init();T.push(p);_e.multiplyMatrices(U.projectionMatrix,U.matrixWorldInverse);G.setFromProjectionMatrix(_e);he=this.localClippingEnabled;K=Ie.init(this.clippingPlanes,he);x=pe.get(M,h.length);x.init();h.push(x);$t(M,U,0,v.sortObjects);x.finish();if(v.sortObjects===true){x.sort(W,k)}this.info.render.frame++;if(K===true)Ie.beginShadows();const B=p.state.shadowsArray;Z.render(B,M,U);if(K===true)Ie.endShadows();if(this.info.autoReset===true)this.info.reset();We.render(x,M);p.setupLights(v._useLegacyLights);if(U.isArrayCamera){const z=U.cameras;for(let O=0,fe=z.length;O<fe;O++){const Se=z[O];fa(x,M,Se,Se.viewport)}}else{fa(x,M,U)}if(A!==null){S.updateMultisampleRenderTarget(A);S.updateRenderTargetMipmap(A)}if(M.isScene===true)M.onAfterRender(v,M,U);ve.resetDefaultState();X=-1;E=null;T.pop();if(T.length>0){p=T[T.length-1]}else{p=null}h.pop();if(h.length>0){x=h[h.length-1]}else{x=null}};function $t(M,U,B,z){if(M.visible===false)return;const O=M.layers.test(U.layers);if(O){if(M.isGroup){B=M.renderOrder}else if(M.isLOD){if(M.autoUpdate===true)M.update(U)}else if(M.isLight){p.pushLight(M);if(M.castShadow){p.pushShadow(M)}}else if(M.isSprite){if(!M.frustumCulled||G.intersectsSprite(M)){if(z){Le.setFromMatrixPosition(M.matrixWorld).applyMatrix4(_e)}const Se=ee.update(M);const be=M.material;if(be.visible){x.push(M,Se,be,B,Le.z,null)}}}else if(M.isMesh||M.isLine||M.isPoints){if(!M.frustumCulled||G.intersectsObject(M)){const Se=ee.update(M);const be=M.material;if(z){if(M.boundingSphere!==void 0){if(M.boundingSphere===null)M.computeBoundingSphere();Le.copy(M.boundingSphere.center)}else{if(Se.boundingSphere===null)Se.computeBoundingSphere();Le.copy(Se.boundingSphere.center)}Le.applyMatrix4(M.matrixWorld).applyMatrix4(_e)}if(Array.isArray(be)){const we=Se.groups;for(let Be=0,Ue=we.length;Be<Ue;Be++){const Ne=we[Be];const rt=be[Ne.materialIndex];if(rt&&rt.visible){x.push(M,Se,rt,B,Le.z,Ne)}}}else if(be.visible){x.push(M,Se,be,B,Le.z,null)}}}}const fe=M.children;for(let Se=0,be=fe.length;Se<be;Se++){$t(fe[Se],U,B,z)}}function fa(M,U,B,z){const O=M.opaque;const fe=M.transmissive;const Se=M.transparent;p.setupLightsView(B);if(K===true)Ie.setGlobalState(v.clippingPlanes,B);if(fe.length>0)Zl(O,fe,U,B);if(z)me.viewport(y.copy(z));if(O.length>0)$i(O,U,B);if(fe.length>0)$i(fe,U,B);if(Se.length>0)$i(Se,U,B);me.buffers.depth.setTest(true);me.buffers.depth.setMask(true);me.buffers.color.setMask(true);me.setPolygonOffset(false)}function Zl(M,U,B,z){const O=B.isScene===true?B.overrideMaterial:null;if(O!==null){return}const fe=Re.isWebGL2;if(xe===null){xe=new Zn(1,1,{generateMipmaps:true,type:Ee.has("EXT_color_buffer_half_float")?ki:Pn,minFilter:Vi,samples:fe?4:0})}v.getDrawingBufferSize(Ce);if(fe){xe.setSize(Ce.x,Ce.y)}else{xe.setSize(zr(Ce.x),zr(Ce.y))}const Se=v.getRenderTarget();v.setRenderTarget(xe);v.getClearColor(ce);P=v.getClearAlpha();if(P<1)v.setClearColor(16777215,.5);v.clear();const be=v.toneMapping;v.toneMapping=Ln;$i(M,B,z);S.updateMultisampleRenderTarget(xe);S.updateRenderTargetMipmap(xe);let we=false;for(let Be=0,Ue=U.length;Be<Ue;Be++){const Ne=U[Be];const rt=Ne.object;const Ut=Ne.geometry;const dt=Ne.material;const ln=Ne.group;if(dt.side===nn&&rt.layers.test(z.layers)){const tt=dt.side;dt.side=Pt;dt.needsUpdate=true;pa(rt,B,z,Ut,dt,ln);dt.side=tt;dt.needsUpdate=true;we=true}}if(we===true){S.updateMultisampleRenderTarget(xe);S.updateRenderTargetMipmap(xe)}v.setRenderTarget(Se);v.setClearColor(ce,P);v.toneMapping=be}function $i(M,U,B){const z=U.isScene===true?U.overrideMaterial:null;for(let O=0,fe=M.length;O<fe;O++){const Se=M[O];const be=Se.object;const we=Se.geometry;const Be=z===null?Se.material:z;const Ue=Se.group;if(be.layers.test(B.layers)){pa(be,U,B,we,Be,Ue)}}}function pa(M,U,B,z,O,fe){M.onBeforeRender(v,U,B,z,O,fe);M.modelViewMatrix.multiplyMatrices(B.matrixWorldInverse,M.matrixWorld);M.normalMatrix.getNormalMatrix(M.modelViewMatrix);O.onBeforeRender(v,U,B,z,M,fe);if(O.transparent===true&&O.side===nn&&O.forceSinglePass===false){O.side=Pt;O.needsUpdate=true;v.renderBufferDirect(B,U,z,O,M,fe);O.side=Un;O.needsUpdate=true;v.renderBufferDirect(B,U,z,O,M,fe);O.side=nn}else{v.renderBufferDirect(B,U,z,O,M,fe)}M.onAfterRender(v,U,B,z,O,fe)}function Ji(M,U,B){if(U.isScene!==true)U=Ae;const z=De.get(M);const O=p.state.lights;const fe=p.state.shadowsArray;const Se=O.state.version;const be=ge.getParameters(M,O.state,fe,U,B);const we=ge.getProgramCacheKey(be);let Be=z.programs;z.environment=M.isMeshStandardMaterial?U.environment:null;z.fog=U.fog;z.envMap=(M.isMeshStandardMaterial?N:g).get(M.envMap||z.environment);if(Be===void 0){M.addEventListener("dispose",se);Be=new Map;z.programs=Be}let Ue=Be.get(we);if(Ue!==void 0){if(z.currentProgram===Ue&&z.lightsStateVersion===Se){ga(M,be);return Ue}}else{be.uniforms=ge.getUniforms(M);M.onBuild(B,be,v);M.onBeforeCompile(be,v);Ue=ge.acquireProgram(be,we);Be.set(we,Ue);z.uniforms=be.uniforms}const Ne=z.uniforms;if(!M.isShaderMaterial&&!M.isRawShaderMaterial||M.clipping===true){Ne.clippingPlanes=Ie.uniform}ga(M,be);z.needsLights=Ql(M);z.lightsStateVersion=Se;if(z.needsLights){Ne.ambientLightColor.value=O.state.ambient;Ne.lightProbe.value=O.state.probe;Ne.directionalLights.value=O.state.directional;Ne.directionalLightShadows.value=O.state.directionalShadow;Ne.spotLights.value=O.state.spot;Ne.spotLightShadows.value=O.state.spotShadow;Ne.rectAreaLights.value=O.state.rectArea;Ne.ltc_1.value=O.state.rectAreaLTC1;Ne.ltc_2.value=O.state.rectAreaLTC2;Ne.pointLights.value=O.state.point;Ne.pointLightShadows.value=O.state.pointShadow;Ne.hemisphereLights.value=O.state.hemi;Ne.directionalShadowMap.value=O.state.directionalShadowMap;Ne.directionalShadowMatrix.value=O.state.directionalShadowMatrix;Ne.spotShadowMap.value=O.state.spotShadowMap;Ne.spotLightMatrix.value=O.state.spotLightMatrix;Ne.spotLightMap.value=O.state.spotLightMap;Ne.pointShadowMap.value=O.state.pointShadowMap;Ne.pointShadowMatrix.value=O.state.pointShadowMatrix}z.currentProgram=Ue;z.uniformsList=null;return Ue}function ma(M){if(M.uniformsList===null){const U=M.currentProgram.getUniforms();M.uniformsList=Pr.seqWithValue(U.seq,M.uniforms)}return M.uniformsList}function ga(M,U){const B=De.get(M);B.outputColorSpace=U.outputColorSpace;B.batching=U.batching;B.instancing=U.instancing;B.instancingColor=U.instancingColor;B.skinning=U.skinning;B.morphTargets=U.morphTargets;B.morphNormals=U.morphNormals;B.morphColors=U.morphColors;B.morphTargetsCount=U.morphTargetsCount;B.numClippingPlanes=U.numClippingPlanes;B.numIntersection=U.numClipIntersection;B.vertexAlphas=U.vertexAlphas;B.vertexTangents=U.vertexTangents;B.toneMapping=U.toneMapping}function $l(M,U,B,z,O){if(U.isScene!==true)U=Ae;S.resetTextureUnits();const fe=U.fog;const Se=z.isMeshStandardMaterial?U.environment:null;const be=A===null?v.outputColorSpace:A.isXRRenderTarget===true?A.texture.colorSpace:xn;const we=(z.isMeshStandardMaterial?N:g).get(z.envMap||Se);const Be=z.vertexColors===true&&!!B.attributes.color&&B.attributes.color.itemSize===4;const Ue=!!B.attributes.tangent&&(!!z.normalMap||z.anisotropy>0);const Ne=!!B.morphAttributes.position;const rt=!!B.morphAttributes.normal;const Ut=!!B.morphAttributes.color;let dt=Ln;if(z.toneMapped){if(A===null||A.isXRRenderTarget===true){dt=v.toneMapping}}const ln=B.morphAttributes.position||B.morphAttributes.normal||B.morphAttributes.color;const tt=ln!==void 0?ln.length:0;const He=De.get(z);const jr=p.state.lights;if(K===true){if(he===true||M!==E){const Ht=M===E&&z.id===X;Ie.setState(z,M,Ht)}}let nt=false;if(z.version===He.__version){if(He.needsLights&&He.lightsStateVersion!==jr.state.version){nt=true}else if(He.outputColorSpace!==be){nt=true}else if(O.isBatchedMesh&&He.batching===false){nt=true}else if(!O.isBatchedMesh&&He.batching===true){nt=true}else if(O.isInstancedMesh&&He.instancing===false){nt=true}else if(!O.isInstancedMesh&&He.instancing===true){nt=true}else if(O.isSkinnedMesh&&He.skinning===false){nt=true}else if(!O.isSkinnedMesh&&He.skinning===true){nt=true}else if(O.isInstancedMesh&&He.instancingColor===true&&O.instanceColor===null){nt=true}else if(O.isInstancedMesh&&He.instancingColor===false&&O.instanceColor!==null){nt=true}else if(He.envMap!==we){nt=true}else if(z.fog===true&&He.fog!==fe){nt=true}else if(He.numClippingPlanes!==void 0&&(He.numClippingPlanes!==Ie.numPlanes||He.numIntersection!==Ie.numIntersection)){nt=true}else if(He.vertexAlphas!==Be){nt=true}else if(He.vertexTangents!==Ue){nt=true}else if(He.morphTargets!==Ne){nt=true}else if(He.morphNormals!==rt){nt=true}else if(He.morphColors!==Ut){nt=true}else if(He.toneMapping!==dt){nt=true}else if(Re.isWebGL2===true&&He.morphTargetsCount!==tt){nt=true}}else{nt=true;He.__version=z.version}let On=He.currentProgram;if(nt===true){On=Ji(z,U,O)}let _a=false;let Ui=false;let Kr=false;const Mt=On.getUniforms(),Fn=He.uniforms;if(me.useProgram(On.program)){_a=true;Ui=true;Kr=true}if(z.id!==X){X=z.id;Ui=true}if(_a||E!==M){Mt.setValue(I,"projectionMatrix",M.projectionMatrix);Mt.setValue(I,"viewMatrix",M.matrixWorldInverse);const Ht=Mt.map.cameraPosition;if(Ht!==void 0){Ht.setValue(I,Le.setFromMatrixPosition(M.matrixWorld))}if(Re.logarithmicDepthBuffer){Mt.setValue(I,"logDepthBufFC",2/(Math.log(M.far+1)/Math.LN2))}if(z.isMeshPhongMaterial||z.isMeshToonMaterial||z.isMeshLambertMaterial||z.isMeshBasicMaterial||z.isMeshStandardMaterial||z.isShaderMaterial){Mt.setValue(I,"isOrthographic",M.isOrthographicCamera===true)}if(E!==M){E=M;Ui=true;Kr=true}}if(O.isSkinnedMesh){Mt.setOptional(I,O,"bindMatrix");Mt.setOptional(I,O,"bindMatrixInverse");const Ht=O.skeleton;if(Ht){if(Re.floatVertexTextures){if(Ht.boneTexture===null)Ht.computeBoneTexture();Mt.setValue(I,"boneTexture",Ht.boneTexture,S)}else{console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.")}}}if(O.isBatchedMesh){Mt.setOptional(I,O,"batchingTexture");Mt.setValue(I,"batchingTexture",O._matricesTexture,S)}const Zr=B.morphAttributes;if(Zr.position!==void 0||Zr.normal!==void 0||Zr.color!==void 0&&Re.isWebGL2===true){b.update(O,B,On)}if(Ui||He.receiveShadow!==O.receiveShadow){He.receiveShadow=O.receiveShadow;Mt.setValue(I,"receiveShadow",O.receiveShadow)}if(z.isMeshGouraudMaterial&&z.envMap!==null){Fn.envMap.value=we;Fn.flipEnvMap.value=we.isCubeTexture&&we.isRenderTargetTexture===false?-1:1}if(Ui){Mt.setValue(I,"toneMappingExposure",v.toneMappingExposure);if(He.needsLights){Jl(Fn,Kr)}if(fe&&z.fog===true){ue.refreshFogUniforms(Fn,fe)}ue.refreshMaterialUniforms(Fn,z,Y,V,xe);Pr.upload(I,ma(He),Fn,S)}if(z.isShaderMaterial&&z.uniformsNeedUpdate===true){Pr.upload(I,ma(He),Fn,S);z.uniformsNeedUpdate=false}if(z.isSpriteMaterial){Mt.setValue(I,"center",O.center)}Mt.setValue(I,"modelViewMatrix",O.modelViewMatrix);Mt.setValue(I,"normalMatrix",O.normalMatrix);Mt.setValue(I,"modelMatrix",O.matrixWorld);if(z.isShaderMaterial||z.isRawShaderMaterial){const Ht=z.uniformsGroups;for(let $r=0,ec=Ht.length;$r<ec;$r++){if(Re.isWebGL2){const va=Ht[$r];ze.update(va,On);ze.bind(va,On)}else{console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}}}return On}function Jl(M,U){M.ambientLightColor.needsUpdate=U;M.lightProbe.needsUpdate=U;M.directionalLights.needsUpdate=U;M.directionalLightShadows.needsUpdate=U;M.pointLights.needsUpdate=U;M.pointLightShadows.needsUpdate=U;M.spotLights.needsUpdate=U;M.spotLightShadows.needsUpdate=U;M.rectAreaLights.needsUpdate=U;M.hemisphereLights.needsUpdate=U}function Ql(M){return M.isMeshLambertMaterial||M.isMeshToonMaterial||M.isMeshPhongMaterial||M.isMeshStandardMaterial||M.isShadowMaterial||M.isShaderMaterial&&M.lights===true}this.getActiveCubeFace=function(){return D};this.getActiveMipmapLevel=function(){return C};this.getRenderTarget=function(){return A};this.setRenderTargetTextures=function(M,U,B){De.get(M.texture).__webglTexture=U;De.get(M.depthTexture).__webglTexture=B;const z=De.get(M);z.__hasExternalTextures=true;if(z.__hasExternalTextures){z.__autoAllocateDepthBuffer=B===void 0;if(!z.__autoAllocateDepthBuffer){if(Ee.has("WEBGL_multisampled_render_to_texture")===true){console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");z.__useRenderToTexture=false}}}};this.setRenderTargetFramebuffer=function(M,U){const B=De.get(M);B.__webglFramebuffer=U;B.__useDefaultFramebuffer=U===void 0};this.setRenderTarget=function(M,U=0,B=0){A=M;D=U;C=B;let z=true;let O=null;let fe=false;let Se=false;if(M){const we=De.get(M);if(we.__useDefaultFramebuffer!==void 0){me.bindFramebuffer(I.FRAMEBUFFER,null);z=false}else if(we.__webglFramebuffer===void 0){S.setupRenderTarget(M)}else if(we.__hasExternalTextures){S.rebindTextures(M,De.get(M.texture).__webglTexture,De.get(M.depthTexture).__webglTexture)}const Be=M.texture;if(Be.isData3DTexture||Be.isDataArrayTexture||Be.isCompressedArrayTexture){Se=true}const Ue=De.get(M).__webglFramebuffer;if(M.isWebGLCubeRenderTarget){if(Array.isArray(Ue[U])){O=Ue[U][B]}else{O=Ue[U]}fe=true}else if(Re.isWebGL2&&M.samples>0&&S.useMultisampledRTT(M)===false){O=De.get(M).__webglMultisampledFramebuffer}else{if(Array.isArray(Ue)){O=Ue[B]}else{O=Ue}}y.copy(M.viewport);H.copy(M.scissor);j=M.scissorTest}else{y.copy(Q).multiplyScalar(Y).floor();H.copy(ne).multiplyScalar(Y).floor();j=de}const be=me.bindFramebuffer(I.FRAMEBUFFER,O);if(be&&Re.drawBuffers&&z){me.drawBuffers(M,O)}me.viewport(y);me.scissor(H);me.setScissorTest(j);if(fe){const we=De.get(M.texture);I.framebufferTexture2D(I.FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_CUBE_MAP_POSITIVE_X+U,we.__webglTexture,B)}else if(Se){const we=De.get(M.texture);const Be=U||0;I.framebufferTextureLayer(I.FRAMEBUFFER,I.COLOR_ATTACHMENT0,we.__webglTexture,B||0,Be)}X=-1};this.readRenderTargetPixels=function(M,U,B,z,O,fe,Se){if(!(M&&M.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let be=De.get(M).__webglFramebuffer;if(M.isWebGLCubeRenderTarget&&Se!==void 0){be=be[Se]}if(be){me.bindFramebuffer(I.FRAMEBUFFER,be);try{const we=M.texture;const Be=we.format;const Ue=we.type;if(Be!==Kt&&ie.convert(Be)!==I.getParameter(I.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const Ne=Ue===ki&&(Ee.has("EXT_color_buffer_half_float")||Re.isWebGL2&&Ee.has("EXT_color_buffer_float"));if(Ue!==Pn&&ie.convert(Ue)!==I.getParameter(I.IMPLEMENTATION_COLOR_READ_TYPE)&&!(Ue===wn&&(Re.isWebGL2||Ee.has("OES_texture_float")||Ee.has("WEBGL_color_buffer_float")))&&!Ne){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}if(U>=0&&U<=M.width-z&&(B>=0&&B<=M.height-O)){I.readPixels(U,B,z,O,ie.convert(Be),ie.convert(Ue),fe)}}finally{const we=A!==null?De.get(A).__webglFramebuffer:null;me.bindFramebuffer(I.FRAMEBUFFER,we)}}};this.copyFramebufferToTexture=function(M,U,B=0){const z=Math.pow(2,-B);const O=Math.floor(U.image.width*z);const fe=Math.floor(U.image.height*z);S.setTexture2D(U,0);I.copyTexSubImage2D(I.TEXTURE_2D,B,0,0,M.x,M.y,O,fe);me.unbindTexture()};this.copyTextureToTexture=function(M,U,B,z=0){const O=U.image.width;const fe=U.image.height;const Se=ie.convert(B.format);const be=ie.convert(B.type);S.setTexture2D(B,0);I.pixelStorei(I.UNPACK_FLIP_Y_WEBGL,B.flipY);I.pixelStorei(I.UNPACK_PREMULTIPLY_ALPHA_WEBGL,B.premultiplyAlpha);I.pixelStorei(I.UNPACK_ALIGNMENT,B.unpackAlignment);if(U.isDataTexture){I.texSubImage2D(I.TEXTURE_2D,z,M.x,M.y,O,fe,Se,be,U.image.data)}else{if(U.isCompressedTexture){I.compressedTexSubImage2D(I.TEXTURE_2D,z,M.x,M.y,U.mipmaps[0].width,U.mipmaps[0].height,Se,U.mipmaps[0].data)}else{I.texSubImage2D(I.TEXTURE_2D,z,M.x,M.y,Se,be,U.image)}}if(z===0&&B.generateMipmaps)I.generateMipmap(I.TEXTURE_2D);me.unbindTexture()};this.copyTextureToTexture3D=function(M,U,B,z,O=0){if(v.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const fe=M.max.x-M.min.x+1;const Se=M.max.y-M.min.y+1;const be=M.max.z-M.min.z+1;const we=ie.convert(z.format);const Be=ie.convert(z.type);let Ue;if(z.isData3DTexture){S.setTexture3D(z,0);Ue=I.TEXTURE_3D}else if(z.isDataArrayTexture||z.isCompressedArrayTexture){S.setTexture2DArray(z,0);Ue=I.TEXTURE_2D_ARRAY}else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}I.pixelStorei(I.UNPACK_FLIP_Y_WEBGL,z.flipY);I.pixelStorei(I.UNPACK_PREMULTIPLY_ALPHA_WEBGL,z.premultiplyAlpha);I.pixelStorei(I.UNPACK_ALIGNMENT,z.unpackAlignment);const Ne=I.getParameter(I.UNPACK_ROW_LENGTH);const rt=I.getParameter(I.UNPACK_IMAGE_HEIGHT);const Ut=I.getParameter(I.UNPACK_SKIP_PIXELS);const dt=I.getParameter(I.UNPACK_SKIP_ROWS);const ln=I.getParameter(I.UNPACK_SKIP_IMAGES);const tt=B.isCompressedTexture?B.mipmaps[O]:B.image;I.pixelStorei(I.UNPACK_ROW_LENGTH,tt.width);I.pixelStorei(I.UNPACK_IMAGE_HEIGHT,tt.height);I.pixelStorei(I.UNPACK_SKIP_PIXELS,M.min.x);I.pixelStorei(I.UNPACK_SKIP_ROWS,M.min.y);I.pixelStorei(I.UNPACK_SKIP_IMAGES,M.min.z);if(B.isDataTexture||B.isData3DTexture){I.texSubImage3D(Ue,O,U.x,U.y,U.z,fe,Se,be,we,Be,tt.data)}else{if(B.isCompressedArrayTexture){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");I.compressedTexSubImage3D(Ue,O,U.x,U.y,U.z,fe,Se,be,we,tt.data)}else{I.texSubImage3D(Ue,O,U.x,U.y,U.z,fe,Se,be,we,Be,tt)}}I.pixelStorei(I.UNPACK_ROW_LENGTH,Ne);I.pixelStorei(I.UNPACK_IMAGE_HEIGHT,rt);I.pixelStorei(I.UNPACK_SKIP_PIXELS,Ut);I.pixelStorei(I.UNPACK_SKIP_ROWS,dt);I.pixelStorei(I.UNPACK_SKIP_IMAGES,ln);if(O===0&&z.generateMipmaps)I.generateMipmap(Ue);me.unbindTexture()};this.initTexture=function(M){if(M.isCubeTexture){S.setTextureCube(M,0)}else if(M.isData3DTexture){S.setTexture3D(M,0)}else if(M.isDataArrayTexture||M.isCompressedArrayTexture){S.setTexture2DArray(M,0)}else{S.setTexture2D(M,0)}me.unbindTexture()};this.resetState=function(){D=0;C=0;A=null;me.reset();ve.reset()};if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}get coordinateSystem(){return _n}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=e===Qs?"display-p3":"srgb";t.unpackColorSpace=$e.workingColorSpace===kr?"display-p3":"srgb"}get outputEncoding(){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");return this.outputColorSpace===pt?jn:_l}set outputEncoding(e){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.");this.outputColorSpace=e===jn?pt:xn}get useLegacyLights(){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");return this._useLegacyLights}set useLegacyLights(e){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.");this._useLegacyLights=e}}class Sm extends Gl{}Sm.prototype.isWebGL1Renderer=true;class Em extends mt{constructor(){super();this.isScene=true;this.type="Scene";this.background=null;this.environment=null;this.fog=null;this.backgroundBlurriness=0;this.backgroundIntensity=1;this.overrideMaterial=null;if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}copy(e,t){super.copy(e,t);if(e.background!==null)this.background=e.background.clone();if(e.environment!==null)this.environment=e.environment.clone();if(e.fog!==null)this.fog=e.fog.clone();this.backgroundBlurriness=e.backgroundBlurriness;this.backgroundIntensity=e.backgroundIntensity;if(e.overrideMaterial!==null)this.overrideMaterial=e.overrideMaterial.clone();this.matrixAutoUpdate=e.matrixAutoUpdate;return this}toJSON(e){const t=super.toJSON(e);if(this.fog!==null)t.object.fog=this.fog.toJSON();if(this.backgroundBlurriness>0)t.object.backgroundBlurriness=this.backgroundBlurriness;if(this.backgroundIntensity!==1)t.object.backgroundIntensity=this.backgroundIntensity;return t}}class ym{constructor(e,t){this.isInterleavedBuffer=true;this.array=e;this.stride=t;this.count=e!==void 0?e.length/t:0;this.usage=Vs;this._updateRange={offset:0,count:-1};this.updateRanges=[];this.version=0;this.uuid=vn()}onUploadCallback(){}set needsUpdate(e){if(e===true)this.version++}get updateRange(){console.warn("THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");return this._updateRange}setUsage(e){this.usage=e;return this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){this.array=new e.array.constructor(e.array);this.count=e.count;this.stride=e.stride;this.usage=e.usage;return this}copyAt(e,t,n){e*=this.stride;n*=t.stride;for(let r=0,s=this.stride;r<s;r++){this.array[e+r]=t.array[n+r]}return this}set(e,t=0){this.array.set(e,t);return this}clone(e){if(e.arrayBuffers===void 0){e.arrayBuffers={}}if(this.array.buffer._uuid===void 0){this.array.buffer._uuid=vn()}if(e.arrayBuffers[this.array.buffer._uuid]===void 0){e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer}const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]);const n=new this.constructor(t,this.stride);n.setUsage(this.usage);return n}onUpload(e){this.onUploadCallback=e;return this}toJSON(e){if(e.arrayBuffers===void 0){e.arrayBuffers={}}if(this.array.buffer._uuid===void 0){this.array.buffer._uuid=vn()}if(e.arrayBuffers[this.array.buffer._uuid]===void 0){e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))}return{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const wt=new L;class Rn{constructor(e,t,n,r=false){this.isInterleavedBufferAttribute=true;this.name="";this.data=e;this.itemSize=t;this.offset=n;this.normalized=r}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++){wt.fromBufferAttribute(this,t);wt.applyMatrix4(e);this.setXYZ(t,wt.x,wt.y,wt.z)}return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++){wt.fromBufferAttribute(this,t);wt.applyNormalMatrix(e);this.setXYZ(t,wt.x,wt.y,wt.z)}return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++){wt.fromBufferAttribute(this,t);wt.transformDirection(e);this.setXYZ(t,wt.x,wt.y,wt.z)}return this}setX(e,t){if(this.normalized)t=Ze(t,this.array);this.data.array[e*this.data.stride+this.offset]=t;return this}setY(e,t){if(this.normalized)t=Ze(t,this.array);this.data.array[e*this.data.stride+this.offset+1]=t;return this}setZ(e,t){if(this.normalized)t=Ze(t,this.array);this.data.array[e*this.data.stride+this.offset+2]=t;return this}setW(e,t){if(this.normalized)t=Ze(t,this.array);this.data.array[e*this.data.stride+this.offset+3]=t;return this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];if(this.normalized)t=rn(t,this.array);return t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];if(this.normalized)t=rn(t,this.array);return t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];if(this.normalized)t=rn(t,this.array);return t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];if(this.normalized)t=rn(t,this.array);return t}setXY(e,t,n){e=e*this.data.stride+this.offset;if(this.normalized){t=Ze(t,this.array);n=Ze(n,this.array)}this.data.array[e+0]=t;this.data.array[e+1]=n;return this}setXYZ(e,t,n,r){e=e*this.data.stride+this.offset;if(this.normalized){t=Ze(t,this.array);n=Ze(n,this.array);r=Ze(r,this.array)}this.data.array[e+0]=t;this.data.array[e+1]=n;this.data.array[e+2]=r;return this}setXYZW(e,t,n,r,s){e=e*this.data.stride+this.offset;if(this.normalized){t=Ze(t,this.array);n=Ze(n,this.array);r=Ze(r,this.array);s=Ze(s,this.array)}this.data.array[e+0]=t;this.data.array[e+1]=n;this.data.array[e+2]=r;this.data.array[e+3]=s;return this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const r=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++){t.push(this.data.array[r+s])}}return new Zt(new this.array.constructor(t),this.itemSize,this.normalized)}else{if(e.interleavedBuffers===void 0){e.interleavedBuffers={}}if(e.interleavedBuffers[this.data.uuid]===void 0){e.interleavedBuffers[this.data.uuid]=this.data.clone(e)}return new Rn(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const r=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++){t.push(this.data.array[r+s])}}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else{if(e.interleavedBuffers===void 0){e.interleavedBuffers={}}if(e.interleavedBuffers[this.data.uuid]===void 0){e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)}return{isInterleavedBufferAttribute:true,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}}class sa extends Ci{constructor(e){super();this.isLineBasicMaterial=true;this.type="LineBasicMaterial";this.color=new Ye(16777215);this.map=null;this.linewidth=1;this.linecap="round";this.linejoin="round";this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.linewidth=e.linewidth;this.linecap=e.linecap;this.linejoin=e.linejoin;this.fog=e.fog;return this}}const zo=new L;const Ho=new L;const Go=new st;const Ls=new ta;const Er=new Ri;class Ys extends mt{constructor(e=new zt,t=new sa){super();this.isLine=true;this.type="Line";this.geometry=e;this.material=t;this.updateMorphTargets()}copy(e,t){super.copy(e,t);this.material=Array.isArray(e.material)?e.material.slice():e.material;this.geometry=e.geometry;return this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position;const n=[0];for(let r=1,s=t.count;r<s;r++){zo.fromBufferAttribute(t,r-1);Ho.fromBufferAttribute(t,r);n[r]=n[r-1];n[r]+=zo.distanceTo(Ho)}e.setAttribute("lineDistance",new Tt(n,1))}else{console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}return this}raycast(e,t){const n=this.geometry;const r=this.matrixWorld;const s=e.params.Line.threshold;const o=n.drawRange;if(n.boundingSphere===null)n.computeBoundingSphere();Er.copy(n.boundingSphere);Er.applyMatrix4(r);Er.radius+=s;if(e.ray.intersectsSphere(Er)===false)return;Go.copy(r).invert();Ls.copy(e.ray).applyMatrix4(Go);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3);const l=a*a;const c=new L;const u=new L;const d=new L;const f=new L;const m=this.isLineSegments?2:1;const _=n.index;const x=n.attributes;const p=x.position;if(_!==null){const h=Math.max(0,o.start);const T=Math.min(_.count,o.start+o.count);for(let v=h,R=T-1;v<R;v+=m){const D=_.getX(v);const C=_.getX(v+1);c.fromBufferAttribute(p,D);u.fromBufferAttribute(p,C);const A=Ls.distanceSqToSegment(c,u,f,d);if(A>l)continue;f.applyMatrix4(this.matrixWorld);const X=e.ray.origin.distanceTo(f);if(X<e.near||X>e.far)continue;t.push({distance:X,point:d.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}else{const h=Math.max(0,o.start);const T=Math.min(p.count,o.start+o.count);for(let v=h,R=T-1;v<R;v+=m){c.fromBufferAttribute(p,v);u.fromBufferAttribute(p,v+1);const D=Ls.distanceSqToSegment(c,u,f,d);if(D>l)continue;f.applyMatrix4(this.matrixWorld);const C=e.ray.origin.distanceTo(f);if(C<e.near||C>e.far)continue;t.push({distance:C,point:d.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const e=this.geometry;const t=e.morphAttributes;const n=Object.keys(t);if(n.length>0){const r=t[n[0]];if(r!==void 0){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let s=0,o=r.length;s<o;s++){const a=r[s].name||String(s);this.morphTargetInfluences.push(0);this.morphTargetDictionary[a]=s}}}}}const Vo=new L;const ko=new L;class Tm extends Ys{constructor(e,t){super(e,t);this.isLineSegments=true;this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position;const n=[];for(let r=0,s=t.count;r<s;r+=2){Vo.fromBufferAttribute(t,r);ko.fromBufferAttribute(t,r+1);n[r]=r===0?0:n[r-1];n[r+1]=n[r]+Vo.distanceTo(ko)}e.setAttribute("lineDistance",new Tt(n,1))}else{console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}return this}}class bm extends zt{constructor(e=null){super();this.type="WireframeGeometry";this.parameters={geometry:e};if(e!==null){const t=[];const n=new Set;const r=new L;const s=new L;if(e.index!==null){const o=e.attributes.position;const a=e.index;let l=e.groups;if(l.length===0){l=[{start:0,count:a.count,materialIndex:0}]}for(let c=0,u=l.length;c<u;++c){const d=l[c];const f=d.start;const m=d.count;for(let _=f,x=f+m;_<x;_+=3){for(let p=0;p<3;p++){const h=a.getX(_+p);const T=a.getX(_+(p+1)%3);r.fromBufferAttribute(o,h);s.fromBufferAttribute(o,T);if(Wo(r,s,n)===true){t.push(r.x,r.y,r.z);t.push(s.x,s.y,s.z)}}}}}else{const o=e.attributes.position;for(let a=0,l=o.count/3;a<l;a++){for(let c=0;c<3;c++){const u=3*a+c;const d=3*a+(c+1)%3;r.fromBufferAttribute(o,u);s.fromBufferAttribute(o,d);if(Wo(r,s,n)===true){t.push(r.x,r.y,r.z);t.push(s.x,s.y,s.z)}}}}this.setAttribute("position",new Tt(t,3))}}copy(e){super.copy(e);this.parameters=Object.assign({},e.parameters);return this}}function Wo(i,e,t){const n=`${i.x},${i.y},${i.z}-${e.x},${e.y},${e.z}`;const r=`${e.x},${e.y},${e.z}-${i.x},${i.y},${i.z}`;if(t.has(n)===true||t.has(r)===true){return false}else{t.add(n);t.add(r);return true}}class Am extends Ci{constructor(e){super();this.isMeshLambertMaterial=true;this.type="MeshLambertMaterial";this.color=new Ye(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Ye(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=vl;this.normalScale=new Pe(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=$s;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.fog=true;this.setValues(e)}copy(e){super.copy(e);this.color.copy(e.color);this.map=e.map;this.lightMap=e.lightMap;this.lightMapIntensity=e.lightMapIntensity;this.aoMap=e.aoMap;this.aoMapIntensity=e.aoMapIntensity;this.emissive.copy(e.emissive);this.emissiveMap=e.emissiveMap;this.emissiveIntensity=e.emissiveIntensity;this.bumpMap=e.bumpMap;this.bumpScale=e.bumpScale;this.normalMap=e.normalMap;this.normalMapType=e.normalMapType;this.normalScale.copy(e.normalScale);this.displacementMap=e.displacementMap;this.displacementScale=e.displacementScale;this.displacementBias=e.displacementBias;this.specularMap=e.specularMap;this.alphaMap=e.alphaMap;this.envMap=e.envMap;this.combine=e.combine;this.reflectivity=e.reflectivity;this.refractionRatio=e.refractionRatio;this.wireframe=e.wireframe;this.wireframeLinewidth=e.wireframeLinewidth;this.wireframeLinecap=e.wireframeLinecap;this.wireframeLinejoin=e.wireframeLinejoin;this.flatShading=e.flatShading;this.fog=e.fog;return this}}const Xo={enabled:false,files:{},add:function(i,e){if(this.enabled===false)return;this.files[i]=e},get:function(i){if(this.enabled===false)return;return this.files[i]},remove:function(i){delete this.files[i]},clear:function(){this.files={}}};class wm{constructor(e,t,n){const r=this;let s=false;let o=0;let a=0;let l=void 0;const c=[];this.onStart=void 0;this.onLoad=e;this.onProgress=t;this.onError=n;this.itemStart=function(u){a++;if(s===false){if(r.onStart!==void 0){r.onStart(u,o,a)}}s=true};this.itemEnd=function(u){o++;if(r.onProgress!==void 0){r.onProgress(u,o,a)}if(o===a){s=false;if(r.onLoad!==void 0){r.onLoad()}}};this.itemError=function(u){if(r.onError!==void 0){r.onError(u)}};this.resolveURL=function(u){if(l){return l(u)}return u};this.setURLModifier=function(u){l=u;return this};this.addHandler=function(u,d){c.push(u,d);return this};this.removeHandler=function(u){const d=c.indexOf(u);if(d!==-1){c.splice(d,2)}return this};this.getHandler=function(u){for(let d=0,f=c.length;d<f;d+=2){const m=c[d];const _=c[d+1];if(m.global)m.lastIndex=0;if(m.test(u)){return _}}return null}}}const Rm=new wm;class aa{constructor(e){this.manager=e!==void 0?e:Rm;this.crossOrigin="anonymous";this.withCredentials=false;this.path="";this.resourcePath="";this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(r,s){n.load(e,r,t,s)})}parse(){}setCrossOrigin(e){this.crossOrigin=e;return this}setWithCredentials(e){this.withCredentials=e;return this}setPath(e){this.path=e;return this}setResourcePath(e){this.resourcePath=e;return this}setRequestHeader(e){this.requestHeader=e;return this}}aa.DEFAULT_MATERIAL_NAME="__DEFAULT";class Cm extends aa{constructor(e){super(e)}load(e,t,n,r){if(this.path!==void 0)e=this.path+e;e=this.manager.resolveURL(e);const s=this;const o=Xo.get(e);if(o!==void 0){s.manager.itemStart(e);setTimeout(function(){if(t)t(o);s.manager.itemEnd(e)},0);return o}const a=Xi("img");function l(){u();Xo.add(e,this);if(t)t(this);s.manager.itemEnd(e)}function c(d){u();if(r)r(d);s.manager.itemError(e);s.manager.itemEnd(e)}function u(){a.removeEventListener("load",l,false);a.removeEventListener("error",c,false)}a.addEventListener("load",l,false);a.addEventListener("error",c,false);if(e.slice(0,5)!=="data:"){if(this.crossOrigin!==void 0)a.crossOrigin=this.crossOrigin}s.manager.itemStart(e);a.src=e;return a}}class Lm extends aa{constructor(e){super(e)}load(e,t,n,r){const s=new Dt;const o=new Cm(this.manager);o.setCrossOrigin(this.crossOrigin);o.setPath(this.path);o.load(e,function(a){s.image=a;s.needsUpdate=true;if(t!==void 0){t(s)}},n,r);return s}}class Pm extends mt{constructor(e,t=1){super();this.isLight=true;this.type="Light";this.color=new Ye(e);this.intensity=t}dispose(){}copy(e,t){super.copy(e,t);this.color.copy(e.color);this.intensity=e.intensity;return this}toJSON(e){const t=super.toJSON(e);t.object.color=this.color.getHex();t.object.intensity=this.intensity;if(this.groundColor!==void 0)t.object.groundColor=this.groundColor.getHex();if(this.distance!==void 0)t.object.distance=this.distance;if(this.angle!==void 0)t.object.angle=this.angle;if(this.decay!==void 0)t.object.decay=this.decay;if(this.penumbra!==void 0)t.object.penumbra=this.penumbra;if(this.shadow!==void 0)t.object.shadow=this.shadow.toJSON();return t}}const Ps=new st;const Yo=new L;const qo=new L;class Dm{constructor(e){this.camera=e;this.bias=0;this.normalBias=0;this.radius=1;this.blurSamples=8;this.mapSize=new Pe(512,512);this.map=null;this.mapPass=null;this.matrix=new st;this.autoUpdate=true;this.needsUpdate=false;this._frustum=new ia;this._frameExtents=new Pe(1,1);this._viewportCount=1;this._viewports=[new it(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera;const n=this.matrix;Yo.setFromMatrixPosition(e.matrixWorld);t.position.copy(Yo);qo.setFromMatrixPosition(e.target.matrixWorld);t.lookAt(qo);t.updateMatrixWorld();Ps.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse);this._frustum.setFromProjectionMatrix(Ps);n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);n.multiply(Ps)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){if(this.map){this.map.dispose()}if(this.mapPass){this.mapPass.dispose()}}copy(e){this.camera=e.camera.clone();this.bias=e.bias;this.radius=e.radius;this.mapSize.copy(e.mapSize);return this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};if(this.bias!==0)e.bias=this.bias;if(this.normalBias!==0)e.normalBias=this.normalBias;if(this.radius!==1)e.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)e.mapSize=this.mapSize.toArray();e.camera=this.camera.toJSON(false).object;delete e.camera.matrix;return e}}class Um extends Dm{constructor(){super(new Il(-5,5,5,-5,.5,500));this.isDirectionalLightShadow=true}}class Im extends Pm{constructor(e,t){super(e,t);this.isDirectionalLight=true;this.type="DirectionalLight";this.position.copy(mt.DEFAULT_UP);this.updateMatrix();this.target=new mt;this.shadow=new Um}dispose(){this.shadow.dispose()}copy(e){super.copy(e);this.target=e.target.clone();this.shadow=e.shadow.clone();return this}}class Nm extends zt{constructor(){super();this.isInstancedBufferGeometry=true;this.type="InstancedBufferGeometry";this.instanceCount=Infinity}copy(e){super.copy(e);this.instanceCount=e.instanceCount;return this}toJSON(){const e=super.toJSON();e.instanceCount=this.instanceCount;e.isInstancedBufferGeometry=true;return e}}class qs extends ym{constructor(e,t,n=1){super(e,t);this.isInstancedInterleavedBuffer=true;this.meshPerAttribute=n}copy(e){super.copy(e);this.meshPerAttribute=e.meshPerAttribute;return this}clone(e){const t=super.clone(e);t.meshPerAttribute=this.meshPerAttribute;return t}toJSON(e){const t=super.toJSON(e);t.isInstancedInterleavedBuffer=true;t.meshPerAttribute=this.meshPerAttribute;return t}}class jo{constructor(e=1,t=0,n=0){this.radius=e;this.phi=t;this.theta=n;return this}set(e,t,n){this.radius=e;this.phi=t;this.theta=n;return this}copy(e){this.radius=e.radius;this.phi=e.phi;this.theta=e.theta;return this}makeSafe(){const e=1e-6;this.phi=Math.max(e,Math.min(Math.PI-e,this.phi));return this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){this.radius=Math.sqrt(e*e+t*t+n*n);if(this.radius===0){this.theta=0;this.phi=0}else{this.theta=Math.atan2(e,n);this.phi=Math.acos(xt(t/this.radius,-1,1))}return this}clone(){return new this.constructor().copy(this)}}const Ko=new L;const yr=new L;class Om{constructor(e=new L,t=new L){this.start=e;this.end=t}set(e,t){this.start.copy(e);this.end.copy(t);return this}copy(e){this.start.copy(e.start);this.end.copy(e.end);return this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){Ko.subVectors(e,this.start);yr.subVectors(this.end,this.start);const n=yr.dot(yr);const r=yr.dot(Ko);let s=r/n;if(t){s=xt(s,0,1)}return s}closestPointToPoint(e,t,n){const r=this.closestPointToPointParameter(e,t);return this.delta(n).multiplyScalar(r).add(this.start)}applyMatrix4(e){this.start.applyMatrix4(e);this.end.applyMatrix4(e);return this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const Zo=new L;const Tr=new L;const $o=new L;class Fm extends mt{constructor(e,t,n){super();this.light=e;this.matrix=e.matrixWorld;this.matrixAutoUpdate=false;this.color=n;this.type="DirectionalLightHelper";if(t===void 0)t=1;let r=new zt;r.setAttribute("position",new Tt([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const s=new sa({fog:false,toneMapped:false});this.lightPlane=new Ys(r,s);this.add(this.lightPlane);r=new zt;r.setAttribute("position",new Tt([0,0,0,0,0,1],3));this.targetLine=new Ys(r,s);this.add(this.targetLine);this.update()}dispose(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(true,false);this.light.target.updateWorldMatrix(true,false);Zo.setFromMatrixPosition(this.light.matrixWorld);Tr.setFromMatrixPosition(this.light.target.matrixWorld);$o.subVectors(Tr,Zo);this.lightPlane.lookAt(Tr);if(this.color!==void 0){this.lightPlane.material.color.set(this.color);this.targetLine.material.color.set(this.color)}else{this.lightPlane.material.color.copy(this.light.color);this.targetLine.material.color.copy(this.light.color)}this.targetLine.lookAt(Tr);this.targetLine.scale.z=$o.length()}}class Bm extends Tm{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e];const n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1];const r=new zt;r.setAttribute("position",new Tt(t,3));r.setAttribute("color",new Tt(n,3));const s=new sa({vertexColors:true,toneMapped:false});super(r,s);this.type="AxesHelper"}setColors(e,t,n){const r=new Ye;const s=this.geometry.attributes.color.array;r.set(e);r.toArray(s,0);r.toArray(s,3);r.set(t);r.toArray(s,6);r.toArray(s,9);r.set(n);r.toArray(s,12);r.toArray(s,15);this.geometry.attributes.color.needsUpdate=true;return this}dispose(){this.geometry.dispose();this.material.dispose()}}if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Zs}}))}if(typeof window!=="undefined"){if(window.__THREE__){console.warn("WARNING: Multiple instances of Three.js being imported.")}else{window.__THREE__=Zs}}const Jo={type:"change"};const Ds={type:"start"};const Qo={type:"end"};const br=new ta;const el=new bn;const zm=Math.cos(70*Ml.DEG2RAD);class Hm extends Jn{constructor(e,t){super();this.object=e;this.domElement=t;this.domElement.style.touchAction="none";this.enabled=true;this.target=new L;this.cursor=new L;this.minDistance=0;this.maxDistance=Infinity;this.minZoom=0;this.maxZoom=Infinity;this.minTargetRadius=0;this.maxTargetRadius=Infinity;this.minPolarAngle=0;this.maxPolarAngle=Math.PI;this.minAzimuthAngle=-Infinity;this.maxAzimuthAngle=Infinity;this.enableDamping=false;this.dampingFactor=.05;this.enableZoom=true;this.zoomSpeed=1;this.enableRotate=true;this.rotateSpeed=1;this.enablePan=true;this.panSpeed=1;this.screenSpacePanning=true;this.keyPanSpeed=7;this.zoomToCursor=false;this.autoRotate=false;this.autoRotateSpeed=2;this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"};this.mouseButtons={LEFT:ti.ROTATE,MIDDLE:ti.DOLLY,RIGHT:ti.PAN};this.touches={ONE:ni.ROTATE,TWO:ni.DOLLY_PAN};this.target0=this.target.clone();this.position0=this.object.position.clone();this.zoom0=this.object.zoom;this._domElementKeyEvents=null;this.getPolarAngle=function(){return a.phi};this.getAzimuthalAngle=function(){return a.theta};this.getDistance=function(){return this.object.position.distanceTo(this.target)};this.listenToKeyEvents=function(b){b.addEventListener("keydown",ee);this._domElementKeyEvents=b};this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",ee);this._domElementKeyEvents=null};this.saveState=function(){n.target0.copy(n.target);n.position0.copy(n.object.position);n.zoom0=n.object.zoom};this.reset=function(){n.target.copy(n.target0);n.object.position.copy(n.position0);n.object.zoom=n.zoom0;n.object.updateProjectionMatrix();n.dispatchEvent(Jo);n.update();s=r.NONE};this.update=function(){const b=new L;const q=new $n().setFromUnitVectors(e.up,new L(0,1,0));const le=q.clone().invert();const ie=new L;const ve=new $n;const ze=new L;const Xe=2*Math.PI;return function Fe(oe=null){const w=n.object.position;b.copy(w).sub(n.target);b.applyQuaternion(q);a.setFromVector3(b);if(n.autoRotate&&s===r.NONE){H(E(oe))}if(n.enableDamping){a.theta+=l.theta*n.dampingFactor;a.phi+=l.phi*n.dampingFactor}else{a.theta+=l.theta;a.phi+=l.phi}let re=n.minAzimuthAngle;let se=n.maxAzimuthAngle;if(isFinite(re)&&isFinite(se)){if(re<-Math.PI)re+=Xe;else if(re>Math.PI)re-=Xe;if(se<-Math.PI)se+=Xe;else if(se>Math.PI)se-=Xe;if(re<=se){a.theta=Math.max(re,Math.min(se,a.theta))}else{a.theta=a.theta>(re+se)/2?Math.max(re,a.theta):Math.min(se,a.theta)}}a.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,a.phi));a.makeSafe();if(n.enableDamping===true){n.target.addScaledVector(u,n.dampingFactor)}else{n.target.add(u)}n.target.sub(n.cursor);n.target.clampLength(n.minTargetRadius,n.maxTargetRadius);n.target.add(n.cursor);if(n.zoomToCursor&&C||n.object.isOrthographicCamera){a.radius=k(a.radius)}else{a.radius=k(a.radius*c)}b.setFromSpherical(a);b.applyQuaternion(le);w.copy(n.target).add(b);n.object.lookAt(n.target);if(n.enableDamping===true){l.theta*=1-n.dampingFactor;l.phi*=1-n.dampingFactor;u.multiplyScalar(1-n.dampingFactor)}else{l.set(0,0,0);u.set(0,0,0)}let Te=false;if(n.zoomToCursor&&C){let Me=null;if(n.object.isPerspectiveCamera){const qe=b.length();Me=k(qe*c);const je=qe-Me;n.object.position.addScaledVector(R,je);n.object.updateMatrixWorld()}else if(n.object.isOrthographicCamera){const qe=new L(D.x,D.y,0);qe.unproject(n.object);n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/c));n.object.updateProjectionMatrix();Te=true;const je=new L(D.x,D.y,0);je.unproject(n.object);n.object.position.sub(je).add(qe);n.object.updateMatrixWorld();Me=b.length()}else{console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.");n.zoomToCursor=false}if(Me!==null){if(this.screenSpacePanning){n.target.set(0,0,-1).transformDirection(n.object.matrix).multiplyScalar(Me).add(n.object.position)}else{br.origin.copy(n.object.position);br.direction.set(0,0,-1).transformDirection(n.object.matrix);if(Math.abs(n.object.up.dot(br.direction))<zm){e.lookAt(n.target)}else{el.setFromNormalAndCoplanarPoint(n.object.up,n.target);br.intersectPlane(el,n.target)}}}}else if(n.object.isOrthographicCamera){n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/c));n.object.updateProjectionMatrix();Te=true}c=1;C=false;if(Te||ie.distanceToSquared(n.object.position)>o||8*(1-ve.dot(n.object.quaternion))>o||ze.distanceToSquared(n.target)>0){n.dispatchEvent(Jo);ie.copy(n.object.position);ve.copy(n.object.quaternion);ze.copy(n.target);return true}return false}}();this.dispose=function(){n.domElement.removeEventListener("contextmenu",pe);n.domElement.removeEventListener("pointerdown",De);n.domElement.removeEventListener("pointercancel",g);n.domElement.removeEventListener("wheel",$);n.domElement.removeEventListener("pointermove",S);n.domElement.removeEventListener("pointerup",g);if(n._domElementKeyEvents!==null){n._domElementKeyEvents.removeEventListener("keydown",ee);n._domElementKeyEvents=null}};const n=this;const r={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let s=r.NONE;const o=1e-6;const a=new jo;const l=new jo;let c=1;const u=new L;const d=new Pe;const f=new Pe;const m=new Pe;const _=new Pe;const x=new Pe;const p=new Pe;const h=new Pe;const T=new Pe;const v=new Pe;const R=new L;const D=new Pe;let C=false;const A=[];const X={};function E(b){if(b!==null){return 2*Math.PI/60*n.autoRotateSpeed*b}else{return 2*Math.PI/60/60*n.autoRotateSpeed}}function y(b){const q=Math.abs(b)/(100*(window.devicePixelRatio|0));return Math.pow(.95,n.zoomSpeed*q)}function H(b){l.theta-=b}function j(b){l.phi-=b}const ce=function(){const b=new L;return function q(le,ie){b.setFromMatrixColumn(ie,0);b.multiplyScalar(-le);u.add(b)}}();const P=function(){const b=new L;return function q(le,ie){if(n.screenSpacePanning===true){b.setFromMatrixColumn(ie,1)}else{b.setFromMatrixColumn(ie,0);b.crossVectors(n.object.up,b)}b.multiplyScalar(le);u.add(b)}}();const F=function(){const b=new L;return function q(le,ie){const ve=n.domElement;if(n.object.isPerspectiveCamera){const ze=n.object.position;b.copy(ze).sub(n.target);let Xe=b.length();Xe*=Math.tan(n.object.fov/2*Math.PI/180);ce(2*le*Xe/ve.clientHeight,n.object.matrix);P(2*ie*Xe/ve.clientHeight,n.object.matrix)}else if(n.object.isOrthographicCamera){ce(le*(n.object.right-n.object.left)/n.object.zoom/ve.clientWidth,n.object.matrix);P(ie*(n.object.top-n.object.bottom)/n.object.zoom/ve.clientHeight,n.object.matrix)}else{console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");n.enablePan=false}}}();function V(b){if(n.object.isPerspectiveCamera||n.object.isOrthographicCamera){c/=b}else{console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");n.enableZoom=false}}function Y(b){if(n.object.isPerspectiveCamera||n.object.isOrthographicCamera){c*=b}else{console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");n.enableZoom=false}}function W(b,q){if(!n.zoomToCursor){return}C=true;const le=n.domElement.getBoundingClientRect();const ie=b-le.left;const ve=q-le.top;const ze=le.width;const Xe=le.height;D.x=ie/ze*2-1;D.y=-(ve/Xe)*2+1;R.set(D.x,D.y,1).unproject(n.object).sub(n.object.position).normalize()}function k(b){return Math.max(n.minDistance,Math.min(n.maxDistance,b))}function Q(b){d.set(b.clientX,b.clientY)}function ne(b){W(b.clientX,b.clientX);h.set(b.clientX,b.clientY)}function de(b){_.set(b.clientX,b.clientY)}function G(b){f.set(b.clientX,b.clientY);m.subVectors(f,d).multiplyScalar(n.rotateSpeed);const q=n.domElement;H(2*Math.PI*m.x/q.clientHeight);j(2*Math.PI*m.y/q.clientHeight);d.copy(f);n.update()}function K(b){T.set(b.clientX,b.clientY);v.subVectors(T,h);if(v.y>0){V(y(v.y))}else if(v.y<0){Y(y(v.y))}h.copy(T);n.update()}function he(b){x.set(b.clientX,b.clientY);p.subVectors(x,_).multiplyScalar(n.panSpeed);F(p.x,p.y);_.copy(x);n.update()}function xe(b){W(b.clientX,b.clientY);if(b.deltaY<0){Y(y(b.deltaY))}else if(b.deltaY>0){V(y(b.deltaY))}n.update()}function _e(b){let q=false;switch(b.code){case n.keys.UP:if(b.ctrlKey||b.metaKey||b.shiftKey){j(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight)}else{F(0,n.keyPanSpeed)}q=true;break;case n.keys.BOTTOM:if(b.ctrlKey||b.metaKey||b.shiftKey){j(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight)}else{F(0,-n.keyPanSpeed)}q=true;break;case n.keys.LEFT:if(b.ctrlKey||b.metaKey||b.shiftKey){H(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight)}else{F(n.keyPanSpeed,0)}q=true;break;case n.keys.RIGHT:if(b.ctrlKey||b.metaKey||b.shiftKey){H(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight)}else{F(-n.keyPanSpeed,0)}q=true;break}if(q){b.preventDefault();n.update()}}function Ce(b){if(A.length===1){d.set(b.pageX,b.pageY)}else{const q=We(b);const le=.5*(b.pageX+q.x);const ie=.5*(b.pageY+q.y);d.set(le,ie)}}function Le(b){if(A.length===1){_.set(b.pageX,b.pageY)}else{const q=We(b);const le=.5*(b.pageX+q.x);const ie=.5*(b.pageY+q.y);_.set(le,ie)}}function Ae(b){const q=We(b);const le=b.pageX-q.x;const ie=b.pageY-q.y;const ve=Math.sqrt(le*le+ie*ie);h.set(0,ve)}function ke(b){if(n.enableZoom)Ae(b);if(n.enablePan)Le(b)}function I(b){if(n.enableZoom)Ae(b);if(n.enableRotate)Ce(b)}function ht(b){if(A.length==1){f.set(b.pageX,b.pageY)}else{const le=We(b);const ie=.5*(b.pageX+le.x);const ve=.5*(b.pageY+le.y);f.set(ie,ve)}m.subVectors(f,d).multiplyScalar(n.rotateSpeed);const q=n.domElement;H(2*Math.PI*m.x/q.clientHeight);j(2*Math.PI*m.y/q.clientHeight);d.copy(f)}function Ee(b){if(A.length===1){x.set(b.pageX,b.pageY)}else{const q=We(b);const le=.5*(b.pageX+q.x);const ie=.5*(b.pageY+q.y);x.set(le,ie)}p.subVectors(x,_).multiplyScalar(n.panSpeed);F(p.x,p.y);_.copy(x)}function Re(b){const q=We(b);const le=b.pageX-q.x;const ie=b.pageY-q.y;const ve=Math.sqrt(le*le+ie*ie);T.set(0,ve);v.set(0,Math.pow(T.y/h.y,n.zoomSpeed));V(v.y);h.copy(T);const ze=(b.pageX+q.x)*.5;const Xe=(b.pageY+q.y)*.5;W(ze,Xe)}function me(b){if(n.enableZoom)Re(b);if(n.enablePan)Ee(b)}function Qe(b){if(n.enableZoom)Re(b);if(n.enableRotate)ht(b)}function De(b){if(n.enabled===false)return;if(A.length===0){n.domElement.setPointerCapture(b.pointerId);n.domElement.addEventListener("pointermove",S);n.domElement.addEventListener("pointerup",g)}ye(b);if(b.pointerType==="touch"){ge(b)}else{N(b)}}function S(b){if(n.enabled===false)return;if(b.pointerType==="touch"){ue(b)}else{te(b)}}function g(b){Ie(b);if(A.length===0){n.domElement.releasePointerCapture(b.pointerId);n.domElement.removeEventListener("pointermove",S);n.domElement.removeEventListener("pointerup",g)}n.dispatchEvent(Qo);s=r.NONE}function N(b){let q;switch(b.button){case 0:q=n.mouseButtons.LEFT;break;case 1:q=n.mouseButtons.MIDDLE;break;case 2:q=n.mouseButtons.RIGHT;break;default:q=-1}switch(q){case ti.DOLLY:if(n.enableZoom===false)return;ne(b);s=r.DOLLY;break;case ti.ROTATE:if(b.ctrlKey||b.metaKey||b.shiftKey){if(n.enablePan===false)return;de(b);s=r.PAN}else{if(n.enableRotate===false)return;Q(b);s=r.ROTATE}break;case ti.PAN:if(b.ctrlKey||b.metaKey||b.shiftKey){if(n.enableRotate===false)return;Q(b);s=r.ROTATE}else{if(n.enablePan===false)return;de(b);s=r.PAN}break;default:s=r.NONE}if(s!==r.NONE){n.dispatchEvent(Ds)}}function te(b){switch(s){case r.ROTATE:if(n.enableRotate===false)return;G(b);break;case r.DOLLY:if(n.enableZoom===false)return;K(b);break;case r.PAN:if(n.enablePan===false)return;he(b);break}}function $(b){if(n.enabled===false||n.enableZoom===false||s!==r.NONE)return;b.preventDefault();n.dispatchEvent(Ds);xe(b);n.dispatchEvent(Qo)}function ee(b){if(n.enabled===false||n.enablePan===false)return;_e(b)}function ge(b){Z(b);switch(A.length){case 1:switch(n.touches.ONE){case ni.ROTATE:if(n.enableRotate===false)return;Ce(b);s=r.TOUCH_ROTATE;break;case ni.PAN:if(n.enablePan===false)return;Le(b);s=r.TOUCH_PAN;break;default:s=r.NONE}break;case 2:switch(n.touches.TWO){case ni.DOLLY_PAN:if(n.enableZoom===false&&n.enablePan===false)return;ke(b);s=r.TOUCH_DOLLY_PAN;break;case ni.DOLLY_ROTATE:if(n.enableZoom===false&&n.enableRotate===false)return;I(b);s=r.TOUCH_DOLLY_ROTATE;break;default:s=r.NONE}break;default:s=r.NONE}if(s!==r.NONE){n.dispatchEvent(Ds)}}function ue(b){Z(b);switch(s){case r.TOUCH_ROTATE:if(n.enableRotate===false)return;ht(b);n.update();break;case r.TOUCH_PAN:if(n.enablePan===false)return;Ee(b);n.update();break;case r.TOUCH_DOLLY_PAN:if(n.enableZoom===false&&n.enablePan===false)return;me(b);n.update();break;case r.TOUCH_DOLLY_ROTATE:if(n.enableZoom===false&&n.enableRotate===false)return;Qe(b);n.update();break;default:s=r.NONE}}function pe(b){if(n.enabled===false)return;b.preventDefault()}function ye(b){A.push(b.pointerId)}function Ie(b){delete X[b.pointerId];for(let q=0;q<A.length;q++){if(A[q]==b.pointerId){A.splice(q,1);return}}}function Z(b){let q=X[b.pointerId];if(q===void 0){q=new Pe;X[b.pointerId]=q}q.set(b.pageX,b.pageY)}function We(b){const q=b.pointerId===A[0]?A[1]:A[0];return X[q]}n.domElement.addEventListener("contextmenu",pe);n.domElement.addEventListener("pointerdown",De);n.domElement.addEventListener("pointercancel",g);n.domElement.addEventListener("wheel",$,{passive:false});this.update()}}const Pi=new Gl({antialias:true});Pi.setPixelRatio(window.devicePixelRatio);Pi.setSize(window.innerWidth,window.innerHeight);const oa=new Im(16777215,.8);oa.position.set(4,4,-5);new Fm(oa);const on=new kt(60,window.innerWidth/window.innerHeight,1,100);on.up.set(0,0,1);on.add(oa);const tl=1024;const Gm=new Xr(16,16,tl-1,tl-1);const Vm=new Lm;const qr=Vm.load("./textures/edges.png");qr.wrapS=Bt;qr.wrapT=Bt;qr.colorSpace=pt;const km=new Am({alphaMap:qr,transparent:true,side:nn,alphaTest:.5,depthTest:true});const Vl=new an(Gm,km);Vl.name="terrain";const nl=new Nn;const Ar=new L;class kl extends Nm{constructor(){super();this.isLineSegmentsGeometry=true;this.type="LineSegmentsGeometry";const e=[-1,2,0,1,2,0,-1,1,0,1,1,0,-1,0,0,1,0,0,-1,-1,0,1,-1,0];const t=[-1,2,1,2,-1,1,1,1,-1,-1,1,-1,-1,-2,1,-2];const n=[0,2,1,2,3,1,2,4,3,4,5,3,4,6,5,6,7,5];this.setIndex(n);this.setAttribute("position",new Tt(e,3));this.setAttribute("uv",new Tt(t,2))}applyMatrix4(e){const t=this.attributes.instanceStart;const n=this.attributes.instanceEnd;if(t!==void 0){t.applyMatrix4(e);n.applyMatrix4(e);t.needsUpdate=true}if(this.boundingBox!==null){this.computeBoundingBox()}if(this.boundingSphere!==null){this.computeBoundingSphere()}return this}setPositions(e){let t;if(e instanceof Float32Array){t=e}else if(Array.isArray(e)){t=new Float32Array(e)}const n=new qs(t,6,1);this.setAttribute("instanceStart",new Rn(n,3,0));this.setAttribute("instanceEnd",new Rn(n,3,3));this.computeBoundingBox();this.computeBoundingSphere();return this}setColors(e){let t;if(e instanceof Float32Array){t=e}else if(Array.isArray(e)){t=new Float32Array(e)}const n=new qs(t,6,1);this.setAttribute("instanceColorStart",new Rn(n,3,0));this.setAttribute("instanceColorEnd",new Rn(n,3,3));return this}fromWireframeGeometry(e){this.setPositions(e.attributes.position.array);return this}fromEdgesGeometry(e){this.setPositions(e.attributes.position.array);return this}fromMesh(e){this.fromWireframeGeometry(new bm(e.geometry));return this}fromLineSegments(e){const t=e.geometry;this.setPositions(t.attributes.position.array);return this}computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Nn}const e=this.attributes.instanceStart;const t=this.attributes.instanceEnd;if(e!==void 0&&t!==void 0){this.boundingBox.setFromBufferAttribute(e);nl.setFromBufferAttribute(t);this.boundingBox.union(nl)}}computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Ri}if(this.boundingBox===null){this.computeBoundingBox()}const e=this.attributes.instanceStart;const t=this.attributes.instanceEnd;if(e!==void 0&&t!==void 0){const n=this.boundingSphere.center;this.boundingBox.getCenter(n);let r=0;for(let s=0,o=e.count;s<o;s++){Ar.fromBufferAttribute(e,s);r=Math.max(r,n.distanceToSquared(Ar));Ar.fromBufferAttribute(t,s);r=Math.max(r,n.distanceToSquared(Ar))}this.boundingSphere.radius=Math.sqrt(r);if(isNaN(this.boundingSphere.radius)){console.error("THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.",this)}}}toJSON(){}applyMatrix(e){console.warn("THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().");return this.applyMatrix4(e)}}ae.line={worldUnits:{value:1},linewidth:{value:1},resolution:{value:new Pe(1,1)},dashOffset:{value:0},dashScale:{value:1},dashSize:{value:1},gapSize:{value:1}};Lt["line"]={uniforms:na.merge([ae.common,ae.fog,ae.line]),vertexShader:`
		#include <common>
		#include <color_pars_vertex>
		#include <fog_pars_vertex>
		#include <logdepthbuf_pars_vertex>
		#include <clipping_planes_pars_vertex>

		uniform float linewidth;
		uniform vec2 resolution;

		attribute vec3 instanceStart;
		attribute vec3 instanceEnd;

		attribute vec3 instanceColorStart;
		attribute vec3 instanceColorEnd;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#ifdef USE_DASH

			uniform float dashScale;
			attribute float instanceDistanceStart;
			attribute float instanceDistanceEnd;
			varying float vLineDistance;

		#endif

		void trimSegment( const in vec4 start, inout vec4 end ) {

			// trim end segment so it terminates between the camera plane and the near plane

			// conservative estimate of the near plane
			float a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column
			float b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column
			float nearEstimate = - 0.5 * b / a;

			float alpha = ( nearEstimate - start.z ) / ( end.z - start.z );

			end.xyz = mix( start.xyz, end.xyz, alpha );

		}

		void main() {

			#ifdef USE_COLOR

				vColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;

			#endif

			#ifdef USE_DASH

				vLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;
				vUv = uv;

			#endif

			float aspect = resolution.x / resolution.y;

			// camera space
			vec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );
			vec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );

			#ifdef WORLD_UNITS

				worldStart = start.xyz;
				worldEnd = end.xyz;

			#else

				vUv = uv;

			#endif

			// special case for perspective projection, and segments that terminate either in, or behind, the camera plane
			// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space
			// but we need to perform ndc-space calculations in the shader, so we must address this issue directly
			// perhaps there is a more elegant solution -- WestLangley

			bool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column

			if ( perspective ) {

				if ( start.z < 0.0 && end.z >= 0.0 ) {

					trimSegment( start, end );

				} else if ( end.z < 0.0 && start.z >= 0.0 ) {

					trimSegment( end, start );

				}

			}

			// clip space
			vec4 clipStart = projectionMatrix * start;
			vec4 clipEnd = projectionMatrix * end;

			// ndc space
			vec3 ndcStart = clipStart.xyz / clipStart.w;
			vec3 ndcEnd = clipEnd.xyz / clipEnd.w;

			// direction
			vec2 dir = ndcEnd.xy - ndcStart.xy;

			// account for clip-space aspect ratio
			dir.x *= aspect;
			dir = normalize( dir );

			#ifdef WORLD_UNITS

				vec3 worldDir = normalize( end.xyz - start.xyz );
				vec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );
				vec3 worldUp = normalize( cross( worldDir, tmpFwd ) );
				vec3 worldFwd = cross( worldDir, worldUp );
				worldPos = position.y < 0.5 ? start: end;

				// height offset
				float hw = linewidth * 0.5;
				worldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;

				// don't extend the line if we're rendering dashes because we
				// won't be rendering the endcaps
				#ifndef USE_DASH

					// cap extension
					worldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;

					// add width to the box
					worldPos.xyz += worldFwd * hw;

					// endcaps
					if ( position.y > 1.0 || position.y < 0.0 ) {

						worldPos.xyz -= worldFwd * 2.0 * hw;

					}

				#endif

				// project the worldpos
				vec4 clip = projectionMatrix * worldPos;

				// shift the depth of the projected points so the line
				// segments overlap neatly
				vec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;
				clip.z = clipPose.z * clip.w;

			#else

				vec2 offset = vec2( dir.y, - dir.x );
				// undo aspect ratio adjustment
				dir.x /= aspect;
				offset.x /= aspect;

				// sign flip
				if ( position.x < 0.0 ) offset *= - 1.0;

				// endcaps
				if ( position.y < 0.0 ) {

					offset += - dir;

				} else if ( position.y > 1.0 ) {

					offset += dir;

				}

				// adjust for linewidth
				offset *= linewidth;

				// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...
				offset /= resolution.y;

				// select end
				vec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;

				// back to clip space
				offset *= clip.w;

				clip.xy += offset;

			#endif

			gl_Position = clip;

			vec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation

			#include <logdepthbuf_vertex>
			#include <clipping_planes_vertex>
			#include <fog_vertex>

		}
		`,fragmentShader:`
		uniform vec3 diffuse;
		uniform float opacity;
		uniform float linewidth;

		#ifdef USE_DASH

			uniform float dashOffset;
			uniform float dashSize;
			uniform float gapSize;

		#endif

		varying float vLineDistance;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#include <common>
		#include <color_pars_fragment>
		#include <fog_pars_fragment>
		#include <logdepthbuf_pars_fragment>
		#include <clipping_planes_pars_fragment>

		vec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {

			float mua;
			float mub;

			vec3 p13 = p1 - p3;
			vec3 p43 = p4 - p3;

			vec3 p21 = p2 - p1;

			float d1343 = dot( p13, p43 );
			float d4321 = dot( p43, p21 );
			float d1321 = dot( p13, p21 );
			float d4343 = dot( p43, p43 );
			float d2121 = dot( p21, p21 );

			float denom = d2121 * d4343 - d4321 * d4321;

			float numer = d1343 * d4321 - d1321 * d4343;

			mua = numer / denom;
			mua = clamp( mua, 0.0, 1.0 );
			mub = ( d1343 + d4321 * ( mua ) ) / d4343;
			mub = clamp( mub, 0.0, 1.0 );

			return vec2( mua, mub );

		}

		void main() {

			#include <clipping_planes_fragment>

			#ifdef USE_DASH

				if ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps

				if ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX

			#endif

			float alpha = opacity;

			#ifdef WORLD_UNITS

				// Find the closest points on the view ray and the line segment
				vec3 rayEnd = normalize( worldPos.xyz ) * 1e5;
				vec3 lineDir = worldEnd - worldStart;
				vec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );

				vec3 p1 = worldStart + lineDir * params.x;
				vec3 p2 = rayEnd * params.y;
				vec3 delta = p1 - p2;
				float len = length( delta );
				float norm = len / linewidth;

				#ifndef USE_DASH

					#ifdef USE_ALPHA_TO_COVERAGE

						float dnorm = fwidth( norm );
						alpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );

					#else

						if ( norm > 0.5 ) {

							discard;

						}

					#endif

				#endif

			#else

				#ifdef USE_ALPHA_TO_COVERAGE

					// artifacts appear on some hardware if a derivative is taken within a conditional
					float a = vUv.x;
					float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
					float len2 = a * a + b * b;
					float dlen = fwidth( len2 );

					if ( abs( vUv.y ) > 1.0 ) {

						alpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );

					}

				#else

					if ( abs( vUv.y ) > 1.0 ) {

						float a = vUv.x;
						float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
						float len2 = a * a + b * b;

						if ( len2 > 1.0 ) discard;

					}

				#endif

			#endif

			vec4 diffuseColor = vec4( diffuse, alpha );

			#include <logdepthbuf_fragment>
			#include <color_fragment>

			gl_FragColor = vec4( diffuseColor.rgb, alpha );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>
			#include <fog_fragment>
			#include <premultiplied_alpha_fragment>

		}
		`};class la extends In{constructor(e){super({type:"LineMaterial",uniforms:na.clone(Lt["line"].uniforms),vertexShader:Lt["line"].vertexShader,fragmentShader:Lt["line"].fragmentShader,clipping:true});this.isLineMaterial=true;this.setValues(e)}get color(){return this.uniforms.diffuse.value}set color(e){this.uniforms.diffuse.value=e}get worldUnits(){return"WORLD_UNITS"in this.defines}set worldUnits(e){if(e===true){this.defines.WORLD_UNITS=""}else{delete this.defines.WORLD_UNITS}}get linewidth(){return this.uniforms.linewidth.value}set linewidth(e){if(!this.uniforms.linewidth)return;this.uniforms.linewidth.value=e}get dashed(){return"USE_DASH"in this.defines}set dashed(e){if(e===true!==this.dashed){this.needsUpdate=true}if(e===true){this.defines.USE_DASH=""}else{delete this.defines.USE_DASH}}get dashScale(){return this.uniforms.dashScale.value}set dashScale(e){this.uniforms.dashScale.value=e}get dashSize(){return this.uniforms.dashSize.value}set dashSize(e){this.uniforms.dashSize.value=e}get dashOffset(){return this.uniforms.dashOffset.value}set dashOffset(e){this.uniforms.dashOffset.value=e}get gapSize(){return this.uniforms.gapSize.value}set gapSize(e){this.uniforms.gapSize.value=e}get opacity(){return this.uniforms.opacity.value}set opacity(e){if(!this.uniforms)return;this.uniforms.opacity.value=e}get resolution(){return this.uniforms.resolution.value}set resolution(e){this.uniforms.resolution.value.copy(e)}get alphaToCoverage(){return"USE_ALPHA_TO_COVERAGE"in this.defines}set alphaToCoverage(e){if(!this.defines)return;if(e===true!==this.alphaToCoverage){this.needsUpdate=true}if(e===true){this.defines.USE_ALPHA_TO_COVERAGE="";this.extensions.derivatives=true}else{delete this.defines.USE_ALPHA_TO_COVERAGE;this.extensions.derivatives=false}}}const il=new L;const rl=new L;const gt=new it;const _t=new it;const Jt=new it;const Us=new L;const Is=new st;const vt=new Om;const sl=new L;const wr=new Nn;const Rr=new Ri;const Qt=new it;let sn;let Kn;function al(i,e,t){Qt.set(0,0,-e,1).applyMatrix4(i.projectionMatrix);Qt.multiplyScalar(1/Qt.w);Qt.x=Kn/t.width;Qt.y=Kn/t.height;Qt.applyMatrix4(i.projectionMatrixInverse);Qt.multiplyScalar(1/Qt.w);return Math.abs(Math.max(Qt.x,Qt.y))}function Wm(i,e){const t=i.matrixWorld;const n=i.geometry;const r=n.attributes.instanceStart;const s=n.attributes.instanceEnd;const o=Math.min(n.instanceCount,r.count);for(let a=0,l=o;a<l;a++){vt.start.fromBufferAttribute(r,a);vt.end.fromBufferAttribute(s,a);vt.applyMatrix4(t);const c=new L;const u=new L;sn.distanceSqToSegment(vt.start,vt.end,u,c);const d=u.distanceTo(c)<Kn*.5;if(d){e.push({point:u,pointOnLine:c,distance:sn.origin.distanceTo(u),object:i,face:null,faceIndex:a,uv:null,uv1:null})}}}function Xm(i,e,t){const n=e.projectionMatrix;const r=i.material;const s=r.resolution;const o=i.matrixWorld;const a=i.geometry;const l=a.attributes.instanceStart;const c=a.attributes.instanceEnd;const u=Math.min(a.instanceCount,l.count);const d=-e.near;sn.at(1,Jt);Jt.w=1;Jt.applyMatrix4(e.matrixWorldInverse);Jt.applyMatrix4(n);Jt.multiplyScalar(1/Jt.w);Jt.x*=s.x/2;Jt.y*=s.y/2;Jt.z=0;Us.copy(Jt);Is.multiplyMatrices(e.matrixWorldInverse,o);for(let f=0,m=u;f<m;f++){gt.fromBufferAttribute(l,f);_t.fromBufferAttribute(c,f);gt.w=1;_t.w=1;gt.applyMatrix4(Is);_t.applyMatrix4(Is);const _=gt.z>d&&_t.z>d;if(_){continue}if(gt.z>d){const v=gt.z-_t.z;const R=(gt.z-d)/v;gt.lerp(_t,R)}else if(_t.z>d){const v=_t.z-gt.z;const R=(_t.z-d)/v;_t.lerp(gt,R)}gt.applyMatrix4(n);_t.applyMatrix4(n);gt.multiplyScalar(1/gt.w);_t.multiplyScalar(1/_t.w);gt.x*=s.x/2;gt.y*=s.y/2;_t.x*=s.x/2;_t.y*=s.y/2;vt.start.copy(gt);vt.start.z=0;vt.end.copy(_t);vt.end.z=0;const x=vt.closestPointToPointParameter(Us,true);vt.at(x,sl);const p=Ml.lerp(gt.z,_t.z,x);const h=p>=-1&&p<=1;const T=Us.distanceTo(sl)<Kn*.5;if(h&&T){vt.start.fromBufferAttribute(l,f);vt.end.fromBufferAttribute(c,f);vt.start.applyMatrix4(o);vt.end.applyMatrix4(o);const v=new L;const R=new L;sn.distanceSqToSegment(vt.start,vt.end,R,v);t.push({point:R,pointOnLine:v,distance:sn.origin.distanceTo(R),object:i,face:null,faceIndex:f,uv:null,uv1:null})}}}class Ym extends an{constructor(e=new kl,t=new la({color:Math.random()*16777215})){super(e,t);this.isLineSegments2=true;this.type="LineSegments2"}computeLineDistances(){const e=this.geometry;const t=e.attributes.instanceStart;const n=e.attributes.instanceEnd;const r=new Float32Array(2*t.count);for(let o=0,a=0,l=t.count;o<l;o++,a+=2){il.fromBufferAttribute(t,o);rl.fromBufferAttribute(n,o);r[a]=a===0?0:r[a-1];r[a+1]=r[a]+il.distanceTo(rl)}const s=new qs(r,2,1);e.setAttribute("instanceDistanceStart",new Rn(s,1,0));e.setAttribute("instanceDistanceEnd",new Rn(s,1,1));return this}raycast(e,t){const n=this.material.worldUnits;const r=e.camera;if(r===null&&!n){console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.')}const s=e.params.Line2!==void 0?e.params.Line2.threshold||0:0;sn=e.ray;const o=this.matrixWorld;const a=this.geometry;const l=this.material;Kn=l.linewidth+s;if(a.boundingSphere===null){a.computeBoundingSphere()}Rr.copy(a.boundingSphere).applyMatrix4(o);let c;if(n){c=Kn*.5}else{const d=Math.max(r.near,Rr.distanceToPoint(sn.origin));c=al(r,d,l.resolution)}Rr.radius+=c;if(sn.intersectsSphere(Rr)===false){return}if(a.boundingBox===null){a.computeBoundingBox()}wr.copy(a.boundingBox).applyMatrix4(o);let u;if(n){u=Kn*.5}else{const d=Math.max(r.near,wr.distanceToPoint(sn.origin));u=al(r,d,l.resolution)}wr.expandByScalar(u);if(sn.intersectsBox(wr)===false){return}if(n){Wm(this,t)}else{Xm(this,r,t)}}}class Wl extends kl{constructor(){super();this.isLineGeometry=true;this.type="LineGeometry"}setPositions(e){const t=e.length-3;const n=new Float32Array(2*t);for(let r=0;r<t;r+=3){n[2*r]=e[r];n[2*r+1]=e[r+1];n[2*r+2]=e[r+2];n[2*r+3]=e[r+3];n[2*r+4]=e[r+4];n[2*r+5]=e[r+5]}super.setPositions(n);return this}setColors(e){const t=e.length-3;const n=new Float32Array(2*t);for(let r=0;r<t;r+=3){n[2*r]=e[r];n[2*r+1]=e[r+1];n[2*r+2]=e[r+2];n[2*r+3]=e[r+3];n[2*r+4]=e[r+4];n[2*r+5]=e[r+5]}super.setColors(n);return this}fromLine(e){const t=e.geometry;this.setPositions(t.attributes.position.array);return this}}class qm extends Ym{constructor(e=new Wl,t=new la({color:Math.random()*16777215})){super(e,t);this.isLine2=true;this.type="Line2"}}function Cr(i){return getComputedStyle(document.documentElement).getPropertyValue(i)}const Gi=120*12;const Dr=new Float32Array(Gi);const Ur=new Float32Array(Gi);for(let i=0;i<Gi;i+=3){const e=1-Math.abs(i-Gi/2)/Gi*2;Ur[i]=e;Ur[i+1]=e;Ur[i+2]=e;Dr[i]=0;Dr[i+1]=0;Dr[i+2]=2}const ca=new Wl;ca.setPositions(Dr);ca.setColors(Ur);const jm=new la({linewidth:.005,vertexColors:true,transparent:true,opacity:.9,dashed:false});const Ft=new qm(ca,jm);Ft.computeLineDistances();Ft.scale.set(1,1,1);Ft.visible=false;Ft.name="feedback";const Di=new Em;const Km=new Bm(5);Km.setColors("lime","aquamarine","LightCoral");Di.add(Vl);Di.add(Ft);Di.add(on);function Zm(i){return new Worker("/sente/assets/compute-vertices-fH0jLqfo.js",{name:i==null?void 0:i.name})}function $m(i){return new Worker("/sente/assets/gen-terrain-IqRC1MRr.js",{name:i==null?void 0:i.name})}const Jm="/sente/assets/orbiter-ySO4wmOm.js";const Qm="/sente/assets/waveterrain-2axfpoiz.js";const eg="/sente/assets/panner--qCO1gE8.js";const tg="/sente/assets/gain01-ZEWZ9AL8.js";const ng="/sente/assets/add-ThadG9Ms.js";const ig="/sente/assets/wrap-AuPjl0YC.js";const rg="/sente/assets/fold-gZghzhin.js";const sg="/sente/assets/clip-kKvhzVOx.js";const ag="/sente/assets/sigmoid2-5PLRDrWs.js";const og="/sente/assets/selector-sOFS6FRu.js";let Ve=null;const J={};const Ot={};try{Ve=new AudioContext({sampleRate:44100});Ve.suspend();J.analyserX=Ve.createAnalyser();J.analyserY=Ve.createAnalyser();J.analyserX.fftSize=1024;J.analyserY.fftSize=1024;Ot.analyserBufferLength=J.analyserX.frequencyBinCount;Ot.analyserXDataArray=new Uint8Array(Ot.analyserBufferLength);Ot.analyserYDataArray=new Uint8Array(Ot.analyserBufferLength);J.analyserX.channelInterpretation="discrete";J.analyserY.channelInterpretation="discrete";J.analyserX.channelCount=1;J.analyserY.channelCount=1;J.analyserX.channelCountMode="explicit";J.analyserY.channelCountMode="explicit";J.masterGain=Ve.createGain()}catch(i){console.error(`** Error: Unable to create audio context: ${i}`)}try{console.log("adding audioWorkletNode modules");await Ve.audioWorklet.addModule(Jm);await Ve.audioWorklet.addModule(eg);await Ve.audioWorklet.addModule(Qm);await Ve.audioWorklet.addModule(tg);await Ve.audioWorklet.addModule(ng);await Ve.audioWorklet.addModule(sg);await Ve.audioWorklet.addModule(ig);await Ve.audioWorklet.addModule(rg);await Ve.audioWorklet.addModule(ag);await Ve.audioWorklet.addModule(og)}catch(i){console.error(`** Error: Unable to add audio worklet module: ${i}`)}try{console.log("creating audioWorkletNodes");J.orbiter1=new AudioWorkletNode(Ve,"modulator",{numberOfOutputs:2,outputChannelCount:[8,8],channelInterpretation:"discrete"});J.orbiter2=new AudioWorkletNode(Ve,"modulator",{numberOfOutputs:2,outputChannelCount:[8,8],channelInterpretation:"discrete"});J.waveterrain=new AudioWorkletNode(Ve,"waveterrain",{numberOfInputs:2,numberOfOutputs:1,outputChannelCount:[8],channelInterpretation:"discrete"});J.panner=new AudioWorkletNode(Ve,"panner",{numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[2],channelInterpretation:"discrete"});J.masterGain=new AudioWorkletNode(Ve,"gain01",{numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[2],channelInterpretation:"discrete"});J.addX=new AudioWorkletNode(Ve,"add",{numberOfInputs:2,numberOfOutputs:1,outputChannelCount:[8],channelInterpretation:"discrete"});J.addY=new AudioWorkletNode(Ve,"add",{numberOfInputs:2,numberOfOutputs:1,outputChannelCount:[8],channelInterpretation:"discrete"});J.clip=new AudioWorkletNode(Ve,"clip",{numberOfInputs:2,numberOfOutputs:2,outputChannelCount:[8,8],channelInterpretation:"discrete",processorOptions:{range:[-.9,.9]}});J.wrap=new AudioWorkletNode(Ve,"wrap",{numberOfInputs:2,numberOfOutputs:2,outputChannelCount:[8,8],channelInterpretation:"discrete",processorOptions:{range:[-1,1]}});J.fold=new AudioWorkletNode(Ve,"fold",{numberOfInputs:2,numberOfOutputs:2,outputChannelCount:[8,8],channelInterpretation:"discrete"});J.sigmoid2=new AudioWorkletNode(Ve,"sigmoid2",{numberOfInputs:2,numberOfOutputs:2,outputChannelCount:[8,8],channelInterpretation:"discrete"});J.selectorX=new AudioWorkletNode(Ve,"selector",{numberOfInputs:4,numberOfOutputs:1,outputChannelCount:[8],channelInterpretation:"discrete"});J.selectorY=new AudioWorkletNode(Ve,"selector",{numberOfInputs:4,numberOfOutputs:1,outputChannelCount:[8],channelInterpretation:"discrete"})}catch(i){console.error(`** Error: Unable to create worklet node: ${i}`)}function ol(i,e,t,n,r){i=(i-e)*(r-n)/(t-e)+n;return i<n?n:i>r?r:i}function Lr(i,e=0,t=1){return i<e?e:t<i?t:i}var gn,en,yt,Yi,Xn,qi,js,ji,Ks,Gr,Xl;const Si=class Si{constructor({ctx:e,param:t,el:n,transfer:r=a=>a,slide:s=true,slidems:o=100}){cn(this,qi);cn(this,ji);cn(this,Gr);cn(this,gn,void 0);cn(this,en,void 0);cn(this,yt,void 0);cn(this,Yi,void 0);cn(this,Xn,void 0);[Qn(this,gn)._,Qn(this,yt)._,Qn(this,en)._,Qn(this,Yi)._,Qn(this,Xn)._]=[e,t,n,r,o*.001];if(!Ke(this,gn))es(this,gn,Si.audioCtx);Ke(this,en).addEventListener("input",a=>s===true?ei(this,Gr,Xl).call(this,a.target.value):ei(this,ji,Ks).call(this,a.target.value));ei(this,ji,Ks).call(this,Ke(this,en).value)}static setContext(e){Si.audioCtx=e}};gn=new WeakMap;en=new WeakMap;yt=new WeakMap;Yi=new WeakMap;Xn=new WeakMap;qi=new WeakSet;js=function(e){let t;if(Ke(this,en).min&&Ke(this,en).max){let n,r;[n,r]=[+Ke(this,en).min,+Ke(this,en).max];t=ol(Ke(this,Yi).call(this,ol(+e,n,r,0,1)),0,1,n,r)}else{t=+e}return t};ji=new WeakSet;Ks=function(e){const t=ei(this,qi,js).call(this,e);if(typeof t!=="number")return;if(Array.isArray(Ke(this,yt)))Ke(this,yt).forEach(n=>n.value=Lr(t,n.minValue,n.maxValue));else Ke(this,yt).linearRampToValueAtTime(Lr(t,Ke(this,yt).minValue,Ke(this,yt).maxValue),Ke(this,gn).currentTime+Ke(this,Xn))};Gr=new WeakSet;Xl=function(e){const t=ei(this,qi,js).call(this,e);if(typeof t!=="number")return;if(Array.isArray(Ke(this,yt)))Ke(this,yt).forEach(n=>n.linearRampToValueAtTime(Lr(t,Ke(this,yt).minValue,Ke(this,yt).maxValue),Ke(this,gn).currentTime+Ke(this,Xn)));else Ke(this,yt).linearRampToValueAtTime(Lr(t,Ke(this,yt).minValue,Ke(this,yt).maxValue),Ke(this,gn).currentTime+Ke(this,Xn))};Jr(Si,"audioCtx");Jr(Si,"transferFunction",{linear:e=>e,exp:e=>e<1e-4?0:Math.pow(2,10*e-10)});let lt=Si;const lg=i=>{i.background=new Ye(Cr("--color-background"));const e=i.getObjectByName("terrain");e.material.color.set(Cr("--three-color-terrain"));e.material.emissive.set(Cr("--three-color-terrain-emissive"));i.getObjectByName("feedback").material.color.set(Cr("--three-color-feedback"))};const Yl=new Zm;const ua=new $m;lt.setContext(Ve);let Ns;const tn=[];async function cg(i){if(Ve.state==="running"){document.getElementById("toggle").classList.remove("active");await Ve.suspend();Ft.visible=false;document.getElementById("info").classList.remove("hidden");document.getElementById("box").classList.add("hidden")}else{document.getElementById("toggle").classList.add("active");await Ve.resume();Ft.visible=true;document.getElementById("info").classList.add("hidden");document.getElementById("box").classList.remove("hidden")}}J.orbiter1.connect(J.addX,0,0);J.orbiter2.connect(J.addX,0,1);J.orbiter1.connect(J.addY,1,0);J.orbiter2.connect(J.addY,1,1);J.addX.connect(J.clip,0,0);J.addY.connect(J.clip,0,1);J.addX.connect(J.sigmoid2,0,0);J.addY.connect(J.sigmoid2,0,1);J.addX.connect(J.wrap,0,0);J.addY.connect(J.wrap,0,1);J.addX.connect(J.fold,0,0);J.addY.connect(J.fold,0,1);J.sigmoid2.connect(J.selectorX,0,0);J.sigmoid2.connect(J.selectorY,1,0);J.clip.connect(J.selectorX,0,1);J.clip.connect(J.selectorY,1,1);J.wrap.connect(J.selectorX,0,2);J.wrap.connect(J.selectorY,1,2);J.fold.connect(J.selectorX,0,3);J.fold.connect(J.selectorY,1,3);J.selectorX.connect(J.waveterrain,0,0);J.selectorY.connect(J.waveterrain,0,1);J.waveterrain.connect(J.panner,0,0).connect(J.masterGain).connect(Ve.destination);J.selectorX.connect(J.analyserX,0,0);J.selectorY.connect(J.analyserY,0,0);tn.push(new lt({param:J.masterGain.parameters.get("gain"),el:document.getElementById("masterGain"),transfer:lt.transferFunction.exp}));tn.push(new lt({param:[J.orbiter1.parameters.get("voices"),J.orbiter2.parameters.get("voices"),J.panner.parameters.get("voices")],el:document.getElementById("voices"),slide:false}));tn.push(new lt({param:[J.orbiter1.parameters.get("detune"),J.orbiter2.parameters.get("detune")],el:document.getElementById("detune")}));for(let i=1;i<=2;i++){tn.push(new lt({param:J["orbiter"+i].parameters.get("orbit"),el:document.getElementById("orbit"+i),transfer:lt.transferFunction.exp}));tn.push(new lt({param:J["orbiter"+i].parameters.get("orbitDeviationF"),el:document.getElementById("orbitDeviationF"+i),transfer:lt.transferFunction.exp}));tn.push(new lt({param:J["orbiter"+i].parameters.get("orbitDeviationQt"),el:document.getElementById("orbitDeviationQt"+i),transfer:lt.transferFunction.exp}));tn.push(new lt({param:J["orbiter"+i].parameters.get("radius"),el:document.getElementById("radius"+i)}));tn.push(new lt({param:J["orbiter"+i].parameters.get("radiusDeviationF"),el:document.getElementById("radiusDeviationF"+i),transfer:lt.transferFunction.exp}));tn.push(new lt({param:J["orbiter"+i].parameters.get("radiusDeviationQt"),el:document.getElementById("radiusDeviationQt"+i),transfer:lt.transferFunction.exp}))}tn.push(new lt({param:[J.selectorX.parameters.get("choices"),J.selectorY.parameters.get("choices")],el:document.getElementById("edges"),slide:false}));Array.from(document.getElementsByClassName("edges-button")).forEach((i,e)=>{i.onclick=()=>{const t=document.getElementById("edges");t.value=e+1;t.dispatchEvent(new Event("input"));const n=["sigm","clip","wrap","fold"];const r=document.getElementById("edges-button-selection");r.className="";r.classList.add(n[e])}});document.getElementById("toggle").addEventListener("click",cg);const Hr=1024;ua.postMessage([Hr,Hr,"default"]);function ql(){requestAnimationFrame(ql);ug()}function ug(){if(Ve.state==="running")fg();Pi.render(Di,on)}const Dn=new Hm(on,Pi.domElement);Dn.minDistance=16;Dn.maxDistance=56;Dn.maxPolarAngle=Math.PI/2;Dn.enablePan=false;function hg(){on.position.x=Dn.target.x+15;on.position.y=Dn.target.y+20;on.position.z=Dn.target.z+10}hg();Dn.update();const dg=120*10;function fg(){if(!Ot.analyserXDataArray||!Ot.analyserYDataArray)return;J.analyserX.getByteTimeDomainData(Ot.analyserXDataArray);J.analyserY.getByteTimeDomainData(Ot.analyserYDataArray);for(let i=0;i<Ot.analyserBufferLength;i++){const e=Math.round(i/Ot.analyserBufferLength*dg);const t=Ot.analyserXDataArray[e]/128;const n=Ot.analyserYDataArray[e]/128;const r=t*16/2-8;const s=(1-n)*16/2;Ft.geometry.attributes.instanceEnd.setX(i-1,r);Ft.geometry.attributes.instanceStart.setX(i,r);Ft.geometry.attributes.instanceEnd.setY(i-1,s);Ft.geometry.attributes.instanceStart.setY(i,s)}Ft.geometry.attributes.instanceStart.needsUpdate=true;Ft.geometry.attributes.instanceEnd.needsUpdate=true}window.addEventListener("resize",pg);function pg(){on.aspect=window.innerWidth/window.innerHeight;on.updateProjectionMatrix();Pi.setSize(window.innerWidth,window.innerHeight)}document.getElementById("three").appendChild(Pi.domElement);function mg(i){var e;Ns=i;Yl.postMessage(Ns);(e=J==null?void 0:J.waveterrain)==null?void 0:e.port.postMessage(Ns)}Yl.addEventListener("message",i=>{const e=Di.getObjectByName("terrain");e.geometry.attributes.position.array=i.data[0];e.geometry.attributes.normal.array=i.data[1];e.geometry.attributes.position.needsUpdate=true;e.geometry.attributes.normal.needsUpdate=true;document.getElementById("gen").disabled=false});ua.addEventListener("message",i=>{mg(i.data)});const gg=i=>{document.getElementById("gen").disabled=true;ua.postMessage([Hr,Hr])};document.getElementById("gen").onclick=gg;const ha=Ve.createAnalyser();ha.fftSize=2048;const jl=ha.frequencyBinCount;const _g=new Uint8Array(jl);ha.getByteTimeDomainData(_g);const da=Ve.createAnalyser();J.waveterrain.connect(da,0,0);da.fftSize=2048;const vg=new Uint8Array(jl);da.getByteTimeDomainData(vg);const Zi=document.createElement("canvas");Zi.id="meter";Zi.getContext("2d");document.body.appendChild(Zi);const xg=200;const Mg=200;Zi.width=xg;Zi.height=Mg;ql();document.getElementById("color-theme").addEventListener("change",i=>{if(i.target.checked){window.localStorage.setItem("theme","dark")}else{window.localStorage.setItem("theme","light")}Kl()});function Kl(){const i=window.localStorage.getItem("theme");if(i==="dark"){document.documentElement.setAttribute("data-theme","dark");document.getElementById("label-color-theme").textContent="LIGHT";document.getElementById("color-theme").checked=true}else{document.documentElement.setAttribute("data-theme","light");document.getElementById("label-color-theme").textContent="DARK";document.getElementById("color-theme").checked=false}lg(Di)}Kl();Array.from(document.getElementsByClassName("orbiter-button")).forEach((i,e)=>{i.onclick=t=>{const n=document.getElementsByClassName("orbiter-button");const r=document.getElementsByClassName("slider-card-box");n[e].classList.remove("off");r[e].classList.remove("off");e===0?(n[1].classList.add("off"),r[1].classList.add("off")):(n[0].classList.add("off"),r[0].classList.add("off"))}});
